/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!******************************************!*\
  !*** ./node_modules/js-base64/base64.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! exports used: Base64 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n *  base64.js\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n */\n;(function (global, factory) {\n     true\n        ? module.exports = factory(global)\n        : typeof define === 'function' && define.amd\n        ? define(factory) : factory(global)\n}((\n    typeof self !== 'undefined' ? self\n        : typeof window !== 'undefined' ? window\n        : typeof global !== 'undefined' ? global\n: this\n), function(global) {\n    'use strict';\n    // existing version for noConflict()\n    global = global || {};\n    var _Base64 = global.Base64;\n    var version = \"2.5.1\";\n    // if node.js and NOT React Native, we use Buffer\n    var buffer;\n    if (typeof module !== 'undefined' && module.exports) {\n        try {\n            buffer = eval(\"require('buffer').Buffer\");\n        } catch (err) {\n            buffer = undefined;\n        }\n    }\n    // constants\n    var b64chars\n        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var b64tab = function(bin) {\n        var t = {};\n        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n        return t;\n    }(b64chars);\n    var fromCharCode = String.fromCharCode;\n    // encoder stuff\n    var cb_utob = function(c) {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))\n                                + fromCharCode(0x80 | (cc & 0x3f)))\n                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))\n                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                   + fromCharCode(0x80 | ( cc         & 0x3f)));\n        } else {\n            var cc = 0x10000\n                + (c.charCodeAt(0) - 0xD800) * 0x400\n                + (c.charCodeAt(1) - 0xDC00);\n            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))\n                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        }\n    };\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    var utob = function(u) {\n        return u.replace(re_utob, cb_utob);\n    };\n    var cb_encode = function(ccc) {\n        var padlen = [0, 2, 1][ccc.length % 3],\n        ord = ccc.charCodeAt(0) << 16\n            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),\n        chars = [\n            b64chars.charAt( ord >>> 18),\n            b64chars.charAt((ord >>> 12) & 63),\n            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n        ];\n        return chars.join('');\n    };\n    var btoa = global.btoa ? function(b) {\n        return global.btoa(b);\n    } : function(b) {\n        return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n    var _encode = buffer ?\n        buffer.from && Uint8Array && buffer.from !== Uint8Array.from\n        ? function (u) {\n            return (u.constructor === buffer.constructor ? u : buffer.from(u))\n                .toString('base64')\n        }\n        :  function (u) {\n            return (u.constructor === buffer.constructor ? u : new  buffer(u))\n                .toString('base64')\n        }\n        : function (u) { return btoa(utob(u)) }\n    ;\n    var encode = function(u, urisafe) {\n        return !urisafe\n            ? _encode(String(u))\n            : _encode(String(u)).replace(/[+\\/]/g, function(m0) {\n                return m0 == '+' ? '-' : '_';\n            }).replace(/=/g, '');\n    };\n    var encodeURI = function(u) { return encode(u, true) };\n    // decoder stuff\n    var re_btou = new RegExp([\n        '[\\xC0-\\xDF][\\x80-\\xBF]',\n        '[\\xE0-\\xEF][\\x80-\\xBF]{2}',\n        '[\\xF0-\\xF7][\\x80-\\xBF]{3}'\n    ].join('|'), 'g');\n    var cb_btou = function(cccc) {\n        switch(cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                |    ((0x3f & cccc.charCodeAt(1)) << 12)\n                |    ((0x3f & cccc.charCodeAt(2)) <<  6)\n                |     (0x3f & cccc.charCodeAt(3)),\n            offset = cp - 0x10000;\n            return (fromCharCode((offset  >>> 10) + 0xD800)\n                    + fromCharCode((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return fromCharCode(\n                ((0x0f & cccc.charCodeAt(0)) << 12)\n                    | ((0x3f & cccc.charCodeAt(1)) << 6)\n                    |  (0x3f & cccc.charCodeAt(2))\n            );\n        default:\n            return  fromCharCode(\n                ((0x1f & cccc.charCodeAt(0)) << 6)\n                    |  (0x3f & cccc.charCodeAt(1))\n            );\n        }\n    };\n    var btou = function(b) {\n        return b.replace(re_btou, cb_btou);\n    };\n    var cb_decode = function(cccc) {\n        var len = cccc.length,\n        padlen = len % 4,\n        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n        chars = [\n            fromCharCode( n >>> 16),\n            fromCharCode((n >>>  8) & 0xff),\n            fromCharCode( n         & 0xff)\n        ];\n        chars.length -= [0, 0, 2, 1][padlen];\n        return chars.join('');\n    };\n    var _atob = global.atob ? function(a) {\n        return global.atob(a);\n    } : function(a){\n        return a.replace(/\\S{1,4}/g, cb_decode);\n    };\n    var atob = function(a) {\n        return _atob(String(a).replace(/[^A-Za-z0-9\\+\\/]/g, ''));\n    };\n    var _decode = buffer ?\n        buffer.from && Uint8Array && buffer.from !== Uint8Array.from\n        ? function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : buffer.from(a, 'base64')).toString();\n        }\n        : function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : new buffer(a, 'base64')).toString();\n        }\n        : function(a) { return btou(_atob(a)) };\n    var decode = function(a){\n        return _decode(\n            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })\n                .replace(/[^A-Za-z0-9\\+\\/]/g, '')\n        );\n    };\n    var noConflict = function() {\n        var Base64 = global.Base64;\n        global.Base64 = _Base64;\n        return Base64;\n    };\n    // export Base64\n    global.Base64 = {\n        VERSION: version,\n        atob: atob,\n        btoa: btoa,\n        fromBase64: decode,\n        toBase64: encode,\n        utob: utob,\n        encode: encode,\n        encodeURI: encodeURI,\n        btou: btou,\n        decode: decode,\n        noConflict: noConflict,\n        __buffer__: buffer\n    };\n    // if ES5 is available, make Base64.extendString() available\n    if (typeof Object.defineProperty === 'function') {\n        var noEnum = function(v){\n            return {value:v,enumerable:false,writable:true,configurable:true};\n        };\n        global.Base64.extendString = function () {\n            Object.defineProperty(\n                String.prototype, 'fromBase64', noEnum(function () {\n                    return decode(this)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64', noEnum(function (urisafe) {\n                    return encode(this, urisafe)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64URI', noEnum(function () {\n                    return encode(this, true)\n                }));\n        };\n    }\n    //\n    // export Base64 to the namespace\n    //\n    if (global['Meteor']) { // Meteor.js\n        Base64 = global.Base64;\n    }\n    // module.exports and AMD are mutually exclusive.\n    // module.exports has precedence.\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports.Base64 = global.Base64;\n    }\n    else if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){ return global.Base64 }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n    // that's it!\n    return {Base64: global.Base64}\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/MzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/*!**************************!*\
  !*** ./src/translate.js ***!
  \**************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var __ = wp.i18n.__;\n\n\nvar __tr__ = function __tr__(str) {\n  return __(str, 'mcw-custom-js-css-gutenberg');\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (__tr__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy90cmFuc2xhdGUuanM/MWRmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX18gPSB3cC5pMThuLl9fO1xuXG5cbnZhciBfX3RyX18gPSBmdW5jdGlvbiBfX3RyX18oc3RyKSB7XG4gIHJldHVybiBfXyhzdHIsICdtY3ctY3VzdG9tLWpzLWNzcy1ndXRlbmJlcmcnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IF9fdHJfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy90cmFuc2xhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!*********************!*\
  !*** ./src/icon.js ***!
  \*********************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("\n// Block icon\nvar Icon = wp.element.createElement(\n  'svg',\n  { xmlns: 'http://www.w3.org/2000/svg', width: '128', height: '128', viewBox: '0 0 1024 1024' },\n  wp.element.createElement('path', { fill: '#ce280f', d: 'M831,333m3-183c30.713-.42,69.932-4.692,83,13,9.687,13.114,7,40.313,7,63V372c0,23.085,2.929,51.634-7,65-13.132,17.679-52.239,13.409-83,13V574c30.713-.42,69.932-4.692,83,13,9.687,13.114,7,40.313,7,63V796c0,23.085,2.929,51.634-7,65-13.132,17.679-52.239,13.409-83,13,0.313,36.721,8.838,104.988-13,121-16.042,11.76-100.252,5-129,5H343c-30.16,0-123.35,7.26-140-5-21.847-16.087-13.281-84.22-13-121-30.713.42-69.932,4.692-83-13-9.687-13.114-7-40.313-7-63V652c0-23.085-2.929-51.634,7-65,13.132-17.679,52.239-13.409,83-13V450c-30.713.42-69.932,4.692-83-13-9.687-13.114-7-40.313-7-63V228c0-23.085-2.929-51.634,7-65,13.132-17.679,52.239-13.409,83-13-0.313-36.721-8.838-104.988,13-121,16.042-11.762,100.252-5,129-5H681c30.16,0,123.35-7.261,140,5C842.847,45.087,834.281,113.22,834,150ZM260,94v56H764V94H260Zm92,109c-28.669,10.954-49.312,10.432-66,32-29.313,37.885-26.5,113.644,10,142,35.026,27.209,104.11,26.155,130-9-2.753-6.328-15.6-24.582-26-22l-18,12c-22.176,8.812-49.071-1.09-59-14-24.369-31.684-13.509-93.4,23-103,27.622-7.263,40.29,14.158,59,12l19-24C410.316,210.925,383.814,202.865,352,203Zm170,0c-14.6,5.8-26.961,5.7-38,14-21.6,16.234-28.452,64.968-4,84,16.143,12.564,56.742,13.16,66,32,5.092,8.339-.125,18.659-4,24-33.41,13.12-39.27-7.98-65-11-8.591,5.825-17.052,15.97-20,27,37.546,28.224,105.2,39.338,127-13,3.081-7.4,8.045-19.016,6-31-9.9-57.984-70.643-36.824-84-67-2.59-8.92,2.033-14.83,6-20,28.721-8.549,41.015,11.015,61,7l14-25C574.39,209.047,549.507,202.862,522,203Zm170,0c-14.6,5.8-26.961,5.7-38,14-21.6,16.234-28.452,64.968-4,84,16.143,12.564,56.742,13.16,66,32,5.092,8.339-.125,18.659-4,24-33.41,13.12-39.27-7.98-65-11-8.591,5.825-17.052,15.97-20,27,37.546,28.224,105.2,39.338,127-13,3.081-7.4,8.045-19.016,6-31-9.9-57.984-70.643-36.824-84-67-2.59-8.92,2.033-14.83,6-20,28.721-8.549,41.015,11.015,61,7l14-25C744.39,209.047,719.507,202.862,692,203ZM260,450V574H764V450H260ZM582,627c-14.6,5.8-26.961,5.7-38,14-21.6,16.234-28.452,64.968-4,84,16.143,12.564,56.742,13.16,66,32,5.092,8.339-.125,18.659-4,24-33.41,13.12-39.27-7.98-65-11-8.591,5.825-17.052,15.97-20,27,37.546,28.224,105.2,39.338,127-13,3.081-7.4,8.045-19.016,6-31-9.9-57.984-70.643-36.824-84-67-2.59-8.92,2.033-14.83,6-20,28.721-8.549,41.015,11.015,61,7l14-25C634.39,633.047,609.507,626.862,582,627Zm-156,2c0.432,29.027,4.855,133.374-5,148-8.134,12.072-23.916,6.036-38,8l-5,4c-0.782,8.3-4.63,25.683,0,29,8.58,4.135,28.041,4.16,39,2,57.392-11.311,53-59.964,53-128q-0.5-31.5-1-63H426ZM260,874v56H764V874H260Z' })\n);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Icon);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pY29uLmpzP2MxNDQiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBCbG9jayBpY29uXG52YXIgSWNvbiA9IHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgJ3N2ZycsXG4gIHsgeG1sbnM6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIHdpZHRoOiAnMTI4JywgaGVpZ2h0OiAnMTI4Jywgdmlld0JveDogJzAgMCAxMDI0IDEwMjQnIH0sXG4gIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZmlsbDogJyNjZTI4MGYnLCBkOiAnTTgzMSwzMzNtMy0xODNjMzAuNzEzLS40Miw2OS45MzItNC42OTIsODMsMTMsOS42ODcsMTMuMTE0LDcsNDAuMzEzLDcsNjNWMzcyYzAsMjMuMDg1LDIuOTI5LDUxLjYzNC03LDY1LTEzLjEzMiwxNy42NzktNTIuMjM5LDEzLjQwOS04MywxM1Y1NzRjMzAuNzEzLS40Miw2OS45MzItNC42OTIsODMsMTMsOS42ODcsMTMuMTE0LDcsNDAuMzEzLDcsNjNWNzk2YzAsMjMuMDg1LDIuOTI5LDUxLjYzNC03LDY1LTEzLjEzMiwxNy42NzktNTIuMjM5LDEzLjQwOS04MywxMywwLjMxMywzNi43MjEsOC44MzgsMTA0Ljk4OC0xMywxMjEtMTYuMDQyLDExLjc2LTEwMC4yNTIsNS0xMjksNUgzNDNjLTMwLjE2LDAtMTIzLjM1LDcuMjYtMTQwLTUtMjEuODQ3LTE2LjA4Ny0xMy4yODEtODQuMjItMTMtMTIxLTMwLjcxMy40Mi02OS45MzIsNC42OTItODMtMTMtOS42ODctMTMuMTE0LTctNDAuMzEzLTctNjNWNjUyYzAtMjMuMDg1LTIuOTI5LTUxLjYzNCw3LTY1LDEzLjEzMi0xNy42NzksNTIuMjM5LTEzLjQwOSw4My0xM1Y0NTBjLTMwLjcxMy40Mi02OS45MzIsNC42OTItODMtMTMtOS42ODctMTMuMTE0LTctNDAuMzEzLTctNjNWMjI4YzAtMjMuMDg1LTIuOTI5LTUxLjYzNCw3LTY1LDEzLjEzMi0xNy42NzksNTIuMjM5LTEzLjQwOSw4My0xMy0wLjMxMy0zNi43MjEtOC44MzgtMTA0Ljk4OCwxMy0xMjEsMTYuMDQyLTExLjc2MiwxMDAuMjUyLTUsMTI5LTVINjgxYzMwLjE2LDAsMTIzLjM1LTcuMjYxLDE0MCw1Qzg0Mi44NDcsNDUuMDg3LDgzNC4yODEsMTEzLjIyLDgzNCwxNTBaTTI2MCw5NHY1Nkg3NjRWOTRIMjYwWm05MiwxMDljLTI4LjY2OSwxMC45NTQtNDkuMzEyLDEwLjQzMi02NiwzMi0yOS4zMTMsMzcuODg1LTI2LjUsMTEzLjY0NCwxMCwxNDIsMzUuMDI2LDI3LjIwOSwxMDQuMTEsMjYuMTU1LDEzMC05LTIuNzUzLTYuMzI4LTE1LjYtMjQuNTgyLTI2LTIybC0xOCwxMmMtMjIuMTc2LDguODEyLTQ5LjA3MS0xLjA5LTU5LTE0LTI0LjM2OS0zMS42ODQtMTMuNTA5LTkzLjQsMjMtMTAzLDI3LjYyMi03LjI2Myw0MC4yOSwxNC4xNTgsNTksMTJsMTktMjRDNDEwLjMxNiwyMTAuOTI1LDM4My44MTQsMjAyLjg2NSwzNTIsMjAzWm0xNzAsMGMtMTQuNiw1LjgtMjYuOTYxLDUuNy0zOCwxNC0yMS42LDE2LjIzNC0yOC40NTIsNjQuOTY4LTQsODQsMTYuMTQzLDEyLjU2NCw1Ni43NDIsMTMuMTYsNjYsMzIsNS4wOTIsOC4zMzktLjEyNSwxOC42NTktNCwyNC0zMy40MSwxMy4xMi0zOS4yNy03Ljk4LTY1LTExLTguNTkxLDUuODI1LTE3LjA1MiwxNS45Ny0yMCwyNywzNy41NDYsMjguMjI0LDEwNS4yLDM5LjMzOCwxMjctMTMsMy4wODEtNy40LDguMDQ1LTE5LjAxNiw2LTMxLTkuOS01Ny45ODQtNzAuNjQzLTM2LjgyNC04NC02Ny0yLjU5LTguOTIsMi4wMzMtMTQuODMsNi0yMCwyOC43MjEtOC41NDksNDEuMDE1LDExLjAxNSw2MSw3bDE0LTI1QzU3NC4zOSwyMDkuMDQ3LDU0OS41MDcsMjAyLjg2Miw1MjIsMjAzWm0xNzAsMGMtMTQuNiw1LjgtMjYuOTYxLDUuNy0zOCwxNC0yMS42LDE2LjIzNC0yOC40NTIsNjQuOTY4LTQsODQsMTYuMTQzLDEyLjU2NCw1Ni43NDIsMTMuMTYsNjYsMzIsNS4wOTIsOC4zMzktLjEyNSwxOC42NTktNCwyNC0zMy40MSwxMy4xMi0zOS4yNy03Ljk4LTY1LTExLTguNTkxLDUuODI1LTE3LjA1MiwxNS45Ny0yMCwyNywzNy41NDYsMjguMjI0LDEwNS4yLDM5LjMzOCwxMjctMTMsMy4wODEtNy40LDguMDQ1LTE5LjAxNiw2LTMxLTkuOS01Ny45ODQtNzAuNjQzLTM2LjgyNC04NC02Ny0yLjU5LTguOTIsMi4wMzMtMTQuODMsNi0yMCwyOC43MjEtOC41NDksNDEuMDE1LDExLjAxNSw2MSw3bDE0LTI1Qzc0NC4zOSwyMDkuMDQ3LDcxOS41MDcsMjAyLjg2Miw2OTIsMjAzWk0yNjAsNDUwVjU3NEg3NjRWNDUwSDI2MFpNNTgyLDYyN2MtMTQuNiw1LjgtMjYuOTYxLDUuNy0zOCwxNC0yMS42LDE2LjIzNC0yOC40NTIsNjQuOTY4LTQsODQsMTYuMTQzLDEyLjU2NCw1Ni43NDIsMTMuMTYsNjYsMzIsNS4wOTIsOC4zMzktLjEyNSwxOC42NTktNCwyNC0zMy40MSwxMy4xMi0zOS4yNy03Ljk4LTY1LTExLTguNTkxLDUuODI1LTE3LjA1MiwxNS45Ny0yMCwyNywzNy41NDYsMjguMjI0LDEwNS4yLDM5LjMzOCwxMjctMTMsMy4wODEtNy40LDguMDQ1LTE5LjAxNiw2LTMxLTkuOS01Ny45ODQtNzAuNjQzLTM2LjgyNC04NC02Ny0yLjU5LTguOTIsMi4wMzMtMTQuODMsNi0yMCwyOC43MjEtOC41NDksNDEuMDE1LDExLjAxNSw2MSw3bDE0LTI1QzYzNC4zOSw2MzMuMDQ3LDYwOS41MDcsNjI2Ljg2Miw1ODIsNjI3Wm0tMTU2LDJjMC40MzIsMjkuMDI3LDQuODU1LDEzMy4zNzQtNSwxNDgtOC4xMzQsMTIuMDcyLTIzLjkxNiw2LjAzNi0zOCw4bC01LDRjLTAuNzgyLDguMy00LjYzLDI1LjY4MywwLDI5LDguNTgsNC4xMzUsMjguMDQxLDQuMTYsMzksMiw1Ny4zOTItMTEuMzExLDUzLTU5Ljk2NCw1My0xMjhxLTAuNS0zMS41LTEtNjNINDI2Wk0yNjAsODc0djU2SDc2NFY4NzRIMjYwWicgfSlcbik7XG5cbmV4cG9ydCBkZWZhdWx0IEljb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaWNvbi5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/*!*********************************!*\
  !*** ./src/block/attributes.js ***!
  \*********************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__translate__ = __webpack_require__(/*! ../translate */ 2);\n/**\r\n * BLOCK: custom-js-css-gutenberg\r\n */\n\n// Import translate\n\n\nvar attributes = {\n\t// Header Javascript\n\tjsHeaderEnable: {\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Enable Head Javascript')\n\t},\n\n\tjsHeader: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Javascript Code'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter is the javascript code between head tags.')\n\t},\n\tjsHeaderParams: {\n\t\ttype: 'array',\n\t\tdefault: [{\n\t\t\tminEnabled: false,\n\t\t\tmin: '',\n\t\t\ttype: 'js'\n\t\t}]\n\t},\n\n\tjsHeaderUrl: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Javascript URL'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter adds the specified JS URL between head tags.')\n\t},\n\n\tjsHeaderUrlDep: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Javascript URL Dependencies'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter is the dependencies (comma seperated) for the JS URL.')\n\t},\n\n\t// Footer javascript\n\tjsFooterEnable: {\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Enable Footer Javascript')\n\t},\n\n\tjsFooter: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Javascript'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter is the javascript code at the footer before closing body tag.')\n\t},\n\tjsFooterParams: {\n\t\ttype: 'array',\n\t\tdefault: [{\n\t\t\tminEnabled: false,\n\t\t\tmin: '',\n\t\t\ttype: 'js'\n\t\t}]\n\t},\n\n\tjsFooterUrl: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Javascript URL'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter adds the specified JS URL at the footer before closing body tag.')\n\t},\n\n\tjsFooterUrlDep: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Javascript URL Dependencies'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter is the dependencies (comma seperated) for the JS URL.')\n\t},\n\n\t// Header CSS\n\tcssHeaderEnable: {\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Enable Head CSS')\n\t},\n\n\tcssHeader: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('CSS'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter is the CSS code between head tags.')\n\t},\n\tcssHeaderParams: {\n\t\ttype: 'array',\n\t\tdefault: [{\n\t\t\tminEnabled: false,\n\t\t\tmin: '',\n\t\t\ttype: 'css'\n\t\t}]\n\t},\n\n\tcssHeaderUrl: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('CSS URL'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter adds the specified CSS URL between head tags.')\n\t},\n\n\tcssHeaderUrlDep: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('CSS URL Dependencies'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter is the dependencies (comma seperated) for the CSS URL.')\n\t},\n\n\t// Footer CSS\n\tcssFooterEnable: {\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Enable Footer CSS')\n\t},\n\n\tcssFooter: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('CSS'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter is the CSS code at the footer before closing body tag.')\n\t},\n\tcssFooterParams: {\n\t\ttype: 'array',\n\t\tdefault: [{\n\t\t\tminEnabled: false,\n\t\t\tmin: '',\n\t\t\ttype: 'css'\n\t\t}]\n\t},\n\n\tcssFooterUrl: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('CSS URL'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter adds the specified CSS URL at the footer before closing body tag.')\n\t},\n\n\tcssFooterUrlDep: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('CSS URL Dependencies'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter is the dependencies (comma seperated) for the CSS URL.')\n\t},\n\n\t// Inline JS\n\tjsInline: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Javascript (Inline)'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter adds the specified javascript code to the place of this block.')\n\t},\n\tjsInlineParams: {\n\t\ttype: 'array',\n\t\tdefault: [{\n\t\t\tminEnabled: false,\n\t\t\tmin: '',\n\t\t\ttype: 'js'\n\t\t}]\n\t},\n\n\t// Inline CSS\n\tcssInline: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('{{type}} (Inline)'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter adds the specified CSS code to the place of this block.')\n\t},\n\tcssInlineParams: {\n\t\ttype: 'array',\n\t\tdefault: [{\n\t\t\tminEnabled: false,\n\t\t\tmin: '',\n\t\t\ttype: 'css'\n\t\t}]\n\t},\n\n\t// Meta\n\tmetaEnable: {\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Enable Meta Tag'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter enables adding the specified code between meta tags at the head.')\n\t},\n\n\tmeta: {\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tlabel: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('Meta Tag Content'),\n\t\tdescription: Object(__WEBPACK_IMPORTED_MODULE_0__translate__[\"a\" /* default */])('This parameter adds the specified code between meta tags at the head.')\n\t}\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (attributes);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/*!******************************************!*\
  !*** ./node_modules/classnames/index.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (true) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn classNames;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzPzFkNmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNyBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ 14)\nvar ieee754 = __webpack_require__(/*! ieee754 */ 15)\nvar isArray = __webpack_require__(/*! isarray */ 16)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/*!***********************!*\
  !*** ./src/blocks.js ***!
  \***********************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__block_block_js__ = __webpack_require__(/*! ./block/block.js */ 8);\n/**\n * Gutenberg Blocks\n *\n * All blocks related JavaScript files should be imported here.\n * You can create a new block folder in this dir and include code\n * for that block here as well.\n *\n * All blocks should be included here since this is the file that\n * Webpack is compiling as the input file.\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9ibG9ja3MuanM/N2I1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEd1dGVuYmVyZyBCbG9ja3NcbiAqXG4gKiBBbGwgYmxvY2tzIHJlbGF0ZWQgSmF2YVNjcmlwdCBmaWxlcyBzaG91bGQgYmUgaW1wb3J0ZWQgaGVyZS5cbiAqIFlvdSBjYW4gY3JlYXRlIGEgbmV3IGJsb2NrIGZvbGRlciBpbiB0aGlzIGRpciBhbmQgaW5jbHVkZSBjb2RlXG4gKiBmb3IgdGhhdCBibG9jayBoZXJlIGFzIHdlbGwuXG4gKlxuICogQWxsIGJsb2NrcyBzaG91bGQgYmUgaW5jbHVkZWQgaGVyZSBzaW5jZSB0aGlzIGlzIHRoZSBmaWxlIHRoYXRcbiAqIFdlYnBhY2sgaXMgY29tcGlsaW5nIGFzIHRoZSBpbnB1dCBmaWxlLlxuICovXG5cbmltcG9ydCAnLi9ibG9jay9ibG9jay5qcyc7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvYmxvY2tzLmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/*!****************************!*\
  !*** ./src/block/block.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__style_scss__ = __webpack_require__(/*! ./style.scss */ 9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__style_scss__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__editor_scss__ = __webpack_require__(/*! ./editor.scss */ 10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__editor_scss__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__translate__ = __webpack_require__(/*! ../translate */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__icon__ = __webpack_require__(/*! ../icon */ 3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__attributes__ = __webpack_require__(/*! ./attributes */ 4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__edit__ = __webpack_require__(/*! ./edit */ 11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__save__ = __webpack_require__(/*! ./save */ 22);\n/**\n * BLOCK: custom-js-css-gutenberg\n *\n * Custom JS and CSS for Gutenberg\n */\n\n//  Import CSS.\n\n\n\n// Import translate\n\n// Import Icon\n\n// Import attributes\n\n// Import Edit\n\n// Import Save\n\n\n// Internal block libraries\nvar registerBlockType = wp.blocks.registerBlockType;\n\n\nregisterBlockType('meceware/custom-js-css-gutenberg', {\n\t// Title\n\ttitle: Object(__WEBPACK_IMPORTED_MODULE_2__translate__[\"a\" /* default */])('Custom JS/CSS'),\n\t// Description\n\tdescription: Object(__WEBPACK_IMPORTED_MODULE_2__translate__[\"a\" /* default */])('Add custom JS and CSS code to the page.'),\n\t// Icon\n\ticon: __WEBPACK_IMPORTED_MODULE_3__icon__[\"a\" /* default */],\n\t// Category\n\tcategory: 'formatting',\n\t// Keywords\n\tkeywords: [Object(__WEBPACK_IMPORTED_MODULE_2__translate__[\"a\" /* default */])('Custom JS/CSS'), Object(__WEBPACK_IMPORTED_MODULE_2__translate__[\"a\" /* default */])('js css'), Object(__WEBPACK_IMPORTED_MODULE_2__translate__[\"a\" /* default */])('meceware')],\n\t// Supports\n\tsupports: {\n\t\talign: false,\n\t\talignWide: false,\n\t\tanchor: false,\n\t\tcustomClassName: false,\n\t\tclassName: false,\n\t\thtml: true,\n\t\tinserter: true,\n\t\tmultiple: true,\n\t\treusable: false\n\t},\n\n\t// Attributes\n\tattributes: __WEBPACK_IMPORTED_MODULE_4__attributes__[\"a\" /* default */],\n\n\t// Edit render\n\tedit: __WEBPACK_IMPORTED_MODULE_5__edit__[\"a\" /* default */],\n\n\t// Save render\n\tsave: __WEBPACK_IMPORTED_MODULE_6__save__[\"a\" /* default */]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9ibG9jay9ibG9jay5qcz85MjFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQkxPQ0s6IGN1c3RvbS1qcy1jc3MtZ3V0ZW5iZXJnXG4gKlxuICogQ3VzdG9tIEpTIGFuZCBDU1MgZm9yIEd1dGVuYmVyZ1xuICovXG5cbi8vICBJbXBvcnQgQ1NTLlxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuaW1wb3J0ICcuL2VkaXRvci5zY3NzJztcblxuLy8gSW1wb3J0IHRyYW5zbGF0ZVxuaW1wb3J0IF9fdHJfXyBmcm9tICcuLi90cmFuc2xhdGUnO1xuLy8gSW1wb3J0IEljb25cbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb24nO1xuLy8gSW1wb3J0IGF0dHJpYnV0ZXNcbmltcG9ydCBhdHRyaWJ1dGVzIGZyb20gJy4vYXR0cmlidXRlcyc7XG4vLyBJbXBvcnQgRWRpdFxuaW1wb3J0IGVkaXQgZnJvbSAnLi9lZGl0Jztcbi8vIEltcG9ydCBTYXZlXG5pbXBvcnQgc2F2ZSBmcm9tICcuL3NhdmUnO1xuXG4vLyBJbnRlcm5hbCBibG9jayBsaWJyYXJpZXNcbnZhciByZWdpc3RlckJsb2NrVHlwZSA9IHdwLmJsb2Nrcy5yZWdpc3RlckJsb2NrVHlwZTtcblxuXG5yZWdpc3RlckJsb2NrVHlwZSgnbWVjZXdhcmUvY3VzdG9tLWpzLWNzcy1ndXRlbmJlcmcnLCB7XG5cdC8vIFRpdGxlXG5cdHRpdGxlOiBfX3RyX18oJ0N1c3RvbSBKUy9DU1MnKSxcblx0Ly8gRGVzY3JpcHRpb25cblx0ZGVzY3JpcHRpb246IF9fdHJfXygnQWRkIGN1c3RvbSBKUyBhbmQgQ1NTIGNvZGUgdG8gdGhlIHBhZ2UuJyksXG5cdC8vIEljb25cblx0aWNvbjogSWNvbixcblx0Ly8gQ2F0ZWdvcnlcblx0Y2F0ZWdvcnk6ICdmb3JtYXR0aW5nJyxcblx0Ly8gS2V5d29yZHNcblx0a2V5d29yZHM6IFtfX3RyX18oJ0N1c3RvbSBKUy9DU1MnKSwgX190cl9fKCdqcyBjc3MnKSwgX190cl9fKCdtZWNld2FyZScpXSxcblx0Ly8gU3VwcG9ydHNcblx0c3VwcG9ydHM6IHtcblx0XHRhbGlnbjogZmFsc2UsXG5cdFx0YWxpZ25XaWRlOiBmYWxzZSxcblx0XHRhbmNob3I6IGZhbHNlLFxuXHRcdGN1c3RvbUNsYXNzTmFtZTogZmFsc2UsXG5cdFx0Y2xhc3NOYW1lOiBmYWxzZSxcblx0XHRodG1sOiB0cnVlLFxuXHRcdGluc2VydGVyOiB0cnVlLFxuXHRcdG11bHRpcGxlOiB0cnVlLFxuXHRcdHJldXNhYmxlOiBmYWxzZVxuXHR9LFxuXG5cdC8vIEF0dHJpYnV0ZXNcblx0YXR0cmlidXRlczogYXR0cmlidXRlcyxcblxuXHQvLyBFZGl0IHJlbmRlclxuXHRlZGl0OiBlZGl0LFxuXG5cdC8vIFNhdmUgcmVuZGVyXG5cdHNhdmU6IHNhdmVcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2Jsb2NrL2Jsb2NrLmpzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/*!******************************!*\
  !*** ./src/block/style.scss ***!
  \******************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9ibG9jay9zdHlsZS5zY3NzPzgwZjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9ibG9jay9zdHlsZS5zY3NzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/*!*******************************!*\
  !*** ./src/block/editor.scss ***!
  \*******************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svZWRpdG9yLnNjc3M/NDlkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2Jsb2NrL2VkaXRvci5zY3NzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/*!***************************!*\
  !*** ./src/block/edit.js ***!
  \***************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_base64__ = __webpack_require__(/*! js-base64 */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_base64___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_js_base64__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_raw_textarea_raw_css_textarea__ = __webpack_require__(/*! ../components/raw-textarea/raw-css-textarea */ 12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_raw_textarea_raw_js_textarea__ = __webpack_require__(/*! ../components/raw-textarea/raw-js-textarea */ 17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_raw_textarea_raw_text__ = __webpack_require__(/*! ../components/raw-textarea/raw-text */ 19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__ = __webpack_require__(/*! ../components/block-with-description/block-with-description */ 20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_modal_modal__ = __webpack_require__(/*! ../components/modal/modal */ 21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__translate__ = __webpack_require__(/*! ../translate */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__icon__ = __webpack_require__(/*! ../icon */ 3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__attributes__ = __webpack_require__(/*! ./attributes */ 4);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Import Base64\n\n// Import CSS Raw Textarea Control\n\n// Import JS Raw Textarea Control\n\n// Import Raw Text Control\n\n// Block with description\n\n// Import modal\n\n// Import translate\n\n// Import Icon\n\n// Import attributes\n\n\nvar _wp$element = wp.element,\n    Fragment = _wp$element.Fragment,\n    Component = _wp$element.Component;\nvar InspectorControls = wp.editor.InspectorControls;\nvar _wp$components = wp.components,\n    PanelBody = _wp$components.PanelBody,\n    TextControl = _wp$components.TextControl,\n    ToggleControl = _wp$components.ToggleControl;\n\nvar CustomJsAndCssEdit = function (_Component) {\n  _inherits(CustomJsAndCssEdit, _Component);\n\n  function CustomJsAndCssEdit() {\n    _classCallCheck(this, CustomJsAndCssEdit);\n\n    return _possibleConstructorReturn(this, (CustomJsAndCssEdit.__proto__ || Object.getPrototypeOf(CustomJsAndCssEdit)).apply(this, arguments));\n  }\n\n  _createClass(CustomJsAndCssEdit, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          _props$attributes = _props.attributes,\n          jsHeaderEnable = _props$attributes.jsHeaderEnable,\n          jsHeader = _props$attributes.jsHeader,\n          jsHeaderParams = _props$attributes.jsHeaderParams,\n          jsHeaderUrl = _props$attributes.jsHeaderUrl,\n          jsHeaderUrlDep = _props$attributes.jsHeaderUrlDep,\n          jsFooterEnable = _props$attributes.jsFooterEnable,\n          jsFooter = _props$attributes.jsFooter,\n          jsFooterParams = _props$attributes.jsFooterParams,\n          jsFooterUrl = _props$attributes.jsFooterUrl,\n          jsFooterUrlDep = _props$attributes.jsFooterUrlDep,\n          cssHeaderEnable = _props$attributes.cssHeaderEnable,\n          cssHeader = _props$attributes.cssHeader,\n          cssHeaderParams = _props$attributes.cssHeaderParams,\n          cssHeaderUrl = _props$attributes.cssHeaderUrl,\n          cssHeaderUrlDep = _props$attributes.cssHeaderUrlDep,\n          cssFooterEnable = _props$attributes.cssFooterEnable,\n          cssFooter = _props$attributes.cssFooter,\n          cssFooterParams = _props$attributes.cssFooterParams,\n          cssFooterUrl = _props$attributes.cssFooterUrl,\n          cssFooterUrlDep = _props$attributes.cssFooterUrlDep,\n          jsInline = _props$attributes.jsInline,\n          jsInlineParams = _props$attributes.jsInlineParams,\n          cssInline = _props$attributes.cssInline,\n          cssInlineParams = _props$attributes.cssInlineParams,\n          metaEnable = _props$attributes.metaEnable,\n          meta = _props$attributes.meta,\n          setAttributes = _props.setAttributes;\n\n\n      var src = '\\n  function deneme () {\\n    var foo = \\'bar\\'\\n    var baz = \\'qux\\'\\n    this.foo = foo + baz\\n  }\\n  console.log(\\'deneme\\');\\n';\n\n      // const { code, error } = uglify.minify(src);\n      // console.log(code);\n      // console.log(this.props.attributes);\n      // Babel.transform(d, { presets: ['es2015'] }).code\n\n      var jsControls = wp.element.createElement(\n        PanelBody,\n        { title: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Javascript'), initialOpen: false },\n        wp.element.createElement(\n          __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n          { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsInline.description },\n          wp.element.createElement(__WEBPACK_IMPORTED_MODULE_2__components_raw_textarea_raw_js_textarea__[\"a\" /* default */], {\n            label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsInline.label,\n            js: jsInline,\n            params: jsInlineParams[0],\n            onJSChange: function onJSChange(value) {\n              return setAttributes({ jsInline: value });\n            },\n            onParamsChange: function onParamsChange(value) {\n              return setAttributes({ jsInlineParams: [{ minEnabled: value.minEnabled, min: value.min, type: value.type }] });\n            },\n            minifyLabel: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Min')\n          })\n        ),\n        wp.element.createElement(ToggleControl, {\n          label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsHeaderEnable.label,\n          checked: jsHeaderEnable,\n          onChange: function onChange(value) {\n            return setAttributes({ jsHeaderEnable: value });\n          }\n        }),\n        jsHeaderEnable && wp.element.createElement(\n          __WEBPACK_IMPORTED_MODULE_5__components_modal_modal__[\"a\" /* default */],\n          {\n            buttonText: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Javascript Options (Head)'),\n            modalTitle: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Javascript Options (Head)'),\n            modalButtonText: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Save/Close')\n          },\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsHeader.description },\n            wp.element.createElement(__WEBPACK_IMPORTED_MODULE_2__components_raw_textarea_raw_js_textarea__[\"a\" /* default */], {\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsHeader.label,\n              js: jsHeader,\n              params: jsHeaderParams[0],\n              onJSChange: function onJSChange(value) {\n                return setAttributes({ jsHeader: value });\n              },\n              onParamsChange: function onParamsChange(value) {\n                return setAttributes({ jsHeaderParams: [{ minEnabled: value.minEnabled, min: value.min, type: value.type }] });\n              },\n              minifyLabel: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Min')\n            })\n          ),\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsHeaderUrl.description },\n            wp.element.createElement(TextControl, {\n              type: 'string',\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsHeaderUrl.label,\n              placeholder: 'https://',\n              value: jsHeaderUrl,\n              onChange: function onChange(value) {\n                return setAttributes({ jsHeaderUrl: value });\n              }\n            })\n          ),\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsHeaderUrlDep.description },\n            wp.element.createElement(TextControl, {\n              type: 'string',\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsHeaderUrlDep.label,\n              placeholder: 'jquery',\n              value: jsHeaderUrlDep,\n              onChange: function onChange(value) {\n                return setAttributes({ jsHeaderUrlDep: value });\n              }\n            })\n          )\n        ),\n        wp.element.createElement(ToggleControl, {\n          label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsFooterEnable.label,\n          checked: jsFooterEnable,\n          onChange: function onChange(value) {\n            return setAttributes({ jsFooterEnable: value });\n          }\n        }),\n        jsFooterEnable && wp.element.createElement(\n          __WEBPACK_IMPORTED_MODULE_5__components_modal_modal__[\"a\" /* default */],\n          {\n            buttonText: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Javascript Options (Footer)'),\n            modalTitle: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Javascript Options (Footer)'),\n            modalButtonText: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Save/Close')\n          },\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsFooter.description },\n            wp.element.createElement(__WEBPACK_IMPORTED_MODULE_2__components_raw_textarea_raw_js_textarea__[\"a\" /* default */], {\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsFooter.label,\n              js: jsFooter,\n              params: jsFooterParams[0],\n              onJSChange: function onJSChange(value) {\n                return setAttributes({ jsFooter: value });\n              },\n              onParamsChange: function onParamsChange(value) {\n                return setAttributes({ jsFooterParams: [{ minEnabled: value.minEnabled, min: value.min, type: value.type }] });\n              },\n              minifyLabel: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Min')\n            })\n          ),\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsFooterUrl.description },\n            wp.element.createElement(TextControl, {\n              type: 'string',\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsFooterUrl.label,\n              placeholder: 'https://',\n              value: jsFooterUrl,\n              onChange: function onChange(value) {\n                return setAttributes({ jsFooterUrl: value });\n              }\n            })\n          ),\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsFooterUrlDep.description },\n            wp.element.createElement(TextControl, {\n              type: 'string',\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].jsFooterUrlDep.label,\n              placeholder: 'jquery',\n              value: jsFooterUrlDep,\n              onChange: function onChange(value) {\n                return setAttributes({ jsFooterUrlDep: value });\n              }\n            })\n          )\n        )\n      );\n\n      var cssControls = wp.element.createElement(\n        PanelBody,\n        { title: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('CSS'), initialOpen: false },\n        wp.element.createElement(\n          __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n          { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssInline.description },\n          wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__components_raw_textarea_raw_css_textarea__[\"a\" /* default */], {\n            label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssInline.label,\n            css: cssInline,\n            params: cssInlineParams[0],\n            onCSSChange: function onCSSChange(value) {\n              return setAttributes({ cssInline: value });\n            },\n            onParamsChange: function onParamsChange(value) {\n              return setAttributes({ cssInlineParams: [{ minEnabled: value.minEnabled, min: value.min, type: value.type }] });\n            },\n            minifyLabel: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Min')\n          })\n        ),\n        wp.element.createElement(ToggleControl, {\n          label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssHeaderEnable.label,\n          checked: cssHeaderEnable,\n          onChange: function onChange(value) {\n            return setAttributes({ cssHeaderEnable: value });\n          }\n        }),\n        cssHeaderEnable && wp.element.createElement(\n          __WEBPACK_IMPORTED_MODULE_5__components_modal_modal__[\"a\" /* default */],\n          {\n            buttonText: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('CSS Options (Head)'),\n            modalTitle: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('CSS Options (Head)'),\n            modalButtonText: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Save/Close')\n          },\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssHeader.description },\n            wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__components_raw_textarea_raw_css_textarea__[\"a\" /* default */], {\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssHeader.label,\n              css: cssHeader,\n              params: cssHeaderParams[0],\n              onCSSChange: function onCSSChange(value) {\n                return setAttributes({ cssHeader: value });\n              },\n              onParamsChange: function onParamsChange(value) {\n                return setAttributes({ cssHeaderParams: [{ minEnabled: value.minEnabled, min: value.min, type: value.type }] });\n              },\n              minifyLabel: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Min')\n            })\n          ),\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssHeaderUrl.description },\n            wp.element.createElement(TextControl, {\n              type: 'string',\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssHeaderUrl.label,\n              placeholder: 'https://',\n              value: cssHeaderUrl,\n              onChange: function onChange(value) {\n                return setAttributes({ cssHeaderUrl: value });\n              }\n            })\n          ),\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssHeaderUrlDep.description },\n            wp.element.createElement(TextControl, {\n              type: 'string',\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssHeaderUrlDep.label,\n              placeholder: 'theme-css',\n              value: cssHeaderUrlDep,\n              onChange: function onChange(value) {\n                return setAttributes({ cssHeaderUrlDep: value });\n              }\n            })\n          )\n        ),\n        wp.element.createElement(ToggleControl, {\n          label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssFooterEnable.label,\n          checked: cssFooterEnable,\n          onChange: function onChange(value) {\n            return setAttributes({ cssFooterEnable: value });\n          }\n        }),\n        cssFooterEnable && wp.element.createElement(\n          __WEBPACK_IMPORTED_MODULE_5__components_modal_modal__[\"a\" /* default */],\n          {\n            buttonText: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('CSS Options (Footer)'),\n            modalTitle: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('CSS Options (Footer)'),\n            modalButtonText: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Save/Close')\n          },\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssFooter.description },\n            wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__components_raw_textarea_raw_css_textarea__[\"a\" /* default */], {\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssFooter.label,\n              css: cssFooter,\n              params: cssFooterParams[0],\n              onCSSChange: function onCSSChange(value) {\n                return setAttributes({ cssFooter: value });\n              },\n              onParamsChange: function onParamsChange(value) {\n                return setAttributes({ cssFooterParams: [{ minEnabled: value.minEnabled, min: value.min, type: value.type }] });\n              },\n              minifyLabel: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Min')\n            })\n          ),\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssFooterUrl.description },\n            wp.element.createElement(TextControl, {\n              type: 'string',\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssFooterUrl.label,\n              placeholder: 'https://',\n              value: cssFooterUrl,\n              onChange: function onChange(value) {\n                return setAttributes({ cssFooterUrl: value });\n              }\n            })\n          ),\n          wp.element.createElement(\n            __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n            { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssFooterUrlDep.description },\n            wp.element.createElement(TextControl, {\n              type: 'string',\n              label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].cssFooterUrlDep.label,\n              placeholder: 'theme-css',\n              value: cssFooterUrlDep,\n              onChange: function onChange(value) {\n                return setAttributes({ cssFooterUrlDep: value });\n              }\n            })\n          )\n        )\n      );\n\n      var metaControls = wp.element.createElement(\n        PanelBody,\n        { title: Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Meta'), initialOpen: false },\n        wp.element.createElement(ToggleControl, {\n          label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].metaEnable.label,\n          checked: metaEnable,\n          onChange: function onChange(value) {\n            return setAttributes({ metaEnable: value });\n          }\n        }),\n        metaEnable && wp.element.createElement(\n          __WEBPACK_IMPORTED_MODULE_4__components_block_with_description_block_with_description__[\"a\" /* default */],\n          { description: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].meta.description },\n          wp.element.createElement(__WEBPACK_IMPORTED_MODULE_3__components_raw_textarea_raw_text__[\"a\" /* default */], {\n            label: __WEBPACK_IMPORTED_MODULE_8__attributes__[\"a\" /* default */].meta.label,\n            beginning: '<meta',\n            ending: '/>',\n            value: __WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].decode(meta),\n            onChange: function onChange(value) {\n              return setAttributes({ meta: __WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].encode(value) });\n            }\n          })\n        )\n      );\n\n      return wp.element.createElement(\n        Fragment,\n        null,\n        wp.element.createElement(\n          InspectorControls,\n          null,\n          jsControls,\n          cssControls,\n          metaControls\n        ),\n        wp.element.createElement(\n          'div',\n          { className: 'mcw-js-css-wrapper' },\n          wp.element.createElement(\n            'div',\n            { className: 'mcw-js-css-selector-icon' },\n            __WEBPACK_IMPORTED_MODULE_7__icon__[\"a\" /* default */]\n          ),\n          wp.element.createElement(\n            'div',\n            { className: 'mcw-js-css-selector' },\n            Object(__WEBPACK_IMPORTED_MODULE_6__translate__[\"a\" /* default */])('Custom JS/CSS')\n          )\n        )\n      );\n    }\n  }]);\n\n  return CustomJsAndCssEdit;\n}(Component);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (CustomJsAndCssEdit);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svZWRpdC5qcz8zZmUxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLy8gSW1wb3J0IEJhc2U2NFxuaW1wb3J0IHsgQmFzZTY0IH0gZnJvbSAnanMtYmFzZTY0Jztcbi8vIEltcG9ydCBDU1MgUmF3IFRleHRhcmVhIENvbnRyb2xcbmltcG9ydCBSYXdDU1NUZXh0YXJlYUNvbnRyb2wgZnJvbSAnLi4vY29tcG9uZW50cy9yYXctdGV4dGFyZWEvcmF3LWNzcy10ZXh0YXJlYSc7XG4vLyBJbXBvcnQgSlMgUmF3IFRleHRhcmVhIENvbnRyb2xcbmltcG9ydCBSYXdKU1RleHRhcmVhQ29udHJvbCBmcm9tICcuLi9jb21wb25lbnRzL3Jhdy10ZXh0YXJlYS9yYXctanMtdGV4dGFyZWEnO1xuLy8gSW1wb3J0IFJhdyBUZXh0IENvbnRyb2xcbmltcG9ydCBSYXdUZXh0Q29udHJvbCBmcm9tICcuLi9jb21wb25lbnRzL3Jhdy10ZXh0YXJlYS9yYXctdGV4dCc7XG4vLyBCbG9jayB3aXRoIGRlc2NyaXB0aW9uXG5pbXBvcnQgQmxvY2tXaXRoRGVzY3JpcHRpb24gZnJvbSAnLi4vY29tcG9uZW50cy9ibG9jay13aXRoLWRlc2NyaXB0aW9uL2Jsb2NrLXdpdGgtZGVzY3JpcHRpb24nO1xuLy8gSW1wb3J0IG1vZGFsXG5pbXBvcnQgTW9kYWxTZXR0aW5ncyBmcm9tICcuLi9jb21wb25lbnRzL21vZGFsL21vZGFsJztcbi8vIEltcG9ydCB0cmFuc2xhdGVcbmltcG9ydCBfX3RyX18gZnJvbSAnLi4vdHJhbnNsYXRlJztcbi8vIEltcG9ydCBJY29uXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29uJztcbi8vIEltcG9ydCBhdHRyaWJ1dGVzXG5pbXBvcnQgQmxvY2tBdHRyaWJ1dGVzIGZyb20gJy4vYXR0cmlidXRlcyc7XG5cbnZhciBfd3AkZWxlbWVudCA9IHdwLmVsZW1lbnQsXG4gICAgRnJhZ21lbnQgPSBfd3AkZWxlbWVudC5GcmFnbWVudCxcbiAgICBDb21wb25lbnQgPSBfd3AkZWxlbWVudC5Db21wb25lbnQ7XG52YXIgSW5zcGVjdG9yQ29udHJvbHMgPSB3cC5lZGl0b3IuSW5zcGVjdG9yQ29udHJvbHM7XG52YXIgX3dwJGNvbXBvbmVudHMgPSB3cC5jb21wb25lbnRzLFxuICAgIFBhbmVsQm9keSA9IF93cCRjb21wb25lbnRzLlBhbmVsQm9keSxcbiAgICBUZXh0Q29udHJvbCA9IF93cCRjb21wb25lbnRzLlRleHRDb250cm9sLFxuICAgIFRvZ2dsZUNvbnRyb2wgPSBfd3AkY29tcG9uZW50cy5Ub2dnbGVDb250cm9sO1xuXG52YXIgQ3VzdG9tSnNBbmRDc3NFZGl0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEN1c3RvbUpzQW5kQ3NzRWRpdCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ3VzdG9tSnNBbmRDc3NFZGl0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDdXN0b21Kc0FuZENzc0VkaXQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDdXN0b21Kc0FuZENzc0VkaXQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDdXN0b21Kc0FuZENzc0VkaXQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDdXN0b21Kc0FuZENzc0VkaXQsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgX3Byb3BzJGF0dHJpYnV0ZXMgPSBfcHJvcHMuYXR0cmlidXRlcyxcbiAgICAgICAgICBqc0hlYWRlckVuYWJsZSA9IF9wcm9wcyRhdHRyaWJ1dGVzLmpzSGVhZGVyRW5hYmxlLFxuICAgICAgICAgIGpzSGVhZGVyID0gX3Byb3BzJGF0dHJpYnV0ZXMuanNIZWFkZXIsXG4gICAgICAgICAganNIZWFkZXJQYXJhbXMgPSBfcHJvcHMkYXR0cmlidXRlcy5qc0hlYWRlclBhcmFtcyxcbiAgICAgICAgICBqc0hlYWRlclVybCA9IF9wcm9wcyRhdHRyaWJ1dGVzLmpzSGVhZGVyVXJsLFxuICAgICAgICAgIGpzSGVhZGVyVXJsRGVwID0gX3Byb3BzJGF0dHJpYnV0ZXMuanNIZWFkZXJVcmxEZXAsXG4gICAgICAgICAganNGb290ZXJFbmFibGUgPSBfcHJvcHMkYXR0cmlidXRlcy5qc0Zvb3RlckVuYWJsZSxcbiAgICAgICAgICBqc0Zvb3RlciA9IF9wcm9wcyRhdHRyaWJ1dGVzLmpzRm9vdGVyLFxuICAgICAgICAgIGpzRm9vdGVyUGFyYW1zID0gX3Byb3BzJGF0dHJpYnV0ZXMuanNGb290ZXJQYXJhbXMsXG4gICAgICAgICAganNGb290ZXJVcmwgPSBfcHJvcHMkYXR0cmlidXRlcy5qc0Zvb3RlclVybCxcbiAgICAgICAgICBqc0Zvb3RlclVybERlcCA9IF9wcm9wcyRhdHRyaWJ1dGVzLmpzRm9vdGVyVXJsRGVwLFxuICAgICAgICAgIGNzc0hlYWRlckVuYWJsZSA9IF9wcm9wcyRhdHRyaWJ1dGVzLmNzc0hlYWRlckVuYWJsZSxcbiAgICAgICAgICBjc3NIZWFkZXIgPSBfcHJvcHMkYXR0cmlidXRlcy5jc3NIZWFkZXIsXG4gICAgICAgICAgY3NzSGVhZGVyUGFyYW1zID0gX3Byb3BzJGF0dHJpYnV0ZXMuY3NzSGVhZGVyUGFyYW1zLFxuICAgICAgICAgIGNzc0hlYWRlclVybCA9IF9wcm9wcyRhdHRyaWJ1dGVzLmNzc0hlYWRlclVybCxcbiAgICAgICAgICBjc3NIZWFkZXJVcmxEZXAgPSBfcHJvcHMkYXR0cmlidXRlcy5jc3NIZWFkZXJVcmxEZXAsXG4gICAgICAgICAgY3NzRm9vdGVyRW5hYmxlID0gX3Byb3BzJGF0dHJpYnV0ZXMuY3NzRm9vdGVyRW5hYmxlLFxuICAgICAgICAgIGNzc0Zvb3RlciA9IF9wcm9wcyRhdHRyaWJ1dGVzLmNzc0Zvb3RlcixcbiAgICAgICAgICBjc3NGb290ZXJQYXJhbXMgPSBfcHJvcHMkYXR0cmlidXRlcy5jc3NGb290ZXJQYXJhbXMsXG4gICAgICAgICAgY3NzRm9vdGVyVXJsID0gX3Byb3BzJGF0dHJpYnV0ZXMuY3NzRm9vdGVyVXJsLFxuICAgICAgICAgIGNzc0Zvb3RlclVybERlcCA9IF9wcm9wcyRhdHRyaWJ1dGVzLmNzc0Zvb3RlclVybERlcCxcbiAgICAgICAgICBqc0lubGluZSA9IF9wcm9wcyRhdHRyaWJ1dGVzLmpzSW5saW5lLFxuICAgICAgICAgIGpzSW5saW5lUGFyYW1zID0gX3Byb3BzJGF0dHJpYnV0ZXMuanNJbmxpbmVQYXJhbXMsXG4gICAgICAgICAgY3NzSW5saW5lID0gX3Byb3BzJGF0dHJpYnV0ZXMuY3NzSW5saW5lLFxuICAgICAgICAgIGNzc0lubGluZVBhcmFtcyA9IF9wcm9wcyRhdHRyaWJ1dGVzLmNzc0lubGluZVBhcmFtcyxcbiAgICAgICAgICBtZXRhRW5hYmxlID0gX3Byb3BzJGF0dHJpYnV0ZXMubWV0YUVuYWJsZSxcbiAgICAgICAgICBtZXRhID0gX3Byb3BzJGF0dHJpYnV0ZXMubWV0YSxcbiAgICAgICAgICBzZXRBdHRyaWJ1dGVzID0gX3Byb3BzLnNldEF0dHJpYnV0ZXM7XG5cblxuICAgICAgdmFyIHNyYyA9ICdcXG4gIGZ1bmN0aW9uIGRlbmVtZSAoKSB7XFxuICAgIHZhciBmb28gPSBcXCdiYXJcXCdcXG4gICAgdmFyIGJheiA9IFxcJ3F1eFxcJ1xcbiAgICB0aGlzLmZvbyA9IGZvbyArIGJhelxcbiAgfVxcbiAgY29uc29sZS5sb2coXFwnZGVuZW1lXFwnKTtcXG4nO1xuXG4gICAgICAvLyBjb25zdCB7IGNvZGUsIGVycm9yIH0gPSB1Z2xpZnkubWluaWZ5KHNyYyk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhjb2RlKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMucHJvcHMuYXR0cmlidXRlcyk7XG4gICAgICAvLyBCYWJlbC50cmFuc2Zvcm0oZCwgeyBwcmVzZXRzOiBbJ2VzMjAxNSddIH0pLmNvZGVcblxuICAgICAgdmFyIGpzQ29udHJvbHMgPSB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFBhbmVsQm9keSxcbiAgICAgICAgeyB0aXRsZTogX190cl9fKCdKYXZhc2NyaXB0JyksIGluaXRpYWxPcGVuOiBmYWxzZSB9LFxuICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgQmxvY2tXaXRoRGVzY3JpcHRpb24sXG4gICAgICAgICAgeyBkZXNjcmlwdGlvbjogQmxvY2tBdHRyaWJ1dGVzLmpzSW5saW5lLmRlc2NyaXB0aW9uIH0sXG4gICAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFJhd0pTVGV4dGFyZWFDb250cm9sLCB7XG4gICAgICAgICAgICBsYWJlbDogQmxvY2tBdHRyaWJ1dGVzLmpzSW5saW5lLmxhYmVsLFxuICAgICAgICAgICAganM6IGpzSW5saW5lLFxuICAgICAgICAgICAgcGFyYW1zOiBqc0lubGluZVBhcmFtc1swXSxcbiAgICAgICAgICAgIG9uSlNDaGFuZ2U6IGZ1bmN0aW9uIG9uSlNDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBqc0lubGluZTogdmFsdWUgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25QYXJhbXNDaGFuZ2U6IGZ1bmN0aW9uIG9uUGFyYW1zQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZXRBdHRyaWJ1dGVzKHsganNJbmxpbmVQYXJhbXM6IFt7IG1pbkVuYWJsZWQ6IHZhbHVlLm1pbkVuYWJsZWQsIG1pbjogdmFsdWUubWluLCB0eXBlOiB2YWx1ZS50eXBlIH1dIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1pbmlmeUxhYmVsOiBfX3RyX18oJ01pbicpXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFRvZ2dsZUNvbnRyb2wsIHtcbiAgICAgICAgICBsYWJlbDogQmxvY2tBdHRyaWJ1dGVzLmpzSGVhZGVyRW5hYmxlLmxhYmVsLFxuICAgICAgICAgIGNoZWNrZWQ6IGpzSGVhZGVyRW5hYmxlLFxuICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBqc0hlYWRlckVuYWJsZTogdmFsdWUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAganNIZWFkZXJFbmFibGUgJiYgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIE1vZGFsU2V0dGluZ3MsXG4gICAgICAgICAge1xuICAgICAgICAgICAgYnV0dG9uVGV4dDogX190cl9fKCdKYXZhc2NyaXB0IE9wdGlvbnMgKEhlYWQpJyksXG4gICAgICAgICAgICBtb2RhbFRpdGxlOiBfX3RyX18oJ0phdmFzY3JpcHQgT3B0aW9ucyAoSGVhZCknKSxcbiAgICAgICAgICAgIG1vZGFsQnV0dG9uVGV4dDogX190cl9fKCdTYXZlL0Nsb3NlJylcbiAgICAgICAgICB9LFxuICAgICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIEJsb2NrV2l0aERlc2NyaXB0aW9uLFxuICAgICAgICAgICAgeyBkZXNjcmlwdGlvbjogQmxvY2tBdHRyaWJ1dGVzLmpzSGVhZGVyLmRlc2NyaXB0aW9uIH0sXG4gICAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoUmF3SlNUZXh0YXJlYUNvbnRyb2wsIHtcbiAgICAgICAgICAgICAgbGFiZWw6IEJsb2NrQXR0cmlidXRlcy5qc0hlYWRlci5sYWJlbCxcbiAgICAgICAgICAgICAganM6IGpzSGVhZGVyLFxuICAgICAgICAgICAgICBwYXJhbXM6IGpzSGVhZGVyUGFyYW1zWzBdLFxuICAgICAgICAgICAgICBvbkpTQ2hhbmdlOiBmdW5jdGlvbiBvbkpTQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBqc0hlYWRlcjogdmFsdWUgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uUGFyYW1zQ2hhbmdlOiBmdW5jdGlvbiBvblBhcmFtc0NoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRBdHRyaWJ1dGVzKHsganNIZWFkZXJQYXJhbXM6IFt7IG1pbkVuYWJsZWQ6IHZhbHVlLm1pbkVuYWJsZWQsIG1pbjogdmFsdWUubWluLCB0eXBlOiB2YWx1ZS50eXBlIH1dIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtaW5pZnlMYWJlbDogX190cl9fKCdNaW4nKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIEJsb2NrV2l0aERlc2NyaXB0aW9uLFxuICAgICAgICAgICAgeyBkZXNjcmlwdGlvbjogQmxvY2tBdHRyaWJ1dGVzLmpzSGVhZGVyVXJsLmRlc2NyaXB0aW9uIH0sXG4gICAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoVGV4dENvbnRyb2wsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgIGxhYmVsOiBCbG9ja0F0dHJpYnV0ZXMuanNIZWFkZXJVcmwubGFiZWwsXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnaHR0cHM6Ly8nLFxuICAgICAgICAgICAgICB2YWx1ZToganNIZWFkZXJVcmwsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRBdHRyaWJ1dGVzKHsganNIZWFkZXJVcmw6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgQmxvY2tXaXRoRGVzY3JpcHRpb24sXG4gICAgICAgICAgICB7IGRlc2NyaXB0aW9uOiBCbG9ja0F0dHJpYnV0ZXMuanNIZWFkZXJVcmxEZXAuZGVzY3JpcHRpb24gfSxcbiAgICAgICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChUZXh0Q29udHJvbCwge1xuICAgICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgbGFiZWw6IEJsb2NrQXR0cmlidXRlcy5qc0hlYWRlclVybERlcC5sYWJlbCxcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdqcXVlcnknLFxuICAgICAgICAgICAgICB2YWx1ZToganNIZWFkZXJVcmxEZXAsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRBdHRyaWJ1dGVzKHsganNIZWFkZXJVcmxEZXA6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFRvZ2dsZUNvbnRyb2wsIHtcbiAgICAgICAgICBsYWJlbDogQmxvY2tBdHRyaWJ1dGVzLmpzRm9vdGVyRW5hYmxlLmxhYmVsLFxuICAgICAgICAgIGNoZWNrZWQ6IGpzRm9vdGVyRW5hYmxlLFxuICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBqc0Zvb3RlckVuYWJsZTogdmFsdWUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAganNGb290ZXJFbmFibGUgJiYgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIE1vZGFsU2V0dGluZ3MsXG4gICAgICAgICAge1xuICAgICAgICAgICAgYnV0dG9uVGV4dDogX190cl9fKCdKYXZhc2NyaXB0IE9wdGlvbnMgKEZvb3RlciknKSxcbiAgICAgICAgICAgIG1vZGFsVGl0bGU6IF9fdHJfXygnSmF2YXNjcmlwdCBPcHRpb25zIChGb290ZXIpJyksXG4gICAgICAgICAgICBtb2RhbEJ1dHRvblRleHQ6IF9fdHJfXygnU2F2ZS9DbG9zZScpXG4gICAgICAgICAgfSxcbiAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBCbG9ja1dpdGhEZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHsgZGVzY3JpcHRpb246IEJsb2NrQXR0cmlidXRlcy5qc0Zvb3Rlci5kZXNjcmlwdGlvbiB9LFxuICAgICAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFJhd0pTVGV4dGFyZWFDb250cm9sLCB7XG4gICAgICAgICAgICAgIGxhYmVsOiBCbG9ja0F0dHJpYnV0ZXMuanNGb290ZXIubGFiZWwsXG4gICAgICAgICAgICAgIGpzOiBqc0Zvb3RlcixcbiAgICAgICAgICAgICAgcGFyYW1zOiBqc0Zvb3RlclBhcmFtc1swXSxcbiAgICAgICAgICAgICAgb25KU0NoYW5nZTogZnVuY3Rpb24gb25KU0NoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRBdHRyaWJ1dGVzKHsganNGb290ZXI6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvblBhcmFtc0NoYW5nZTogZnVuY3Rpb24gb25QYXJhbXNDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0QXR0cmlidXRlcyh7IGpzRm9vdGVyUGFyYW1zOiBbeyBtaW5FbmFibGVkOiB2YWx1ZS5taW5FbmFibGVkLCBtaW46IHZhbHVlLm1pbiwgdHlwZTogdmFsdWUudHlwZSB9XSB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWluaWZ5TGFiZWw6IF9fdHJfXygnTWluJylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBCbG9ja1dpdGhEZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHsgZGVzY3JpcHRpb246IEJsb2NrQXR0cmlidXRlcy5qc0Zvb3RlclVybC5kZXNjcmlwdGlvbiB9LFxuICAgICAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFRleHRDb250cm9sLCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICBsYWJlbDogQmxvY2tBdHRyaWJ1dGVzLmpzRm9vdGVyVXJsLmxhYmVsLFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2h0dHBzOi8vJyxcbiAgICAgICAgICAgICAgdmFsdWU6IGpzRm9vdGVyVXJsLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0QXR0cmlidXRlcyh7IGpzRm9vdGVyVXJsOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIEJsb2NrV2l0aERlc2NyaXB0aW9uLFxuICAgICAgICAgICAgeyBkZXNjcmlwdGlvbjogQmxvY2tBdHRyaWJ1dGVzLmpzRm9vdGVyVXJsRGVwLmRlc2NyaXB0aW9uIH0sXG4gICAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoVGV4dENvbnRyb2wsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgIGxhYmVsOiBCbG9ja0F0dHJpYnV0ZXMuanNGb290ZXJVcmxEZXAubGFiZWwsXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnanF1ZXJ5JyxcbiAgICAgICAgICAgICAgdmFsdWU6IGpzRm9vdGVyVXJsRGVwLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0QXR0cmlidXRlcyh7IGpzRm9vdGVyVXJsRGVwOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG5cbiAgICAgIHZhciBjc3NDb250cm9scyA9IHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgUGFuZWxCb2R5LFxuICAgICAgICB7IHRpdGxlOiBfX3RyX18oJ0NTUycpLCBpbml0aWFsT3BlbjogZmFsc2UgfSxcbiAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEJsb2NrV2l0aERlc2NyaXB0aW9uLFxuICAgICAgICAgIHsgZGVzY3JpcHRpb246IEJsb2NrQXR0cmlidXRlcy5jc3NJbmxpbmUuZGVzY3JpcHRpb24gfSxcbiAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoUmF3Q1NTVGV4dGFyZWFDb250cm9sLCB7XG4gICAgICAgICAgICBsYWJlbDogQmxvY2tBdHRyaWJ1dGVzLmNzc0lubGluZS5sYWJlbCxcbiAgICAgICAgICAgIGNzczogY3NzSW5saW5lLFxuICAgICAgICAgICAgcGFyYW1zOiBjc3NJbmxpbmVQYXJhbXNbMF0sXG4gICAgICAgICAgICBvbkNTU0NoYW5nZTogZnVuY3Rpb24gb25DU1NDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBjc3NJbmxpbmU6IHZhbHVlIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUGFyYW1zQ2hhbmdlOiBmdW5jdGlvbiBvblBhcmFtc0NoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2V0QXR0cmlidXRlcyh7IGNzc0lubGluZVBhcmFtczogW3sgbWluRW5hYmxlZDogdmFsdWUubWluRW5hYmxlZCwgbWluOiB2YWx1ZS5taW4sIHR5cGU6IHZhbHVlLnR5cGUgfV0gfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWluaWZ5TGFiZWw6IF9fdHJfXygnTWluJylcbiAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoVG9nZ2xlQ29udHJvbCwge1xuICAgICAgICAgIGxhYmVsOiBCbG9ja0F0dHJpYnV0ZXMuY3NzSGVhZGVyRW5hYmxlLmxhYmVsLFxuICAgICAgICAgIGNoZWNrZWQ6IGNzc0hlYWRlckVuYWJsZSxcbiAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRBdHRyaWJ1dGVzKHsgY3NzSGVhZGVyRW5hYmxlOiB2YWx1ZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBjc3NIZWFkZXJFbmFibGUgJiYgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIE1vZGFsU2V0dGluZ3MsXG4gICAgICAgICAge1xuICAgICAgICAgICAgYnV0dG9uVGV4dDogX190cl9fKCdDU1MgT3B0aW9ucyAoSGVhZCknKSxcbiAgICAgICAgICAgIG1vZGFsVGl0bGU6IF9fdHJfXygnQ1NTIE9wdGlvbnMgKEhlYWQpJyksXG4gICAgICAgICAgICBtb2RhbEJ1dHRvblRleHQ6IF9fdHJfXygnU2F2ZS9DbG9zZScpXG4gICAgICAgICAgfSxcbiAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBCbG9ja1dpdGhEZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHsgZGVzY3JpcHRpb246IEJsb2NrQXR0cmlidXRlcy5jc3NIZWFkZXIuZGVzY3JpcHRpb24gfSxcbiAgICAgICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChSYXdDU1NUZXh0YXJlYUNvbnRyb2wsIHtcbiAgICAgICAgICAgICAgbGFiZWw6IEJsb2NrQXR0cmlidXRlcy5jc3NIZWFkZXIubGFiZWwsXG4gICAgICAgICAgICAgIGNzczogY3NzSGVhZGVyLFxuICAgICAgICAgICAgICBwYXJhbXM6IGNzc0hlYWRlclBhcmFtc1swXSxcbiAgICAgICAgICAgICAgb25DU1NDaGFuZ2U6IGZ1bmN0aW9uIG9uQ1NTQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBjc3NIZWFkZXI6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvblBhcmFtc0NoYW5nZTogZnVuY3Rpb24gb25QYXJhbXNDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0QXR0cmlidXRlcyh7IGNzc0hlYWRlclBhcmFtczogW3sgbWluRW5hYmxlZDogdmFsdWUubWluRW5hYmxlZCwgbWluOiB2YWx1ZS5taW4sIHR5cGU6IHZhbHVlLnR5cGUgfV0gfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1pbmlmeUxhYmVsOiBfX3RyX18oJ01pbicpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgQmxvY2tXaXRoRGVzY3JpcHRpb24sXG4gICAgICAgICAgICB7IGRlc2NyaXB0aW9uOiBCbG9ja0F0dHJpYnV0ZXMuY3NzSGVhZGVyVXJsLmRlc2NyaXB0aW9uIH0sXG4gICAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoVGV4dENvbnRyb2wsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgIGxhYmVsOiBCbG9ja0F0dHJpYnV0ZXMuY3NzSGVhZGVyVXJsLmxhYmVsLFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2h0dHBzOi8vJyxcbiAgICAgICAgICAgICAgdmFsdWU6IGNzc0hlYWRlclVybCxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBjc3NIZWFkZXJVcmw6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgQmxvY2tXaXRoRGVzY3JpcHRpb24sXG4gICAgICAgICAgICB7IGRlc2NyaXB0aW9uOiBCbG9ja0F0dHJpYnV0ZXMuY3NzSGVhZGVyVXJsRGVwLmRlc2NyaXB0aW9uIH0sXG4gICAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoVGV4dENvbnRyb2wsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgIGxhYmVsOiBCbG9ja0F0dHJpYnV0ZXMuY3NzSGVhZGVyVXJsRGVwLmxhYmVsLFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3RoZW1lLWNzcycsXG4gICAgICAgICAgICAgIHZhbHVlOiBjc3NIZWFkZXJVcmxEZXAsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRBdHRyaWJ1dGVzKHsgY3NzSGVhZGVyVXJsRGVwOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChUb2dnbGVDb250cm9sLCB7XG4gICAgICAgICAgbGFiZWw6IEJsb2NrQXR0cmlidXRlcy5jc3NGb290ZXJFbmFibGUubGFiZWwsXG4gICAgICAgICAgY2hlY2tlZDogY3NzRm9vdGVyRW5hYmxlLFxuICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBjc3NGb290ZXJFbmFibGU6IHZhbHVlIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIGNzc0Zvb3RlckVuYWJsZSAmJiB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgTW9kYWxTZXR0aW5ncyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBidXR0b25UZXh0OiBfX3RyX18oJ0NTUyBPcHRpb25zIChGb290ZXIpJyksXG4gICAgICAgICAgICBtb2RhbFRpdGxlOiBfX3RyX18oJ0NTUyBPcHRpb25zIChGb290ZXIpJyksXG4gICAgICAgICAgICBtb2RhbEJ1dHRvblRleHQ6IF9fdHJfXygnU2F2ZS9DbG9zZScpXG4gICAgICAgICAgfSxcbiAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBCbG9ja1dpdGhEZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHsgZGVzY3JpcHRpb246IEJsb2NrQXR0cmlidXRlcy5jc3NGb290ZXIuZGVzY3JpcHRpb24gfSxcbiAgICAgICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChSYXdDU1NUZXh0YXJlYUNvbnRyb2wsIHtcbiAgICAgICAgICAgICAgbGFiZWw6IEJsb2NrQXR0cmlidXRlcy5jc3NGb290ZXIubGFiZWwsXG4gICAgICAgICAgICAgIGNzczogY3NzRm9vdGVyLFxuICAgICAgICAgICAgICBwYXJhbXM6IGNzc0Zvb3RlclBhcmFtc1swXSxcbiAgICAgICAgICAgICAgb25DU1NDaGFuZ2U6IGZ1bmN0aW9uIG9uQ1NTQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBjc3NGb290ZXI6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvblBhcmFtc0NoYW5nZTogZnVuY3Rpb24gb25QYXJhbXNDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0QXR0cmlidXRlcyh7IGNzc0Zvb3RlclBhcmFtczogW3sgbWluRW5hYmxlZDogdmFsdWUubWluRW5hYmxlZCwgbWluOiB2YWx1ZS5taW4sIHR5cGU6IHZhbHVlLnR5cGUgfV0gfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1pbmlmeUxhYmVsOiBfX3RyX18oJ01pbicpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgQmxvY2tXaXRoRGVzY3JpcHRpb24sXG4gICAgICAgICAgICB7IGRlc2NyaXB0aW9uOiBCbG9ja0F0dHJpYnV0ZXMuY3NzRm9vdGVyVXJsLmRlc2NyaXB0aW9uIH0sXG4gICAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoVGV4dENvbnRyb2wsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgIGxhYmVsOiBCbG9ja0F0dHJpYnV0ZXMuY3NzRm9vdGVyVXJsLmxhYmVsLFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2h0dHBzOi8vJyxcbiAgICAgICAgICAgICAgdmFsdWU6IGNzc0Zvb3RlclVybCxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBjc3NGb290ZXJVcmw6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgQmxvY2tXaXRoRGVzY3JpcHRpb24sXG4gICAgICAgICAgICB7IGRlc2NyaXB0aW9uOiBCbG9ja0F0dHJpYnV0ZXMuY3NzRm9vdGVyVXJsRGVwLmRlc2NyaXB0aW9uIH0sXG4gICAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoVGV4dENvbnRyb2wsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgIGxhYmVsOiBCbG9ja0F0dHJpYnV0ZXMuY3NzRm9vdGVyVXJsRGVwLmxhYmVsLFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3RoZW1lLWNzcycsXG4gICAgICAgICAgICAgIHZhbHVlOiBjc3NGb290ZXJVcmxEZXAsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRBdHRyaWJ1dGVzKHsgY3NzRm9vdGVyVXJsRGVwOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG5cbiAgICAgIHZhciBtZXRhQ29udHJvbHMgPSB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFBhbmVsQm9keSxcbiAgICAgICAgeyB0aXRsZTogX190cl9fKCdNZXRhJyksIGluaXRpYWxPcGVuOiBmYWxzZSB9LFxuICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoVG9nZ2xlQ29udHJvbCwge1xuICAgICAgICAgIGxhYmVsOiBCbG9ja0F0dHJpYnV0ZXMubWV0YUVuYWJsZS5sYWJlbCxcbiAgICAgICAgICBjaGVja2VkOiBtZXRhRW5hYmxlLFxuICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBtZXRhRW5hYmxlOiB2YWx1ZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBtZXRhRW5hYmxlICYmIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBCbG9ja1dpdGhEZXNjcmlwdGlvbixcbiAgICAgICAgICB7IGRlc2NyaXB0aW9uOiBCbG9ja0F0dHJpYnV0ZXMubWV0YS5kZXNjcmlwdGlvbiB9LFxuICAgICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChSYXdUZXh0Q29udHJvbCwge1xuICAgICAgICAgICAgbGFiZWw6IEJsb2NrQXR0cmlidXRlcy5tZXRhLmxhYmVsLFxuICAgICAgICAgICAgYmVnaW5uaW5nOiAnPG1ldGEnLFxuICAgICAgICAgICAgZW5kaW5nOiAnLz4nLFxuICAgICAgICAgICAgdmFsdWU6IEJhc2U2NC5kZWNvZGUobWV0YSksXG4gICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNldEF0dHJpYnV0ZXMoeyBtZXRhOiBCYXNlNjQuZW5jb2RlKHZhbHVlKSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBGcmFnbWVudCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEluc3BlY3RvckNvbnRyb2xzLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAganNDb250cm9scyxcbiAgICAgICAgICBjc3NDb250cm9scyxcbiAgICAgICAgICBtZXRhQ29udHJvbHNcbiAgICAgICAgKSxcbiAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnbWN3LWpzLWNzcy13cmFwcGVyJyB9LFxuICAgICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdtY3ctanMtY3NzLXNlbGVjdG9yLWljb24nIH0sXG4gICAgICAgICAgICBJY29uXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnbWN3LWpzLWNzcy1zZWxlY3RvcicgfSxcbiAgICAgICAgICAgIF9fdHJfXygnQ3VzdG9tIEpTL0NTUycpXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDdXN0b21Kc0FuZENzc0VkaXQ7XG59KENvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IEN1c3RvbUpzQW5kQ3NzRWRpdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9ibG9jay9lZGl0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/*!*********************************************************!*\
  !*** ./src/components/raw-textarea/raw-css-textarea.js ***!
  \*********************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_base64__ = __webpack_require__(/*! js-base64 */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_base64___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_js_base64__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(/*! classnames */ 5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_less__ = __webpack_require__(/*! less */ 13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_less___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_less__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Import Base64\n\n// Import classnames\n\n// LESS\n\n\nvar _wp$element = wp.element,\n    Component = _wp$element.Component,\n    Fragment = _wp$element.Fragment;\nvar _wp$components = wp.components,\n    TextareaControl = _wp$components.TextareaControl,\n    ButtonGroup = _wp$components.ButtonGroup,\n    Button = _wp$components.Button;\n\nvar RawCSSTextareaControl = function (_Component) {\n  _inherits(RawCSSTextareaControl, _Component);\n\n  function RawCSSTextareaControl() {\n    _classCallCheck(this, RawCSSTextareaControl);\n\n    var _this = _possibleConstructorReturn(this, (RawCSSTextareaControl.__proto__ || Object.getPrototypeOf(RawCSSTextareaControl)).apply(this, arguments));\n\n    _this.state = {\n      err: false\n    };\n    return _this;\n  }\n\n  _createClass(RawCSSTextareaControl, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var cssStyleTypes = {\n        css: 'CSS',\n        sass: 'SASS',\n        less: 'LESS'\n      };\n\n      var setError = function setError(err) {\n        return _this2.setState({ err: err });\n      };\n\n      var minify = function minify(css) {\n        if (!css) return css;\n\n        var minified = new CleanCSS({}).minify(css);\n        if (minified.styles) {\n          return minified.styles;\n        }\n        // console.error( 'minify error', minified );\n        setError(true);\n        return css;\n      };\n\n      var onParamUpdate = function onParamUpdate(css) {\n        _this2.props.params.min = __WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].encode(_this2.props.params.minEnabled ? minify(css) : css);\n\n        _this2.props.onParamsChange(_this2.props.params);\n      };\n\n      var onParamChange = function onParamChange(css) {\n        if (!css) {\n          onParamUpdate(css);\n          return;\n        }\n\n        if (_this2.props.params.type === 'sass') {\n          // SASS\n          Sass.compile(css, function (result) {\n            if (result.status) {\n              // console.error( 'sass error: ', result.formatted );\n              setError(true);\n            } else {\n              setError(false);\n            }\n\n            onParamUpdate(!result.status ? result.text : css);\n          });\n        } else if (_this2.props.params.type === 'less') {\n          __WEBPACK_IMPORTED_MODULE_2_less___default.a.render(css).then(function (output) {\n            setError(false);\n            onParamUpdate(output.css);\n          }, function (error) {\n            // console.error( 'less error: ', error );\n            setError(true);\n            onParamUpdate(css);\n          });\n        } else {\n          setError(false);\n          onParamUpdate(css);\n        }\n      };\n\n      var onCSSChange = function onCSSChange(css) {\n        _this2.props.onCSSChange(__WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].encode(css));\n\n        onParamChange(css);\n      };\n\n      var onMinifyToggle = function onMinifyToggle() {\n        _this2.props.params.minEnabled = !_this2.props.params.minEnabled;\n        onParamChange(__WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].decode(_this2.props.css));\n      };\n\n      var onStyleChange = function onStyleChange(type) {\n        _this2.props.params.type = type;\n        onParamChange(__WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].decode(_this2.props.css));\n      };\n\n      var styleType = Object.keys(cssStyleTypes).indexOf(this.props.params.type) > -1 ? this.props.params.type : 'css';\n\n      return wp.element.createElement(\n        Fragment,\n        null,\n        wp.element.createElement(\n          'div',\n          { className: 'components-base-control mcw-textarea-comp' },\n          wp.element.createElement(\n            'label',\n            null,\n            this.props.label.replace('{{type}}', cssStyleTypes[styleType])\n          ),\n          wp.element.createElement(\n            ButtonGroup,\n            { className: 'mcw-textarea-button-group' },\n            wp.element.createElement(\n              Button,\n              {\n                className: 'mcw-textarea-btn mcw-textarea-btn-margright',\n                isSmall: true,\n                isPrimary: this.props.params.minEnabled,\n                'aria-pressed': this.props.params.minEnabled,\n                onClick: function onClick() {\n                  return onMinifyToggle();\n                }\n              },\n              this.props.minifyLabel\n            ),\n            Object.keys(cssStyleTypes).map(function (key) {\n              return wp.element.createElement(\n                Button,\n                {\n                  key: key,\n                  className: 'mcw-textarea-btn',\n                  isSmall: true,\n                  isPrimary: styleType === key,\n                  'aria-pressed': styleType === key,\n                  onClick: function onClick() {\n                    return onStyleChange(key);\n                  }\n                },\n                cssStyleTypes[key]\n              );\n            })\n          ),\n          wp.element.createElement(\n            'div',\n            { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('mcw-textarea-comp-inner', { 'mcw-textarea-comp-error': this.state.err }) },\n            wp.element.createElement(\n              'p',\n              { className: 'mcw-textarea-def' },\n              '<style type=\"text/css\">'\n            ),\n            wp.element.createElement(TextareaControl, {\n              rows: 12,\n              value: __WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].decode(this.props.css),\n              onChange: function onChange(value) {\n                return onCSSChange(value);\n              }\n            }),\n            wp.element.createElement(\n              'p',\n              { className: 'mcw-textarea-def' },\n              '</style>'\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return RawCSSTextareaControl;\n}(Component);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RawCSSTextareaControl);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/*!****************************************!*\
  !*** ./node_modules/less/dist/less.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, Buffer) {var require;var require;/*!\n * Less - Leaner CSS v3.9.0\n * http://lesscss.org\n *\n * Copyright (c) 2009-2018, Alexis Sellier <self@cloudhead.net>\n * Licensed under the Apache-2.0 License.\n *\n */\n\n /** * @license Apache-2.0\n */\n\n(function(f){if(true){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.less = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar addDataAttr = require('./utils').addDataAttr,\n    browser = require('./browser');\n\nmodule.exports = function(window, options) {\n\n    // use options from the current script tag data attribues\n    addDataAttr(options, browser.currentScript(window));\n\n    if (options.isFileProtocol === undefined) {\n        options.isFileProtocol = /^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(window.location.protocol);\n    }\n\n    // Load styles asynchronously (default: false)\n    //\n    // This is set to `false` by default, so that the body\n    // doesn't start loading before the stylesheets are parsed.\n    // Setting this to `true` can result in flickering.\n    //\n    options.async = options.async || false;\n    options.fileAsync = options.fileAsync || false;\n\n    // Interval between watch polls\n    options.poll = options.poll || (options.isFileProtocol ? 1000 : 1500);\n\n    options.env = options.env || (window.location.hostname == '127.0.0.1' ||\n        window.location.hostname == '0.0.0.0'   ||\n        window.location.hostname == 'localhost' ||\n        (window.location.port &&\n            window.location.port.length > 0)      ||\n        options.isFileProtocol                   ? 'development'\n        : 'production');\n\n    var dumpLineNumbers = /!dumpLineNumbers:(comments|mediaquery|all)/.exec(window.location.hash);\n    if (dumpLineNumbers) {\n        options.dumpLineNumbers = dumpLineNumbers[1];\n    }\n\n    if (options.useFileCache === undefined) {\n        options.useFileCache = true;\n    }\n\n    if (options.onReady === undefined) {\n        options.onReady = true;\n    }\n\n    if (options.relativeUrls) {\n        options.rewriteUrls = 'all';\n    }\n};\n\n},{\"./browser\":3,\"./utils\":11}],2:[function(require,module,exports){\n/**\n * Kicks off less and compiles any stylesheets\n * used in the browser distributed version of less\n * to kick-start less using the browser api\n */\n/* global window, document */\n\n// TODO - consider switching this out for a recommendation for this polyfill?\n// <script src=\"https://cdn.polyfill.io/v2/polyfill.min.js\"></script>\n// Browsers have good Promise support\nrequire('promise/polyfill');\n\nvar options = require('../less/default-options')();\n\nif (window.less) {\n    for (key in window.less) {\n        if (window.less.hasOwnProperty(key)) {\n            options[key] = window.less[key];\n        }\n    }\n}\nrequire('./add-default-options')(window, options);\n\noptions.plugins = options.plugins || [];\n\nif (window.LESS_PLUGINS) {\n    options.plugins = options.plugins.concat(window.LESS_PLUGINS);\n}\n\nvar less = module.exports = require('./index')(window, options);\n\nwindow.less = less;\n\nvar css, head, style;\n\n// Always restore page visibility\nfunction resolveOrReject(data) {\n    if (data.filename) {\n        console.warn(data);\n    }\n    if (!options.async) {\n        head.removeChild(style);\n    }\n}\n\nif (options.onReady) {\n    if (/!watch/.test(window.location.hash)) {\n        less.watch();\n    }\n    // Simulate synchronous stylesheet loading by hiding page rendering\n    if (!options.async) {\n        css = 'body { display: none !important }';\n        head = document.head || document.getElementsByTagName('head')[0];\n        style = document.createElement('style');\n\n        style.type = 'text/css';\n        if (style.styleSheet) {\n            style.styleSheet.cssText = css;\n        } else {\n            style.appendChild(document.createTextNode(css));\n        }\n\n        head.appendChild(style);\n    }\n    less.registerStylesheetsImmediately();\n    less.pageLoadFinished = less.refresh(less.env === 'development').then(resolveOrReject, resolveOrReject);\n}\n\n},{\"../less/default-options\":17,\"./add-default-options\":1,\"./index\":8,\"promise/polyfill\":104}],3:[function(require,module,exports){\nvar utils = require('./utils');\nmodule.exports = {\n    createCSS: function (document, styles, sheet) {\n        // Strip the query-string\n        var href = sheet.href || '';\n\n        // If there is no title set, use the filename, minus the extension\n        var id = 'less:' + (sheet.title || utils.extractId(href));\n\n        // If this has already been inserted into the DOM, we may need to replace it\n        var oldStyleNode = document.getElementById(id);\n        var keepOldStyleNode = false;\n\n        // Create a new stylesheet node for insertion or (if necessary) replacement\n        var styleNode = document.createElement('style');\n        styleNode.setAttribute('type', 'text/css');\n        if (sheet.media) {\n            styleNode.setAttribute('media', sheet.media);\n        }\n        styleNode.id = id;\n\n        if (!styleNode.styleSheet) {\n            styleNode.appendChild(document.createTextNode(styles));\n\n            // If new contents match contents of oldStyleNode, don't replace oldStyleNode\n            keepOldStyleNode = (oldStyleNode !== null && oldStyleNode.childNodes.length > 0 && styleNode.childNodes.length > 0 &&\n                oldStyleNode.firstChild.nodeValue === styleNode.firstChild.nodeValue);\n        }\n\n        var head = document.getElementsByTagName('head')[0];\n\n        // If there is no oldStyleNode, just append; otherwise, only append if we need\n        // to replace oldStyleNode with an updated stylesheet\n        if (oldStyleNode === null || keepOldStyleNode === false) {\n            var nextEl = sheet && sheet.nextSibling || null;\n            if (nextEl) {\n                nextEl.parentNode.insertBefore(styleNode, nextEl);\n            } else {\n                head.appendChild(styleNode);\n            }\n        }\n        if (oldStyleNode && keepOldStyleNode === false) {\n            oldStyleNode.parentNode.removeChild(oldStyleNode);\n        }\n\n        // For IE.\n        // This needs to happen *after* the style element is added to the DOM, otherwise IE 7 and 8 may crash.\n        // See http://social.msdn.microsoft.com/Forums/en-US/7e081b65-878a-4c22-8e68-c10d39c2ed32/internet-explorer-crashes-appending-style-element-to-head\n        if (styleNode.styleSheet) {\n            try {\n                styleNode.styleSheet.cssText = styles;\n            } catch (e) {\n                throw new Error('Couldn\\'t reassign styleSheet.cssText.');\n            }\n        }\n    },\n    currentScript: function(window) {\n        var document = window.document;\n        return document.currentScript || (function() {\n            var scripts = document.getElementsByTagName('script');\n            return scripts[scripts.length - 1];\n        })();\n    }\n};\n\n},{\"./utils\":11}],4:[function(require,module,exports){\n// Cache system is a bit outdated and could do with work\n\nmodule.exports = function(window, options, logger) {\n    var cache = null;\n    if (options.env !== 'development') {\n        try {\n            cache = (typeof window.localStorage === 'undefined') ? null : window.localStorage;\n        } catch (_) {}\n    }\n    return {\n        setCSS: function(path, lastModified, modifyVars, styles) {\n            if (cache) {\n                logger.info('saving ' + path + ' to cache.');\n                try {\n                    cache.setItem(path, styles);\n                    cache.setItem(path + ':timestamp', lastModified);\n                    if (modifyVars) {\n                        cache.setItem(path + ':vars', JSON.stringify(modifyVars));\n                    }\n                } catch (e) {\n                    // TODO - could do with adding more robust error handling\n                    logger.error('failed to save \"' + path + '\" to local storage for caching.');\n                }\n            }\n        },\n        getCSS: function(path, webInfo, modifyVars) {\n            var css       = cache && cache.getItem(path),\n                timestamp = cache && cache.getItem(path + ':timestamp'),\n                vars      = cache && cache.getItem(path + ':vars');\n\n            modifyVars = modifyVars || {};\n            vars = vars || \"{}\"; // if not set, treat as the JSON representation of an empty object\n\n            if (timestamp && webInfo.lastModified &&\n                (new Date(webInfo.lastModified).valueOf() ===\n                    new Date(timestamp).valueOf()) &&\n                JSON.stringify(modifyVars) === vars) {\n                // Use local copy\n                return css;\n            }\n        }\n    };\n};\n\n},{}],5:[function(require,module,exports){\nvar utils = require('./utils'),\n    browser = require('./browser');\n\nmodule.exports = function(window, less, options) {\n\n    function errorHTML(e, rootHref) {\n        var id = 'less-error-message:' + utils.extractId(rootHref || '');\n        var template = '<li><label>{line}</label><pre class=\"{class}\">{content}</pre></li>';\n        var elem = window.document.createElement('div'), timer, content, errors = [];\n        var filename = e.filename || rootHref;\n        var filenameNoPath = filename.match(/([^\\/]+(\\?.*)?)$/)[1];\n\n        elem.id        = id;\n        elem.className = 'less-error-message';\n\n        content = '<h3>'  + (e.type || 'Syntax') + 'Error: ' + (e.message || 'There is an error in your .less file') +\n            '</h3>' + '<p>in <a href=\"' + filename   + '\">' + filenameNoPath + '</a> ';\n\n        var errorline = function (e, i, classname) {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.line) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += 'on line ' + e.line + ', column ' + (e.column + 1) + ':</p>' +\n                '<ul>' + errors.join('') + '</ul>';\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += '<br/>Stack Trace</br />' + e.stack.split('\\n').slice(1).join('<br/>');\n        }\n        elem.innerHTML = content;\n\n        // CSS for error messages\n        browser.createCSS(window.document, [\n            '.less-error-message ul, .less-error-message li {',\n            'list-style-type: none;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message label {',\n            'font-size: 12px;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'color: #cc7777;',\n            '}',\n            '.less-error-message pre {',\n            'color: #dd6666;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            'display: inline-block;',\n            '}',\n            '.less-error-message pre.line {',\n            'color: #ff0000;',\n            '}',\n            '.less-error-message h3 {',\n            'font-size: 20px;',\n            'font-weight: bold;',\n            'padding: 15px 0 5px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message a {',\n            'color: #10a',\n            '}',\n            '.less-error-message .error {',\n            'color: red;',\n            'font-weight: bold;',\n            'padding-bottom: 2px;',\n            'border-bottom: 1px dashed red;',\n            '}'\n        ].join('\\n'), { title: 'error-message' });\n\n        elem.style.cssText = [\n            'font-family: Arial, sans-serif',\n            'border: 1px solid #e00',\n            'background-color: #eee',\n            'border-radius: 5px',\n            '-webkit-border-radius: 5px',\n            '-moz-border-radius: 5px',\n            'color: #e00',\n            'padding: 15px',\n            'margin-bottom: 15px'\n        ].join(';');\n\n        if (options.env === 'development') {\n            timer = setInterval(function () {\n                var document = window.document,\n                    body = document.body;\n                if (body) {\n                    if (document.getElementById(id)) {\n                        body.replaceChild(elem, document.getElementById(id));\n                    } else {\n                        body.insertBefore(elem, body.firstChild);\n                    }\n                    clearInterval(timer);\n                }\n            }, 10);\n        }\n    }\n\n    function removeErrorHTML(path) {\n        var node = window.document.getElementById('less-error-message:' + utils.extractId(path));\n        if (node) {\n            node.parentNode.removeChild(node);\n        }\n    }\n\n    function removeErrorConsole(path) {\n        // no action\n    }\n\n    function removeError(path) {\n        if (!options.errorReporting || options.errorReporting === 'html') {\n            removeErrorHTML(path);\n        } else if (options.errorReporting === 'console') {\n            removeErrorConsole(path);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting('remove', path);\n        }\n    }\n\n    function errorConsole(e, rootHref) {\n        var template = '{line} {content}';\n        var filename = e.filename || rootHref;\n        var errors = [];\n        var content = (e.type || 'Syntax') + 'Error: ' + (e.message || 'There is an error in your .less file') +\n            ' in ' + filename;\n\n        var errorline = function (e, i, classname) {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.line) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += ' on line ' + e.line + ', column ' + (e.column + 1) + ':\\n' +\n                errors.join('\\n');\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += '\\nStack Trace\\n' + e.stack;\n        }\n        less.logger.error(content);\n    }\n\n    function error(e, rootHref) {\n        if (!options.errorReporting || options.errorReporting === 'html') {\n            errorHTML(e, rootHref);\n        } else if (options.errorReporting === 'console') {\n            errorConsole(e, rootHref);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting('add', e, rootHref);\n        }\n    }\n\n    return {\n        add: error,\n        remove: removeError\n    };\n};\n\n},{\"./browser\":3,\"./utils\":11}],6:[function(require,module,exports){\n/* global window, XMLHttpRequest */\n\nmodule.exports = function(options, logger) {\n\n    var AbstractFileManager = require('../less/environment/abstract-file-manager.js');\n\n    var fileCache = {};\n\n    // TODOS - move log somewhere. pathDiff and doing something similar in node. use pathDiff in the other browser file for the initial load\n    var FileManager = function() {\n    };\n\n    FileManager.prototype = new AbstractFileManager();\n\n    FileManager.prototype.alwaysMakePathsAbsolute = function alwaysMakePathsAbsolute() {\n        return true;\n    };\n    FileManager.prototype.join = function join(basePath, laterPath) {\n        if (!basePath) {\n            return laterPath;\n        }\n        return this.extractUrlParts(laterPath, basePath).path;\n    };\n    FileManager.prototype.doXHR = function doXHR(url, type, callback, errback) {\n\n        var xhr = new XMLHttpRequest();\n        var async = options.isFileProtocol ? options.fileAsync : true;\n\n        if (typeof xhr.overrideMimeType === 'function') {\n            xhr.overrideMimeType('text/css');\n        }\n        logger.debug('XHR: Getting \\'' + url + '\\'');\n        xhr.open('GET', url, async);\n        xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\n        xhr.send(null);\n\n        function handleResponse(xhr, callback, errback) {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                callback(xhr.responseText,\n                    xhr.getResponseHeader('Last-Modified'));\n            } else if (typeof errback === 'function') {\n                errback(xhr.status, url);\n            }\n        }\n\n        if (options.isFileProtocol && !options.fileAsync) {\n            if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 300)) {\n                callback(xhr.responseText);\n            } else {\n                errback(xhr.status, url);\n            }\n        } else if (async) {\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4) {\n                    handleResponse(xhr, callback, errback);\n                }\n            };\n        } else {\n            handleResponse(xhr, callback, errback);\n        }\n    };\n    FileManager.prototype.supports = function(filename, currentDirectory, options, environment) {\n        return true;\n    };\n\n    FileManager.prototype.clearFileCache = function() {\n        fileCache = {};\n    };\n\n    FileManager.prototype.loadFile = function loadFile(filename, currentDirectory, options, environment) {\n        // TODO: Add prefix support like less-node?\n        // What about multiple paths?\n\n        if (currentDirectory && !this.isPathAbsolute(filename)) {\n            filename = currentDirectory + filename;\n        }\n\n        filename = options.ext ? this.tryAppendExtension(filename, options.ext) : filename;\n\n        options = options || {};\n\n        // sheet may be set to the stylesheet for the initial load or a collection of properties including\n        // some context variables for imports\n        var hrefParts = this.extractUrlParts(filename, window.location.href);\n        var href      = hrefParts.url;\n        var self      = this;\n        \n        return new Promise(function(resolve, reject) {\n            if (options.useFileCache && fileCache[href]) {\n                try {\n                    var lessText = fileCache[href];\n                    return resolve({ contents: lessText, filename: href, webInfo: { lastModified: new Date() }});\n                } catch (e) {\n                    return reject({ filename: href, message: 'Error loading file ' + href + ' error was ' + e.message });\n                }\n            }\n\n            self.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\n                // per file cache\n                fileCache[href] = data;\n\n                // Use remote copy (re-parse)\n                resolve({ contents: data, filename: href, webInfo: { lastModified: lastModified }});\n            }, function doXHRError(status, url) {\n                reject({ type: 'File', message: '\\'' + url + '\\' wasn\\'t found (' + status + ')', href: href });\n            });\n        });\n    };\n\n    return FileManager;\n};\n\n},{\"../less/environment/abstract-file-manager.js\":18}],7:[function(require,module,exports){\nmodule.exports = function() {\n\n    var functionRegistry = require('./../less/functions/function-registry');\n\n    function imageSize() {\n        throw {\n            type: 'Runtime',\n            message: 'Image size functions are not supported in browser version of less'\n        };\n    }\n\n    var imageFunctions = {\n        'image-size': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        'image-width': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        'image-height': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        }\n    };\n\n    functionRegistry.addMultiple(imageFunctions);\n};\n\n},{\"./../less/functions/function-registry\":27}],8:[function(require,module,exports){\n//\n// index.js\n// Should expose the additional browser functions on to the less object\n//\nvar addDataAttr = require('./utils').addDataAttr,\n    browser = require('./browser');\n\nmodule.exports = function(window, options) {\n    var document = window.document;\n    var less = require('../less')();\n    \n    less.options = options;\n    var environment = less.environment,\n        FileManager = require('./file-manager')(options, less.logger),\n        fileManager = new FileManager();\n    environment.addFileManager(fileManager);\n    less.FileManager = FileManager;\n    less.PluginLoader = require('./plugin-loader');\n\n    require('./log-listener')(less, options);\n    var errors = require('./error-reporting')(window, less, options);\n    var cache = less.cache = options.cache || require('./cache')(window, options, less.logger);\n    require('./image-size')(less.environment);\n\n    // Setup user functions - Deprecate?\n    if (options.functions) {\n        less.functions.functionRegistry.addMultiple(options.functions);\n    }\n\n    var typePattern = /^text\\/(x-)?less$/;\n\n    function clone(obj) {\n        var cloned = {};\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                cloned[prop] = obj[prop];\n            }\n        }\n        return cloned;\n    }\n\n    // only really needed for phantom\n    function bind(func, thisArg) {\n        var curryArgs = Array.prototype.slice.call(arguments, 2);\n        return function() {\n            var args = curryArgs.concat(Array.prototype.slice.call(arguments, 0));\n            return func.apply(thisArg, args);\n        };\n    }\n\n    function loadStyles(modifyVars) {\n        var styles = document.getElementsByTagName('style'),\n            style;\n\n        for (var i = 0; i < styles.length; i++) {\n            style = styles[i];\n            if (style.type.match(typePattern)) {\n                var instanceOptions = clone(options);\n                instanceOptions.modifyVars = modifyVars;\n                var lessText = style.innerHTML || '';\n                instanceOptions.filename = document.location.href.replace(/#.*$/, '');\n\n                /* jshint loopfunc:true */\n                // use closure to store current style\n                less.render(lessText, instanceOptions,\n                        bind(function(style, e, result) {\n                            if (e) {\n                                errors.add(e, 'inline');\n                            } else {\n                                style.type = 'text/css';\n                                if (style.styleSheet) {\n                                    style.styleSheet.cssText = result.css;\n                                } else {\n                                    style.innerHTML = result.css;\n                                }\n                            }\n                        }, null, style));\n            }\n        }\n    }\n\n    function loadStyleSheet(sheet, callback, reload, remaining, modifyVars) {\n\n        var instanceOptions = clone(options);\n        addDataAttr(instanceOptions, sheet);\n        instanceOptions.mime = sheet.type;\n\n        if (modifyVars) {\n            instanceOptions.modifyVars = modifyVars;\n        }\n\n        function loadInitialFileCallback(loadedFile) {\n\n            var data = loadedFile.contents,\n                path = loadedFile.filename,\n                webInfo = loadedFile.webInfo;\n\n            var newFileInfo = {\n                currentDirectory: fileManager.getPath(path),\n                filename: path,\n                rootFilename: path,\n                rewriteUrls: instanceOptions.rewriteUrls\n            };\n\n            newFileInfo.entryPath = newFileInfo.currentDirectory;\n            newFileInfo.rootpath = instanceOptions.rootpath || newFileInfo.currentDirectory;\n\n            if (webInfo) {\n                webInfo.remaining = remaining;\n\n                var css = cache.getCSS(path, webInfo, instanceOptions.modifyVars);\n                if (!reload && css) {\n                    webInfo.local = true;\n                    callback(null, css, data, sheet, webInfo, path);\n                    return;\n                }\n\n            }\n\n            // TODO add tests around how this behaves when reloading\n            errors.remove(path);\n\n            instanceOptions.rootFileInfo = newFileInfo;\n            less.render(data, instanceOptions, function(e, result) {\n                if (e) {\n                    e.href = path;\n                    callback(e);\n                } else {\n                    cache.setCSS(sheet.href, webInfo.lastModified, instanceOptions.modifyVars, result.css);\n                    callback(null, result.css, data, sheet, webInfo, path);\n                }\n            });\n        }\n\n        fileManager.loadFile(sheet.href, null, instanceOptions, environment)\n            .then(function(loadedFile) {\n                loadInitialFileCallback(loadedFile);\n            }).catch(function(err) {\n                console.log(err);\n                callback(err);\n            });\n\n    }\n\n    function loadStyleSheets(callback, reload, modifyVars) {\n        for (var i = 0; i < less.sheets.length; i++) {\n            loadStyleSheet(less.sheets[i], callback, reload, less.sheets.length - (i + 1), modifyVars);\n        }\n    }\n\n    function initRunningMode() {\n        if (less.env === 'development') {\n            less.watchTimer = setInterval(function () {\n                if (less.watchMode) {\n                    fileManager.clearFileCache();\n                    loadStyleSheets(function (e, css, _, sheet, webInfo) {\n                        if (e) {\n                            errors.add(e, e.href || sheet.href);\n                        } else if (css) {\n                            browser.createCSS(window.document, css, sheet);\n                        }\n                    });\n                }\n            }, options.poll);\n        }\n    }\n\n    //\n    // Watch mode\n    //\n    less.watch   = function () {\n        if (!less.watchMode ) {\n            less.env = 'development';\n            initRunningMode();\n        }\n        this.watchMode = true;\n        return true;\n    };\n\n    less.unwatch = function () {clearInterval(less.watchTimer); this.watchMode = false; return false; };\n\n    //\n    // Synchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\".\n    //\n    less.registerStylesheetsImmediately = function() {\n        var links = document.getElementsByTagName('link');\n        less.sheets = [];\n\n        for (var i = 0; i < links.length; i++) {\n            if (links[i].rel === 'stylesheet/less' || (links[i].rel.match(/stylesheet/) &&\n                (links[i].type.match(typePattern)))) {\n                less.sheets.push(links[i]);\n            }\n        }\n    };\n\n    //\n    // Asynchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\", returning a Promise.\n    //\n    less.registerStylesheets = function() {\n        return new Promise(function(resolve, reject) {\n            less.registerStylesheetsImmediately();\n            resolve();\n        });\n    };\n\n    //\n    // With this function, it's possible to alter variables and re-render\n    // CSS without reloading less-files\n    //\n    less.modifyVars = function(record) {\n        return less.refresh(true, record, false);\n    };\n\n    less.refresh = function (reload, modifyVars, clearFileCache) {\n        if ((reload || clearFileCache) && clearFileCache !== false) {\n            fileManager.clearFileCache();\n        }\n        return new Promise(function (resolve, reject) {\n            var startTime, endTime, totalMilliseconds, remainingSheets;\n            startTime = endTime = new Date();\n\n            // Set counter for remaining unprocessed sheets\n            remainingSheets = less.sheets.length;\n\n            if (remainingSheets === 0) {\n\n                endTime = new Date();\n                totalMilliseconds = endTime - startTime;\n                less.logger.info('Less has finished and no sheets were loaded.');\n                resolve({\n                    startTime: startTime,\n                    endTime: endTime,\n                    totalMilliseconds: totalMilliseconds,\n                    sheets: less.sheets.length\n                });\n\n            } else {\n                // Relies on less.sheets array, callback seems to be guaranteed to be called for every element of the array\n                loadStyleSheets(function (e, css, _, sheet, webInfo) {\n                    if (e) {\n                        errors.add(e, e.href || sheet.href);\n                        reject(e);\n                        return;\n                    }\n                    if (webInfo.local) {\n                        less.logger.info('Loading ' + sheet.href + ' from cache.');\n                    } else {\n                        less.logger.info('Rendered ' + sheet.href + ' successfully.');\n                    }\n                    browser.createCSS(window.document, css, sheet);\n                    less.logger.info('CSS for ' + sheet.href + ' generated in ' + (new Date() - endTime) + 'ms');\n\n                    // Count completed sheet\n                    remainingSheets--;\n\n                    // Check if the last remaining sheet was processed and then call the promise\n                    if (remainingSheets === 0) {\n                        totalMilliseconds = new Date() - startTime;\n                        less.logger.info('Less has finished. CSS generated in ' + totalMilliseconds + 'ms');\n                        resolve({\n                            startTime: startTime,\n                            endTime: endTime,\n                            totalMilliseconds: totalMilliseconds,\n                            sheets: less.sheets.length\n                        });\n                    }\n                    endTime = new Date();\n                }, reload, modifyVars);\n            }\n\n            loadStyles(modifyVars);\n        });\n    };\n\n    less.refreshStyles = loadStyles;\n    return less;\n};\n\n},{\"../less\":37,\"./browser\":3,\"./cache\":4,\"./error-reporting\":5,\"./file-manager\":6,\"./image-size\":7,\"./log-listener\":9,\"./plugin-loader\":10,\"./utils\":11}],9:[function(require,module,exports){\nmodule.exports = function(less, options) {\n\n    var logLevel_debug = 4,\n        logLevel_info = 3,\n        logLevel_warn = 2,\n        logLevel_error = 1;\n\n    // The amount of logging in the javascript console.\n    // 3 - Debug, information and errors\n    // 2 - Information and errors\n    // 1 - Errors\n    // 0 - None\n    // Defaults to 2\n    options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : (options.env === 'development' ?  logLevel_info : logLevel_error);\n\n    if (!options.loggers) {\n        options.loggers = [{\n            debug: function(msg) {\n                if (options.logLevel >= logLevel_debug) {\n                    console.log(msg);\n                }\n            },\n            info: function(msg) {\n                if (options.logLevel >= logLevel_info) {\n                    console.log(msg);\n                }\n            },\n            warn: function(msg) {\n                if (options.logLevel >= logLevel_warn) {\n                    console.warn(msg);\n                }\n            },\n            error: function(msg) {\n                if (options.logLevel >= logLevel_error) {\n                    console.error(msg);\n                }\n            }\n        }];\n    }\n    for (var i = 0; i < options.loggers.length; i++) {\n        less.logger.addListener(options.loggers[i]);\n    }\n};\n\n},{}],10:[function(require,module,exports){\n// TODO: Add tests for browser @plugin\n/* global window */\n\nvar AbstractPluginLoader = require('../less/environment/abstract-plugin-loader.js');\n\n/**\n * Browser Plugin Loader\n */\nvar PluginLoader = function(less) {\n    this.less = less;\n    // Should we shim this.require for browser? Probably not?\n};\n\nPluginLoader.prototype = new AbstractPluginLoader();\n\nPluginLoader.prototype.loadPlugin = function(filename, basePath, context, environment, fileManager) {\n    return new Promise(function(fulfill, reject) {\n        fileManager.loadFile(filename, basePath, context, environment)\n            .then(fulfill).catch(reject);\n    });\n};\n\nmodule.exports = PluginLoader;\n\n\n},{\"../less/environment/abstract-plugin-loader.js\":19}],11:[function(require,module,exports){\nmodule.exports = {\n    extractId: function(href) {\n        return href.replace(/^[a-z-]+:\\/+?[^\\/]+/, '')  // Remove protocol & domain\n            .replace(/[\\?\\&]livereload=\\w+/, '')        // Remove LiveReload cachebuster\n            .replace(/^\\//, '')                         // Remove root /\n            .replace(/\\.[a-zA-Z]+$/, '')                // Remove simple extension\n            .replace(/[^\\.\\w-]+/g, '-')                 // Replace illegal characters\n            .replace(/\\./g, ':');                       // Replace dots with colons(for valid id)\n    },\n    addDataAttr: function(options, tag) {\n        for (var opt in tag.dataset) {\n            if (tag.dataset.hasOwnProperty(opt)) {\n                if (opt === 'env' || opt === 'dumpLineNumbers' || opt === 'rootpath' || opt === 'errorReporting') {\n                    options[opt] = tag.dataset[opt];\n                } else {\n                    try {\n                        options[opt] = JSON.parse(tag.dataset[opt]);\n                    }\n                    catch (_) {}\n                }\n            }\n        }\n    }\n};\n\n},{}],12:[function(require,module,exports){\nmodule.exports = {\n    Math: {\n        ALWAYS: 0,\n        PARENS_DIVISION: 1,\n        PARENS: 2,\n        STRICT_LEGACY: 3\n    },\n    RewriteUrls: {\n        OFF: 0,\n        LOCAL: 1,\n        ALL: 2\n    }\n};\n},{}],13:[function(require,module,exports){\nvar contexts = {};\nmodule.exports = contexts;\nvar Constants = require('./constants');\n\nvar copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {\n    if (!original) { return; }\n\n    for (var i = 0; i < propertiesToCopy.length; i++) {\n        if (original.hasOwnProperty(propertiesToCopy[i])) {\n            destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];\n        }\n    }\n};\n\n/*\n parse is used whilst parsing\n */\nvar parseCopyProperties = [\n    // options\n    'paths',            // option - unmodified - paths to search for imports on\n    'rewriteUrls',      // option - whether to adjust URL's to be relative\n    'rootpath',         // option - rootpath to append to URL's\n    'strictImports',    // option -\n    'insecure',         // option - whether to allow imports from insecure ssl hosts\n    'dumpLineNumbers',  // option - whether to dump line numbers\n    'compress',         // option - whether to compress\n    'syncImport',       // option - whether to import synchronously\n    'chunkInput',       // option - whether to chunk input. more performant but causes parse issues.\n    'mime',             // browser only - mime type for sheet import\n    'useFileCache',     // browser only - whether to use the per file session cache\n    // context\n    'processImports',   // option & context - whether to process imports. if false then imports will not be imported.\n                        // Used by the import manager to stop multiple import visitors being created.\n    'pluginManager'     // Used as the plugin manager for the session\n];\n\ncontexts.Parse = function(options) {\n    copyFromOriginal(options, this, parseCopyProperties);\n\n    if (typeof this.paths === 'string') { this.paths = [this.paths]; }\n};\n\nvar evalCopyProperties = [\n    'paths',             // additional include paths\n    'compress',          // whether to compress\n    'ieCompat',          // whether to enforce IE compatibility (IE8 data-uri)\n    'math',              // whether math has to be within parenthesis\n    'strictUnits',       // whether units need to evaluate correctly\n    'sourceMap',         // whether to output a source map\n    'importMultiple',    // whether we are currently importing multiple copies\n    'urlArgs',           // whether to add args into url tokens\n    'javascriptEnabled', // option - whether Inline JavaScript is enabled. if undefined, defaults to false\n    'pluginManager',     // Used as the plugin manager for the session\n    'importantScope',    // used to bubble up !important statements\n    'rewriteUrls'        // option - whether to adjust URL's to be relative\n];\n\ncontexts.Eval = function(options, frames) {\n    copyFromOriginal(options, this, evalCopyProperties);\n\n    if (typeof this.paths === 'string') { this.paths = [this.paths]; }\n\n    this.frames = frames || [];\n    this.importantScope = this.importantScope || [];\n};\n\ncontexts.Eval.prototype.enterCalc = function () {\n    if (!this.calcStack) {\n        this.calcStack = [];\n    }\n    this.calcStack.push(true);\n    this.inCalc = true;\n};\n\ncontexts.Eval.prototype.exitCalc = function () {\n    this.calcStack.pop();\n    if (!this.calcStack) {\n        this.inCalc = false;\n    }\n};\n\ncontexts.Eval.prototype.inParenthesis = function () {\n    if (!this.parensStack) {\n        this.parensStack = [];\n    }\n    this.parensStack.push(true);\n};\n\ncontexts.Eval.prototype.outOfParenthesis = function () {\n    this.parensStack.pop();\n};\n\ncontexts.Eval.prototype.inCalc = false;\ncontexts.Eval.prototype.mathOn = true;\ncontexts.Eval.prototype.isMathOn = function (op) {\n    if (!this.mathOn) {\n        return false;\n    }\n    if (op === '/' && this.math !== Constants.Math.ALWAYS && (!this.parensStack || !this.parensStack.length)) {\n        return false;\n    }\n    if (this.math > Constants.Math.PARENS_DIVISION) {\n        return this.parensStack && this.parensStack.length;\n    }\n    return true;\n};\n\ncontexts.Eval.prototype.pathRequiresRewrite = function (path) {\n    var isRelative = this.rewriteUrls === Constants.RewriteUrls.LOCAL ? isPathLocalRelative : isPathRelative;\n\n    return isRelative(path);\n};\n\ncontexts.Eval.prototype.rewritePath = function (path, rootpath) {\n    var newPath;\n\n    rootpath = rootpath || '';\n    newPath = this.normalizePath(rootpath + path);\n\n    // If a path was explicit relative and the rootpath was not an absolute path\n    // we must ensure that the new path is also explicit relative.\n    if (isPathLocalRelative(path) &&\n        isPathRelative(rootpath) &&\n        isPathLocalRelative(newPath) === false) {\n        newPath = './' + newPath;\n    }\n\n    return newPath;\n};\n\ncontexts.Eval.prototype.normalizePath = function (path) {\n    var\n        segments = path.split('/').reverse(),\n        segment;\n\n    path = [];\n    while (segments.length !== 0) {\n        segment = segments.pop();\n        switch ( segment ) {\n            case '.':\n                break;\n            case '..':\n                if ((path.length === 0) || (path[path.length - 1] === '..')) {\n                    path.push( segment );\n                } else {\n                    path.pop();\n                }\n                break;\n            default:\n                path.push(segment);\n                break;\n        }\n    }\n\n    return path.join('/');\n};\n\nfunction isPathRelative(path) {\n    return !/^(?:[a-z-]+:|\\/|#)/i.test(path);\n}\n\nfunction isPathLocalRelative(path) {\n    return path.charAt(0) === '.';\n}\n\n// todo - do the same for the toCSS ?\n\n},{\"./constants\":12}],14:[function(require,module,exports){\nmodule.exports = {\n    'aliceblue':'#f0f8ff',\n    'antiquewhite':'#faebd7',\n    'aqua':'#00ffff',\n    'aquamarine':'#7fffd4',\n    'azure':'#f0ffff',\n    'beige':'#f5f5dc',\n    'bisque':'#ffe4c4',\n    'black':'#000000',\n    'blanchedalmond':'#ffebcd',\n    'blue':'#0000ff',\n    'blueviolet':'#8a2be2',\n    'brown':'#a52a2a',\n    'burlywood':'#deb887',\n    'cadetblue':'#5f9ea0',\n    'chartreuse':'#7fff00',\n    'chocolate':'#d2691e',\n    'coral':'#ff7f50',\n    'cornflowerblue':'#6495ed',\n    'cornsilk':'#fff8dc',\n    'crimson':'#dc143c',\n    'cyan':'#00ffff',\n    'darkblue':'#00008b',\n    'darkcyan':'#008b8b',\n    'darkgoldenrod':'#b8860b',\n    'darkgray':'#a9a9a9',\n    'darkgrey':'#a9a9a9',\n    'darkgreen':'#006400',\n    'darkkhaki':'#bdb76b',\n    'darkmagenta':'#8b008b',\n    'darkolivegreen':'#556b2f',\n    'darkorange':'#ff8c00',\n    'darkorchid':'#9932cc',\n    'darkred':'#8b0000',\n    'darksalmon':'#e9967a',\n    'darkseagreen':'#8fbc8f',\n    'darkslateblue':'#483d8b',\n    'darkslategray':'#2f4f4f',\n    'darkslategrey':'#2f4f4f',\n    'darkturquoise':'#00ced1',\n    'darkviolet':'#9400d3',\n    'deeppink':'#ff1493',\n    'deepskyblue':'#00bfff',\n    'dimgray':'#696969',\n    'dimgrey':'#696969',\n    'dodgerblue':'#1e90ff',\n    'firebrick':'#b22222',\n    'floralwhite':'#fffaf0',\n    'forestgreen':'#228b22',\n    'fuchsia':'#ff00ff',\n    'gainsboro':'#dcdcdc',\n    'ghostwhite':'#f8f8ff',\n    'gold':'#ffd700',\n    'goldenrod':'#daa520',\n    'gray':'#808080',\n    'grey':'#808080',\n    'green':'#008000',\n    'greenyellow':'#adff2f',\n    'honeydew':'#f0fff0',\n    'hotpink':'#ff69b4',\n    'indianred':'#cd5c5c',\n    'indigo':'#4b0082',\n    'ivory':'#fffff0',\n    'khaki':'#f0e68c',\n    'lavender':'#e6e6fa',\n    'lavenderblush':'#fff0f5',\n    'lawngreen':'#7cfc00',\n    'lemonchiffon':'#fffacd',\n    'lightblue':'#add8e6',\n    'lightcoral':'#f08080',\n    'lightcyan':'#e0ffff',\n    'lightgoldenrodyellow':'#fafad2',\n    'lightgray':'#d3d3d3',\n    'lightgrey':'#d3d3d3',\n    'lightgreen':'#90ee90',\n    'lightpink':'#ffb6c1',\n    'lightsalmon':'#ffa07a',\n    'lightseagreen':'#20b2aa',\n    'lightskyblue':'#87cefa',\n    'lightslategray':'#778899',\n    'lightslategrey':'#778899',\n    'lightsteelblue':'#b0c4de',\n    'lightyellow':'#ffffe0',\n    'lime':'#00ff00',\n    'limegreen':'#32cd32',\n    'linen':'#faf0e6',\n    'magenta':'#ff00ff',\n    'maroon':'#800000',\n    'mediumaquamarine':'#66cdaa',\n    'mediumblue':'#0000cd',\n    'mediumorchid':'#ba55d3',\n    'mediumpurple':'#9370d8',\n    'mediumseagreen':'#3cb371',\n    'mediumslateblue':'#7b68ee',\n    'mediumspringgreen':'#00fa9a',\n    'mediumturquoise':'#48d1cc',\n    'mediumvioletred':'#c71585',\n    'midnightblue':'#191970',\n    'mintcream':'#f5fffa',\n    'mistyrose':'#ffe4e1',\n    'moccasin':'#ffe4b5',\n    'navajowhite':'#ffdead',\n    'navy':'#000080',\n    'oldlace':'#fdf5e6',\n    'olive':'#808000',\n    'olivedrab':'#6b8e23',\n    'orange':'#ffa500',\n    'orangered':'#ff4500',\n    'orchid':'#da70d6',\n    'palegoldenrod':'#eee8aa',\n    'palegreen':'#98fb98',\n    'paleturquoise':'#afeeee',\n    'palevioletred':'#d87093',\n    'papayawhip':'#ffefd5',\n    'peachpuff':'#ffdab9',\n    'peru':'#cd853f',\n    'pink':'#ffc0cb',\n    'plum':'#dda0dd',\n    'powderblue':'#b0e0e6',\n    'purple':'#800080',\n    'rebeccapurple':'#663399',\n    'red':'#ff0000',\n    'rosybrown':'#bc8f8f',\n    'royalblue':'#4169e1',\n    'saddlebrown':'#8b4513',\n    'salmon':'#fa8072',\n    'sandybrown':'#f4a460',\n    'seagreen':'#2e8b57',\n    'seashell':'#fff5ee',\n    'sienna':'#a0522d',\n    'silver':'#c0c0c0',\n    'skyblue':'#87ceeb',\n    'slateblue':'#6a5acd',\n    'slategray':'#708090',\n    'slategrey':'#708090',\n    'snow':'#fffafa',\n    'springgreen':'#00ff7f',\n    'steelblue':'#4682b4',\n    'tan':'#d2b48c',\n    'teal':'#008080',\n    'thistle':'#d8bfd8',\n    'tomato':'#ff6347',\n    'turquoise':'#40e0d0',\n    'violet':'#ee82ee',\n    'wheat':'#f5deb3',\n    'white':'#ffffff',\n    'whitesmoke':'#f5f5f5',\n    'yellow':'#ffff00',\n    'yellowgreen':'#9acd32'\n};\n},{}],15:[function(require,module,exports){\nmodule.exports = {\n    colors: require('./colors'),\n    unitConversions: require('./unit-conversions')\n};\n\n},{\"./colors\":14,\"./unit-conversions\":16}],16:[function(require,module,exports){\nmodule.exports = {\n    length: {\n        'm': 1,\n        'cm': 0.01,\n        'mm': 0.001,\n        'in': 0.0254,\n        'px': 0.0254 / 96,\n        'pt': 0.0254 / 72,\n        'pc': 0.0254 / 72 * 12\n    },\n    duration: {\n        's': 1,\n        'ms': 0.001\n    },\n    angle: {\n        'rad': 1 / (2 * Math.PI),\n        'deg': 1 / 360,\n        'grad': 1 / 400,\n        'turn': 1\n    }\n};\n},{}],17:[function(require,module,exports){\n// Export a new default each time\nmodule.exports = function() {\n    return {\n        /* Inline Javascript - @plugin still allowed */\n        javascriptEnabled: false,\n\n        /* Outputs a makefile import dependency list to stdout. */\n        depends: false,\n\n        /* (DEPRECATED) Compress using less built-in compression. \n         * This does an okay job but does not utilise all the tricks of \n         * dedicated css compression. */\n        compress: false,\n\n        /* Runs the less parser and just reports errors without any output. */\n        lint: false,\n\n        /* Sets available include paths.\n         * If the file in an @import rule does not exist at that exact location, \n         * less will look for it at the location(s) passed to this option. \n         * You might use this for instance to specify a path to a library which \n         * you want to be referenced simply and relatively in the less files. */\n        paths: [],\n\n        /* color output in the terminal */\n        color: true,\n\n        /* The strictImports controls whether the compiler will allow an @import inside of either \n         * @media blocks or (a later addition) other selector blocks.\n         * See: https://github.com/less/less.js/issues/656 */\n        strictImports: false,\n\n        /* Allow Imports from Insecure HTTPS Hosts */\n        insecure: false,\n\n        /* Allows you to add a path to every generated import and url in your css. \n         * This does not affect less import statements that are processed, just ones \n         * that are left in the output css. */\n        rootpath: '',\n\n        /* By default URLs are kept as-is, so if you import a file in a sub-directory \n         * that references an image, exactly the same URL will be output in the css. \n         * This option allows you to re-write URL's in imported files so that the \n         * URL is always relative to the base imported file */\n        rewriteUrls: false,\n\n        /* Compatibility with IE8. Used for limiting data-uri length */\n        ieCompat: false,  // true until 3.0\n\n        /* How to process math \n         *   0 always           - eagerly try to solve all operations\n         *   1 parens-division  - require parens for division \"/\"\n         *   2 parens | strict  - require parens for all operations\n         *   3 strict-legacy    - legacy strict behavior (super-strict)\n         */\n        math: 0,\n\n        /* Without this option, less attempts to guess at the output unit when it does maths. */\n        strictUnits: false,\n\n        /* Effectively the declaration is put at the top of your base Less file, \n         * meaning it can be used but it also can be overridden if this variable \n         * is defined in the file. */\n        globalVars: null,\n\n        /* As opposed to the global variable option, this puts the declaration at the\n         * end of your base file, meaning it will override anything defined in your Less file. */\n        modifyVars: null,\n\n        /* This option allows you to specify a argument to go on to every URL.  */\n        urlArgs: ''\n    }\n}\n},{}],18:[function(require,module,exports){\nvar abstractFileManager = function() {\n};\n\nabstractFileManager.prototype.getPath = function (filename) {\n    var j = filename.lastIndexOf('?');\n    if (j > 0) {\n        filename = filename.slice(0, j);\n    }\n    j = filename.lastIndexOf('/');\n    if (j < 0) {\n        j = filename.lastIndexOf('\\\\');\n    }\n    if (j < 0) {\n        return '';\n    }\n    return filename.slice(0, j + 1);\n};\n\nabstractFileManager.prototype.tryAppendExtension = function(path, ext) {\n    return /(\\.[a-z]*$)|([\\?;].*)$/.test(path) ? path : path + ext;\n};\n\nabstractFileManager.prototype.tryAppendLessExtension = function(path) {\n    return this.tryAppendExtension(path, '.less');\n};\n\nabstractFileManager.prototype.supportsSync = function() {\n    return false;\n};\n\nabstractFileManager.prototype.alwaysMakePathsAbsolute = function() {\n    return false;\n};\n\nabstractFileManager.prototype.isPathAbsolute = function(filename) {\n    return (/^(?:[a-z-]+:|\\/|\\\\|#)/i).test(filename);\n};\n// TODO: pull out / replace?\nabstractFileManager.prototype.join = function(basePath, laterPath) {\n    if (!basePath) {\n        return laterPath;\n    }\n    return basePath + laterPath;\n};\n\nabstractFileManager.prototype.pathDiff = function pathDiff(url, baseUrl) {\n    // diff between two paths to create a relative path\n\n    var urlParts = this.extractUrlParts(url),\n        baseUrlParts = this.extractUrlParts(baseUrl),\n        i, max, urlDirectories, baseUrlDirectories, diff = '';\n    if (urlParts.hostPart !== baseUrlParts.hostPart) {\n        return '';\n    }\n    max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);\n    for (i = 0; i < max; i++) {\n        if (baseUrlParts.directories[i] !== urlParts.directories[i]) { break; }\n    }\n    baseUrlDirectories = baseUrlParts.directories.slice(i);\n    urlDirectories = urlParts.directories.slice(i);\n    for (i = 0; i < baseUrlDirectories.length - 1; i++) {\n        diff += '../';\n    }\n    for (i = 0; i < urlDirectories.length - 1; i++) {\n        diff += urlDirectories[i] + '/';\n    }\n    return diff;\n};\n// helper function, not part of API\nabstractFileManager.prototype.extractUrlParts = function extractUrlParts(url, baseUrl) {\n    // urlParts[1] = protocol://hostname/ OR /\n    // urlParts[2] = / if path relative to host base\n    // urlParts[3] = directories\n    // urlParts[4] = filename\n    // urlParts[5] = parameters\n\n    var urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i,\n        urlParts = url.match(urlPartsRegex),\n        returner = {}, rawDirectories = [], directories = [], i, baseUrlParts;\n\n    if (!urlParts) {\n        throw new Error('Could not parse sheet href - \\'' + url + '\\'');\n    }\n\n    // Stylesheets in IE don't always return the full path\n    if (baseUrl && (!urlParts[1] || urlParts[2])) {\n        baseUrlParts = baseUrl.match(urlPartsRegex);\n        if (!baseUrlParts) {\n            throw new Error('Could not parse page url - \\'' + baseUrl + '\\'');\n        }\n        urlParts[1] = urlParts[1] || baseUrlParts[1] || '';\n        if (!urlParts[2]) {\n            urlParts[3] = baseUrlParts[3] + urlParts[3];\n        }\n    }\n\n    if (urlParts[3]) {\n        rawDirectories = urlParts[3].replace(/\\\\/g, '/').split('/');\n\n        // collapse '..' and skip '.'\n        for (i = 0; i < rawDirectories.length; i++) {\n\n            if (rawDirectories[i] === '..') {\n                directories.pop();\n            }\n            else if (rawDirectories[i] !== '.') {\n                directories.push(rawDirectories[i]);\n            }\n        \n        }\n    }\n\n    returner.hostPart = urlParts[1];\n    returner.directories = directories;\n    returner.rawPath = (urlParts[1] || '') + rawDirectories.join('/');\n    returner.path = (urlParts[1] || '') + directories.join('/');\n    returner.filename = urlParts[4];\n    returner.fileUrl = returner.path + (urlParts[4] || '');\n    returner.url = returner.fileUrl + (urlParts[5] || '');\n    return returner;\n};\n\nmodule.exports = abstractFileManager;\n\n},{}],19:[function(require,module,exports){\nvar functionRegistry = require('../functions/function-registry'),\n    LessError = require('../less-error');\n\nvar AbstractPluginLoader = function() {\n    // Implemented by Node.js plugin loader\n    this.require = function() {\n        return null;\n    }\n};\n\nAbstractPluginLoader.prototype.evalPlugin = function(contents, context, imports, pluginOptions, fileInfo) {\n\n    var loader,\n        registry,\n        pluginObj,\n        localModule,\n        pluginManager,\n        filename,\n        result;\n\n    pluginManager = context.pluginManager;\n\n    if (fileInfo) {\n        if (typeof fileInfo === 'string') {\n            filename = fileInfo;\n        }\n        else {\n            filename = fileInfo.filename;\n        }\n    }\n    var shortname = (new this.less.FileManager()).extractUrlParts(filename).filename;\n\n    if (filename) {\n        pluginObj = pluginManager.get(filename);\n\n        if (pluginObj) {\n            result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n            if (result) {\n                return result;\n            }\n            try {\n                if (pluginObj.use) {\n                    pluginObj.use.call(this.context, pluginObj);\n                }\n            }\n            catch (e) {\n                e.message = e.message || 'Error during @plugin call';\n                return new LessError(e, imports, filename);\n            }\n            return pluginObj;\n        }\n    }\n    localModule = {\n        exports: {},\n        pluginManager: pluginManager,\n        fileInfo: fileInfo\n    };\n    registry = functionRegistry.create();\n\n    var registerPlugin = function(obj) {\n        pluginObj = obj;\n    };\n\n    try {\n        loader = new Function('module', 'require', 'registerPlugin', 'functions', 'tree', 'less', 'fileInfo', contents);\n        loader(localModule, this.require(filename), registerPlugin, registry, this.less.tree, this.less, fileInfo);\n    }\n    catch (e) {\n        return new LessError(e, imports, filename);\n    }\n\n    if (!pluginObj) {\n        pluginObj = localModule.exports;\n    }\n    pluginObj = this.validatePlugin(pluginObj, filename, shortname);\n\n    if (pluginObj instanceof LessError) {\n        return pluginObj;\n    }\n\n    if (pluginObj) {\n        pluginObj.imports = imports;\n        pluginObj.filename = filename;\n\n        // For < 3.x (or unspecified minVersion) - setOptions() before install()\n        if (!pluginObj.minVersion || this.compareVersion('3.0.0', pluginObj.minVersion) < 0) {\n            result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n\n            if (result) {\n                return result;\n            }\n        }\n\n        // Run on first load\n        pluginManager.addPlugin(pluginObj, fileInfo.filename, registry);\n        pluginObj.functions = registry.getLocalFunctions();\n\n        // Need to call setOptions again because the pluginObj might have functions\n        result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n        if (result) {\n            return result;\n        }\n\n        // Run every @plugin call\n        try {\n            if (pluginObj.use) {\n                pluginObj.use.call(this.context, pluginObj);\n            }\n        }\n        catch (e) {\n            e.message = e.message || 'Error during @plugin call';\n            return new LessError(e, imports, filename);\n        }\n\n    }\n    else {\n        return new LessError({ message: 'Not a valid plugin' }, imports, filename);\n    }\n\n    return pluginObj;\n\n};\n\nAbstractPluginLoader.prototype.trySetOptions = function(plugin, filename, name, options) {\n    if (options && !plugin.setOptions) {\n        return new LessError({\n            message: 'Options have been provided but the plugin ' +\n                name + ' does not support any options.'\n        });\n    }\n    try {\n        plugin.setOptions && plugin.setOptions(options);\n    }\n    catch (e) {\n        return new LessError(e);\n    }\n};\n\nAbstractPluginLoader.prototype.validatePlugin = function(plugin, filename, name) {\n    if (plugin) {\n        // support plugins being a function\n        // so that the plugin can be more usable programmatically\n        if (typeof plugin === 'function') {\n            plugin = new plugin();\n        }\n\n        if (plugin.minVersion) {\n            if (this.compareVersion(plugin.minVersion, this.less.version) < 0) {\n                return new LessError({\n                    message: 'Plugin ' + name + ' requires version ' +\n                        this.versionToString(plugin.minVersion)\n                });\n            }\n        }\n        return plugin;\n    }\n    return null;\n};\n\nAbstractPluginLoader.prototype.compareVersion = function(aVersion, bVersion) {\n    if (typeof aVersion === 'string') {\n        aVersion = aVersion.match(/^(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\n        aVersion.shift();\n    }\n    for (var i = 0; i < aVersion.length; i++) {\n        if (aVersion[i] !== bVersion[i]) {\n            return parseInt(aVersion[i]) > parseInt(bVersion[i]) ? -1 : 1;\n        }\n    }\n    return 0;\n};\nAbstractPluginLoader.prototype.versionToString = function(version) {\n    var versionString = '';\n    for (var i = 0; i < version.length; i++) {\n        versionString += (versionString ? '.' : '') + version[i];\n    }\n    return versionString;\n};\nAbstractPluginLoader.prototype.printUsage = function(plugins) {\n    for (var i = 0; i < plugins.length; i++) {\n        var plugin = plugins[i];\n        if (plugin.printUsage) {\n            plugin.printUsage();\n        }\n    }\n};\n\nmodule.exports = AbstractPluginLoader;\n\n\n},{\"../functions/function-registry\":27,\"../less-error\":38}],20:[function(require,module,exports){\n/**\n * @todo Document why this abstraction exists, and the relationship between\n *       environment, file managers, and plugin manager\n */\n\nvar logger = require('../logger');\nvar environment = function(externalEnvironment, fileManagers) {\n    this.fileManagers = fileManagers || [];\n    externalEnvironment = externalEnvironment || {};\n\n    var optionalFunctions = ['encodeBase64', 'mimeLookup', 'charsetLookup', 'getSourceMapGenerator'],\n        requiredFunctions = [],\n        functions = requiredFunctions.concat(optionalFunctions);\n\n    for (var i = 0; i < functions.length; i++) {\n        var propName = functions[i],\n            environmentFunc = externalEnvironment[propName];\n        if (environmentFunc) {\n            this[propName] = environmentFunc.bind(externalEnvironment);\n        } else if (i < requiredFunctions.length) {\n            this.warn('missing required function in environment - ' + propName);\n        }\n    }\n};\n\nenvironment.prototype.getFileManager = function (filename, currentDirectory, options, environment, isSync) {\n\n    if (!filename) {\n        logger.warn('getFileManager called with no filename.. Please report this issue. continuing.');\n    }\n    if (currentDirectory == null) {\n        logger.warn('getFileManager called with null directory.. Please report this issue. continuing.');\n    }\n\n    var fileManagers = this.fileManagers;\n    if (options.pluginManager) {\n        fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());\n    }\n    for (var i = fileManagers.length - 1; i >= 0 ; i--) {\n        var fileManager = fileManagers[i];\n        if (fileManager[isSync ? 'supportsSync' : 'supports'](filename, currentDirectory, options, environment)) {\n            return fileManager;\n        }\n    }\n    return null;\n};\n\nenvironment.prototype.addFileManager = function (fileManager) {\n    this.fileManagers.push(fileManager);\n};\n\nenvironment.prototype.clearFileManagers = function () {\n    this.fileManagers = [];\n};\n\nmodule.exports = environment;\n\n},{\"../logger\":39}],21:[function(require,module,exports){\n\nvar functionRegistry = require('./function-registry'),\n    Anonymous = require('../tree/anonymous'),\n    Keyword = require('../tree/keyword');\n\nfunctionRegistry.addMultiple({\n    boolean: function(condition) {\n        return condition ? Keyword.True : Keyword.False;\n    },\n\n    'if': function(condition, trueValue, falseValue) {\n        return condition ? trueValue\n            : (falseValue || new Anonymous);\n    }\n});\n\n},{\"../tree/anonymous\":50,\"../tree/keyword\":70,\"./function-registry\":27}],22:[function(require,module,exports){\nvar Color = require('../tree/color'),\n    functionRegistry = require('./function-registry');\n\n// Color Blending\n// ref: http://www.w3.org/TR/compositing-1\n\nfunction colorBlend(mode, color1, color2) {\n    var ab = color1.alpha, cb, // backdrop\n        as = color2.alpha, cs, // source\n        ar, cr, r = [];        // result\n\n    ar = as + ab * (1 - as);\n    for (var i = 0; i < 3; i++) {\n        cb = color1.rgb[i] / 255;\n        cs = color2.rgb[i] / 255;\n        cr = mode(cb, cs);\n        if (ar) {\n            cr = (as * cs + ab * (cb -\n                  as * (cb + cs - cr))) / ar;\n        }\n        r[i] = cr * 255;\n    }\n\n    return new Color(r, ar);\n}\n\nvar colorBlendModeFunctions = {\n    multiply: function(cb, cs) {\n        return cb * cs;\n    },\n    screen: function(cb, cs) {\n        return cb + cs - cb * cs;\n    },\n    overlay: function(cb, cs) {\n        cb *= 2;\n        return (cb <= 1) ?\n            colorBlendModeFunctions.multiply(cb, cs) :\n            colorBlendModeFunctions.screen(cb - 1, cs);\n    },\n    softlight: function(cb, cs) {\n        var d = 1, e = cb;\n        if (cs > 0.5) {\n            e = 1;\n            d = (cb > 0.25) ? Math.sqrt(cb)\n                : ((16 * cb - 12) * cb + 4) * cb;\n        }\n        return cb - (1 - 2 * cs) * e * (d - cb);\n    },\n    hardlight: function(cb, cs) {\n        return colorBlendModeFunctions.overlay(cs, cb);\n    },\n    difference: function(cb, cs) {\n        return Math.abs(cb - cs);\n    },\n    exclusion: function(cb, cs) {\n        return cb + cs - 2 * cb * cs;\n    },\n\n    // non-w3c functions:\n    average: function(cb, cs) {\n        return (cb + cs) / 2;\n    },\n    negation: function(cb, cs) {\n        return 1 - Math.abs(cb + cs - 1);\n    }\n};\n\nfor (var f in colorBlendModeFunctions) {\n    if (colorBlendModeFunctions.hasOwnProperty(f)) {\n        colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);\n    }\n}\n\nfunctionRegistry.addMultiple(colorBlend);\n\n},{\"../tree/color\":55,\"./function-registry\":27}],23:[function(require,module,exports){\nvar Dimension = require('../tree/dimension'),\n    Color = require('../tree/color'),\n    Quoted = require('../tree/quoted'),\n    Anonymous = require('../tree/anonymous'),\n    functionRegistry = require('./function-registry'),\n    colorFunctions;\n\nfunction clamp(val) {\n    return Math.min(1, Math.max(0, val));\n}\nfunction hsla(origColor, hsl) {\n    var color = colorFunctions.hsla(hsl.h, hsl.s, hsl.l, hsl.a);\n    if (color) {\n        if (origColor.value && \n            /^(rgb|hsl)/.test(origColor.value)) {\n            color.value = origColor.value;\n        } else {\n            color.value = 'rgb';\n        }\n        return color;\n    }\n}\nfunction number(n) {\n    if (n instanceof Dimension) {\n        return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);\n    } else if (typeof n === 'number') {\n        return n;\n    } else {\n        throw {\n            type: 'Argument',\n            message: 'color functions take numbers as parameters'\n        };\n    }\n}\nfunction scaled(n, size) {\n    if (n instanceof Dimension && n.unit.is('%')) {\n        return parseFloat(n.value * size / 100);\n    } else {\n        return number(n);\n    }\n}\ncolorFunctions = {\n    rgb: function (r, g, b) {\n        var color = colorFunctions.rgba(r, g, b, 1.0);\n        if (color) {\n            color.value = 'rgb';\n            return color;\n        }\n    },\n    rgba: function (r, g, b, a) {\n        try {\n            if (r instanceof Color) {\n                if (g) {\n                    a = number(g);\n                } else {\n                    a = r.alpha;\n                }\n                return new Color(r.rgb, a, 'rgba');\n            }\n            var rgb = [r, g, b].map(function (c) { return scaled(c, 255); });\n            a = number(a);\n            return new Color(rgb, a, 'rgba');\n        }\n        catch (e) {}\n    },\n    hsl: function (h, s, l) {\n        var color = colorFunctions.hsla(h, s, l, 1.0);\n        if (color) {\n            color.value = 'hsl';\n            return color;\n        }\n    },\n    hsla: function (h, s, l, a) {\n        try {\n            if (h instanceof Color) {\n                if (s) {\n                    a = number(s);\n                } else {\n                    a = h.alpha;\n                }\n                return new Color(h.rgb, a, 'hsla');\n            }\n\n            var m1, m2;\n\n            function hue(h) {\n                h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\n                if (h * 6 < 1) {\n                    return m1 + (m2 - m1) * h * 6;\n                }\n                else if (h * 2 < 1) {\n                    return m2;\n                }\n                else if (h * 3 < 2) {\n                    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n                }\n                else {\n                    return m1;\n                }\n            }\n\n            h = (number(h) % 360) / 360;\n            s = clamp(number(s)); l = clamp(number(l)); a = clamp(number(a));\n\n            m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n            m1 = l * 2 - m2;\n\n            var rgb = [\n                hue(h + 1 / 3) * 255,\n                hue(h)       * 255,\n                hue(h - 1 / 3) * 255\n            ];\n            a = number(a);\n            return new Color(rgb, a, 'hsla');\n        }\n        catch (e) {}\n    },\n\n    hsv: function(h, s, v) {\n        return colorFunctions.hsva(h, s, v, 1.0);\n    },\n\n    hsva: function(h, s, v, a) {\n        h = ((number(h) % 360) / 360) * 360;\n        s = number(s); v = number(v); a = number(a);\n\n        var i, f;\n        i = Math.floor((h / 60) % 6);\n        f = (h / 60) - i;\n\n        var vs = [v,\n            v * (1 - s),\n            v * (1 - f * s),\n            v * (1 - (1 - f) * s)];\n        var perm = [[0, 3, 1],\n            [2, 0, 1],\n            [1, 0, 3],\n            [1, 2, 0],\n            [3, 1, 0],\n            [0, 1, 2]];\n\n        return colorFunctions.rgba(vs[perm[i][0]] * 255,\n            vs[perm[i][1]] * 255,\n            vs[perm[i][2]] * 255,\n            a);\n    },\n\n    hue: function (color) {\n        return new Dimension(color.toHSL().h);\n    },\n    saturation: function (color) {\n        return new Dimension(color.toHSL().s * 100, '%');\n    },\n    lightness: function (color) {\n        return new Dimension(color.toHSL().l * 100, '%');\n    },\n    hsvhue: function(color) {\n        return new Dimension(color.toHSV().h);\n    },\n    hsvsaturation: function (color) {\n        return new Dimension(color.toHSV().s * 100, '%');\n    },\n    hsvvalue: function (color) {\n        return new Dimension(color.toHSV().v * 100, '%');\n    },\n    red: function (color) {\n        return new Dimension(color.rgb[0]);\n    },\n    green: function (color) {\n        return new Dimension(color.rgb[1]);\n    },\n    blue: function (color) {\n        return new Dimension(color.rgb[2]);\n    },\n    alpha: function (color) {\n        return new Dimension(color.toHSL().a);\n    },\n    luma: function (color) {\n        return new Dimension(color.luma() * color.alpha * 100, '%');\n    },\n    luminance: function (color) {\n        var luminance =\n            (0.2126 * color.rgb[0] / 255) +\n                (0.7152 * color.rgb[1] / 255) +\n                (0.0722 * color.rgb[2] / 255);\n\n        return new Dimension(luminance * color.alpha * 100, '%');\n    },\n    saturate: function (color, amount, method) {\n        // filter: saturate(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s +=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s += amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    desaturate: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s -=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s -= amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    lighten: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l +=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l += amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    darken: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l -=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l -= amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    fadein: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a +=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a += amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fadeout: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a -=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a -= amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fade: function (color, amount) {\n        var hsl = color.toHSL();\n\n        hsl.a = amount.value / 100;\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    spin: function (color, amount) {\n        var hsl = color.toHSL();\n        var hue = (hsl.h + amount.value) % 360;\n\n        hsl.h = hue < 0 ? 360 + hue : hue;\n\n        return hsla(color, hsl);\n    },\n    //\n    // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\n    // http://sass-lang.com\n    //\n    mix: function (color1, color2, weight) {\n        if (!color1.toHSL || !color2.toHSL) {\n            console.log(color2.type);\n            console.dir(color2);\n        }\n        if (!weight) {\n            weight = new Dimension(50);\n        }\n        var p = weight.value / 100.0;\n        var w = p * 2 - 1;\n        var a = color1.toHSL().a - color2.toHSL().a;\n\n        var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        var w2 = 1 - w1;\n\n        var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n            color1.rgb[1] * w1 + color2.rgb[1] * w2,\n            color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\n        var alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new Color(rgb, alpha);\n    },\n    greyscale: function (color) {\n        return colorFunctions.desaturate(color, new Dimension(100));\n    },\n    contrast: function (color, dark, light, threshold) {\n        // filter: contrast(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        if (typeof light === 'undefined') {\n            light = colorFunctions.rgba(255, 255, 255, 1.0);\n        }\n        if (typeof dark === 'undefined') {\n            dark = colorFunctions.rgba(0, 0, 0, 1.0);\n        }\n        // Figure out which is actually light and dark:\n        if (dark.luma() > light.luma()) {\n            var t = light;\n            light = dark;\n            dark = t;\n        }\n        if (typeof threshold === 'undefined') {\n            threshold = 0.43;\n        } else {\n            threshold = number(threshold);\n        }\n        if (color.luma() < threshold) {\n            return light;\n        } else {\n            return dark;\n        }\n    },\n    // Changes made in 2.7.0 - Reverted in 3.0.0\n    // contrast: function (color, color1, color2, threshold) {\n    //     // Return which of `color1` and `color2` has the greatest contrast with `color`\n    //     // according to the standard WCAG contrast ratio calculation.\n    //     // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n    //     // The threshold param is no longer used, in line with SASS.\n    //     // filter: contrast(3.2);\n    //     // should be kept as is, so check for color\n    //     if (!color.rgb) {\n    //         return null;\n    //     }\n    //     if (typeof color1 === 'undefined') {\n    //         color1 = colorFunctions.rgba(0, 0, 0, 1.0);\n    //     }\n    //     if (typeof color2 === 'undefined') {\n    //         color2 = colorFunctions.rgba(255, 255, 255, 1.0);\n    //     }\n    //     var contrast1, contrast2;\n    //     var luma = color.luma();\n    //     var luma1 = color1.luma();\n    //     var luma2 = color2.luma();\n    //     // Calculate contrast ratios for each color\n    //     if (luma > luma1) {\n    //         contrast1 = (luma + 0.05) / (luma1 + 0.05);\n    //     } else {\n    //         contrast1 = (luma1 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (luma > luma2) {\n    //         contrast2 = (luma + 0.05) / (luma2 + 0.05);\n    //     } else {\n    //         contrast2 = (luma2 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (contrast1 > contrast2) {\n    //         return color1;\n    //     } else {\n    //         return color2;\n    //     }\n    // },\n    argb: function (color) {\n        return new Anonymous(color.toARGB());\n    },\n    color: function(c) {\n        if ((c instanceof Quoted) &&\n            (/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})$/i.test(c.value))) {\n            var val = c.value.slice(1);\n            return new Color(val, undefined, '#' + val);\n        }\n        if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {\n            c.value = undefined;\n            return c;\n        }\n        throw {\n            type:    'Argument',\n            message: 'argument must be a color keyword or 3|4|6|8 digit hex e.g. #FFF'\n        };\n    },\n    tint: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);\n    },\n    shade: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);\n    }\n};\nfunctionRegistry.addMultiple(colorFunctions);\n\n},{\"../tree/anonymous\":50,\"../tree/color\":55,\"../tree/dimension\":62,\"../tree/quoted\":80,\"./function-registry\":27}],24:[function(require,module,exports){\nmodule.exports = function(environment) {\n    var Quoted = require('../tree/quoted'),\n        URL = require('../tree/url'),\n        utils = require('../utils'),\n        functionRegistry = require('./function-registry'),\n        fallback = function(functionThis, node) {\n            return new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context);\n        },\n        logger = require('../logger');\n\n    functionRegistry.add('data-uri', function(mimetypeNode, filePathNode) {\n\n        if (!filePathNode) {\n            filePathNode = mimetypeNode;\n            mimetypeNode = null;\n        }\n\n        var mimetype = mimetypeNode && mimetypeNode.value;\n        var filePath = filePathNode.value;\n        var currentFileInfo = this.currentFileInfo;\n        var currentDirectory = currentFileInfo.rewriteUrls ?\n            currentFileInfo.currentDirectory : currentFileInfo.entryPath;\n\n        var fragmentStart = filePath.indexOf('#');\n        var fragment = '';\n        if (fragmentStart !== -1) {\n            fragment = filePath.slice(fragmentStart);\n            filePath = filePath.slice(0, fragmentStart);\n        }\n        var context = utils.clone(this.context);\n        context.rawBuffer = true;\n\n        var fileManager = environment.getFileManager(filePath, currentDirectory, context, environment, true);\n\n        if (!fileManager) {\n            return fallback(this, filePathNode);\n        }\n\n        var useBase64 = false;\n\n        // detect the mimetype if not given\n        if (!mimetypeNode) {\n\n            mimetype = environment.mimeLookup(filePath);\n\n            if (mimetype === 'image/svg+xml') {\n                useBase64 = false;\n            } else {\n                // use base 64 unless it's an ASCII or UTF-8 format\n                var charset = environment.charsetLookup(mimetype);\n                useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;\n            }\n            if (useBase64) { mimetype += ';base64'; }\n        }\n        else {\n            useBase64 = /;base64$/.test(mimetype);\n        }\n\n        var fileSync = fileManager.loadFileSync(filePath, currentDirectory, context, environment);\n        if (!fileSync.contents) {\n            logger.warn('Skipped data-uri embedding of ' + filePath + ' because file not found');\n            return fallback(this, filePathNode || mimetypeNode);\n        }\n        var buf = fileSync.contents;\n        if (useBase64 && !environment.encodeBase64) {\n            return fallback(this, filePathNode);\n        }\n\n        buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);\n\n        var uri = 'data:' + mimetype + ',' + buf + fragment;\n\n        // IE8 cannot handle a data-uri larger than 32,768 characters. If this is exceeded\n        // and the --ieCompat flag is enabled, return a normal url() instead.\n        var DATA_URI_MAX = 32768;\n        if (uri.length >= DATA_URI_MAX) {\n\n            if (this.context.ieCompat !== false) {\n                logger.warn('Skipped data-uri embedding of ' + filePath + ' because its size (' + uri.length +\n                    ' characters) exceeds IE8-safe ' + DATA_URI_MAX + ' characters!');\n\n                return fallback(this, filePathNode || mimetypeNode);\n            }\n        }\n\n        return new URL(new Quoted('\"' + uri + '\"', uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    });\n};\n\n},{\"../logger\":39,\"../tree/quoted\":80,\"../tree/url\":85,\"../utils\":89,\"./function-registry\":27}],25:[function(require,module,exports){\nvar Keyword = require('../tree/keyword'),\n    functionRegistry = require('./function-registry');\n\nvar defaultFunc = {\n    eval: function () {\n        var v = this.value_, e = this.error_;\n        if (e) {\n            throw e;\n        }\n        if (v != null) {\n            return v ? Keyword.True : Keyword.False;\n        }\n    },\n    value: function (v) {\n        this.value_ = v;\n    },\n    error: function (e) {\n        this.error_ = e;\n    },\n    reset: function () {\n        this.value_ = this.error_ = null;\n    }\n};\n\nfunctionRegistry.add('default', defaultFunc.eval.bind(defaultFunc));\n\nmodule.exports = defaultFunc;\n\n},{\"../tree/keyword\":70,\"./function-registry\":27}],26:[function(require,module,exports){\nvar Expression = require('../tree/expression');\n\nvar functionCaller = function(name, context, index, currentFileInfo) {\n    this.name = name.toLowerCase();\n    this.index = index;\n    this.context = context;\n    this.currentFileInfo = currentFileInfo;\n\n    this.func = context.frames[0].functionRegistry.get(this.name);\n};\nfunctionCaller.prototype.isValid = function() {\n    return Boolean(this.func);\n};\n\nfunctionCaller.prototype.call = function(args) {\n    // This code is terrible and should be replaced as per this issue...\n    // https://github.com/less/less.js/issues/2477\n    if (Array.isArray(args)) {\n        args = args.filter(function (item) {\n            if (item.type === 'Comment') {\n                return false;\n            }\n            return true;\n        })\n        .map(function(item) {\n            if (item.type === 'Expression') {\n                var subNodes = item.value.filter(function (item) {\n                    if (item.type === 'Comment') {\n                        return false;\n                    }\n                    return true;\n                });\n                if (subNodes.length === 1) {\n                    return subNodes[0];\n                } else {\n                    return new Expression(subNodes);\n                }\n            }\n            return item;\n        });\n    }\n\n    return this.func.apply(this, args);\n};\n\nmodule.exports = functionCaller;\n\n},{\"../tree/expression\":64}],27:[function(require,module,exports){\nfunction makeRegistry( base ) {\n    return {\n        _data: {},\n        add: function(name, func) {\n            // precautionary case conversion, as later querying of\n            // the registry by function-caller uses lower case as well.\n            name = name.toLowerCase();\n\n            if (this._data.hasOwnProperty(name)) {\n                // TODO warn\n            }\n            this._data[name] = func;\n        },\n        addMultiple: function(functions) {\n            Object.keys(functions).forEach(\n                function(name) {\n                    this.add(name, functions[name]);\n                }.bind(this));\n        },\n        get: function(name) {\n            return this._data[name] || ( base && base.get( name ));\n        },\n        getLocalFunctions: function() {\n            return this._data;\n        },\n        inherit: function() {\n            return makeRegistry( this );\n        },\n        create: function(base) {\n            return makeRegistry(base);\n        }\n    };\n}\n\nmodule.exports = makeRegistry( null );\n},{}],28:[function(require,module,exports){\nmodule.exports = function(environment) {\n    var functions = {\n        functionRegistry: require('./function-registry'),\n        functionCaller: require('./function-caller')\n    };\n\n    // register functions\n    require('./boolean');\n    require('./default');\n    require('./color');\n    require('./color-blending');\n    require('./data-uri')(environment);\n    require('./list');\n    require('./math');\n    require('./number');\n    require('./string');\n    require('./svg')(environment);\n    require('./types');\n\n    return functions;\n};\n\n},{\"./boolean\":21,\"./color\":23,\"./color-blending\":22,\"./data-uri\":24,\"./default\":25,\"./function-caller\":26,\"./function-registry\":27,\"./list\":29,\"./math\":31,\"./number\":32,\"./string\":33,\"./svg\":34,\"./types\":35}],29:[function(require,module,exports){\nvar Comment = require('../tree/comment'),\n    Dimension = require('../tree/dimension'),\n    Declaration = require('../tree/declaration'),\n    Expression = require('../tree/expression'),\n    Ruleset = require('../tree/ruleset'),\n    Selector = require('../tree/selector'),\n    Element = require('../tree/element'),\n    functionRegistry = require('./function-registry');\n\nvar getItemsFromNode = function(node) {\n    // handle non-array values as an array of length 1\n    // return 'undefined' if index is invalid\n    var items = Array.isArray(node.value) ?\n        node.value : Array(node);\n\n    return items;\n};\n\nfunctionRegistry.addMultiple({\n    _SELF: function(n) {\n        return n;\n    },\n    extract: function(values, index) {\n        index = index.value - 1; // (1-based index)\n\n        return getItemsFromNode(values)[index];\n    },\n    length: function(values) {\n        return new Dimension(getItemsFromNode(values).length);\n    },\n    /**\n     * Creates a Less list of incremental values.\n     * Modeled after Lodash's range function, also exists natively in PHP\n     * \n     * @param {Dimension} [start=1]\n     * @param {Dimension} end  - e.g. 10 or 10px - unit is added to output\n     * @param {Dimension} [step=1] \n     */\n    range: function(start, end, step) {\n        var from, to, stepValue = 1, list = [];\n        if (end) {\n            to = end;\n            from = start.value;\n            if (step) {\n                stepValue = step.value;\n            }\n        }\n        else {\n            from = 1;\n            to = start;\n        }\n\n        for (var i = from; i <= to.value; i += stepValue) {\n            list.push(new Dimension(i, to.unit));\n        }\n\n        return new Expression(list);\n    },\n    each: function(list, rs) {\n        var rules = [], newRules, iterator;\n\n        if (list.value) {\n            if (Array.isArray(list.value)) {\n                iterator = list.value;\n            } else {\n                iterator = [list.value];\n            }\n        } else if (list.ruleset) {\n            iterator = list.ruleset.rules;\n        } else if (list.rules) {\n            iterator = list.rules;\n        } else if (Array.isArray(list)) {\n            iterator = list;\n        } else {\n            iterator = [list];\n        }\n\n        var valueName = '@value',\n            keyName = '@key',\n            indexName = '@index';\n\n        if (rs.params) {\n            valueName = rs.params[0] && rs.params[0].name;\n            keyName = rs.params[1] && rs.params[1].name;\n            indexName = rs.params[2] && rs.params[2].name;\n            rs = rs.rules;\n        } else {\n            rs = rs.ruleset;\n        }\n\n        for (var i = 0; i < iterator.length; i++) {\n            var key, value, item = iterator[i];\n            if (item instanceof Declaration) {\n                key = typeof item.name === 'string' ? item.name : item.name[0].value;\n                value = item.value;\n            } else {\n                key = new Dimension(i + 1);\n                value = item;\n            }\n            \n            if (item instanceof Comment) {\n                continue;\n            }\n\n            newRules = rs.rules.slice(0);\n            if (valueName) {\n                newRules.push(new Declaration(valueName,\n                    value,\n                    false, false, this.index, this.currentFileInfo));\n            }\n            if (indexName) {\n                newRules.push(new Declaration(indexName,\n                    new Dimension(i + 1),\n                    false, false, this.index, this.currentFileInfo));\n            }\n            if (keyName) {\n                newRules.push(new Declaration(keyName,\n                    key,\n                    false, false, this.index, this.currentFileInfo));\n            }\n        \n            rules.push(new Ruleset([ new(Selector)([ new Element(\"\", '&') ]) ],\n                newRules,\n                rs.strictImports,\n                rs.visibilityInfo()\n            ));\n        }\n\n        return new Ruleset([ new(Selector)([ new Element(\"\", '&') ]) ],\n                rules,\n                rs.strictImports,\n                rs.visibilityInfo()\n            ).eval(this.context);\n\n    }\n});\n\n},{\"../tree/comment\":57,\"../tree/declaration\":60,\"../tree/dimension\":62,\"../tree/element\":63,\"../tree/expression\":64,\"../tree/ruleset\":81,\"../tree/selector\":82,\"./function-registry\":27}],30:[function(require,module,exports){\nvar Dimension = require('../tree/dimension');\n\nvar MathHelper = function() {\n};\nMathHelper._math = function (fn, unit, n) {\n    if (!(n instanceof Dimension)) {\n        throw { type: 'Argument', message: 'argument must be a number' };\n    }\n    if (unit == null) {\n        unit = n.unit;\n    } else {\n        n = n.unify();\n    }\n    return new Dimension(fn(parseFloat(n.value)), unit);\n};\nmodule.exports = MathHelper;\n},{\"../tree/dimension\":62}],31:[function(require,module,exports){\nvar functionRegistry = require('./function-registry'),\n    mathHelper = require('./math-helper.js');\n\nvar mathFunctions = {\n    // name,  unit\n    ceil:  null,\n    floor: null,\n    sqrt:  null,\n    abs:   null,\n    tan:   '',\n    sin:   '',\n    cos:   '',\n    atan:  'rad',\n    asin:  'rad',\n    acos:  'rad'\n};\n\nfor (var f in mathFunctions) {\n    if (mathFunctions.hasOwnProperty(f)) {\n        mathFunctions[f] = mathHelper._math.bind(null, Math[f], mathFunctions[f]);\n    }\n}\n\nmathFunctions.round = function (n, f) {\n    var fraction = typeof f === 'undefined' ? 0 : f.value;\n    return mathHelper._math(function(num) { return num.toFixed(fraction); }, null, n);\n};\n\nfunctionRegistry.addMultiple(mathFunctions);\n\n},{\"./function-registry\":27,\"./math-helper.js\":30}],32:[function(require,module,exports){\nvar Dimension = require('../tree/dimension'),\n    Anonymous = require('../tree/anonymous'),\n    functionRegistry = require('./function-registry'),\n    mathHelper = require('./math-helper.js');\n\nvar minMax = function (isMin, args) {\n    args = Array.prototype.slice.call(args);\n    switch (args.length) {\n        case 0: throw { type: 'Argument', message: 'one or more arguments required' };\n    }\n    var i, j, current, currentUnified, referenceUnified, unit, unitStatic, unitClone,\n        order  = [], // elems only contains original argument values.\n        values = {}; // key is the unit.toString() for unified Dimension values,\n    // value is the index into the order array.\n    for (i = 0; i < args.length; i++) {\n        current = args[i];\n        if (!(current instanceof Dimension)) {\n            if (Array.isArray(args[i].value)) {\n                Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));\n            }\n            continue;\n        }\n        currentUnified = current.unit.toString() === '' && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();\n        unit = currentUnified.unit.toString() === '' && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();\n        unitStatic = unit !== '' && unitStatic === undefined || unit !== '' && order[0].unify().unit.toString() === '' ? unit : unitStatic;\n        unitClone = unit !== '' && unitClone === undefined ? current.unit.toString() : unitClone;\n        j = values[''] !== undefined && unit !== '' && unit === unitStatic ? values[''] : values[unit];\n        if (j === undefined) {\n            if (unitStatic !== undefined && unit !== unitStatic) {\n                throw { type: 'Argument', message: 'incompatible types' };\n            }\n            values[unit] = order.length;\n            order.push(current);\n            continue;\n        }\n        referenceUnified = order[j].unit.toString() === '' && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();\n        if ( isMin && currentUnified.value < referenceUnified.value ||\n            !isMin && currentUnified.value > referenceUnified.value) {\n            order[j] = current;\n        }\n    }\n    if (order.length == 1) {\n        return order[0];\n    }\n    args = order.map(function (a) { return a.toCSS(this.context); }).join(this.context.compress ? ',' : ', ');\n    return new Anonymous((isMin ? 'min' : 'max') + '(' + args + ')');\n};\nfunctionRegistry.addMultiple({\n    min: function () {\n        return minMax(true, arguments);\n    },\n    max: function () {\n        return minMax(false, arguments);\n    },\n    convert: function (val, unit) {\n        return val.convertTo(unit.value);\n    },\n    pi: function () {\n        return new Dimension(Math.PI);\n    },\n    mod: function(a, b) {\n        return new Dimension(a.value % b.value, a.unit);\n    },\n    pow: function(x, y) {\n        if (typeof x === 'number' && typeof y === 'number') {\n            x = new Dimension(x);\n            y = new Dimension(y);\n        } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\n            throw { type: 'Argument', message: 'arguments must be numbers' };\n        }\n\n        return new Dimension(Math.pow(x.value, y.value), x.unit);\n    },\n    percentage: function (n) {\n        var result = mathHelper._math(function(num) {\n            return num * 100;\n        }, '%', n);\n\n        return result;\n    }\n});\n\n},{\"../tree/anonymous\":50,\"../tree/dimension\":62,\"./function-registry\":27,\"./math-helper.js\":30}],33:[function(require,module,exports){\nvar Quoted = require('../tree/quoted'),\n    Anonymous = require('../tree/anonymous'),\n    JavaScript = require('../tree/javascript'),\n    functionRegistry = require('./function-registry');\n\nfunctionRegistry.addMultiple({\n    e: function (str) {\n        return new Anonymous(str instanceof JavaScript ? str.evaluated : str.value);\n    },\n    escape: function (str) {\n        return new Anonymous(\n            encodeURI(str.value).replace(/=/g, '%3D').replace(/:/g, '%3A').replace(/#/g, '%23').replace(/;/g, '%3B')\n                .replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\n    },\n    replace: function (string, pattern, replacement, flags) {\n        var result = string.value;\n        replacement = (replacement.type === 'Quoted') ?\n            replacement.value : replacement.toCSS();\n        result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);\n        return new Quoted(string.quote || '', result, string.escaped);\n    },\n    '%': function (string /* arg, arg, ... */) {\n        var args = Array.prototype.slice.call(arguments, 1),\n            result = string.value;\n\n        for (var i = 0; i < args.length; i++) {\n            /* jshint loopfunc:true */\n            result = result.replace(/%[sda]/i, function(token) {\n                var value = ((args[i].type === 'Quoted') &&\n                    token.match(/s/i)) ? args[i].value : args[i].toCSS();\n                return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\n            });\n        }\n        result = result.replace(/%%/g, '%');\n        return new Quoted(string.quote || '', result, string.escaped);\n    }\n});\n\n},{\"../tree/anonymous\":50,\"../tree/javascript\":68,\"../tree/quoted\":80,\"./function-registry\":27}],34:[function(require,module,exports){\nmodule.exports = function(environment) {\n    var Dimension = require('../tree/dimension'),\n        Color = require('../tree/color'),\n        Expression = require('../tree/expression'),\n        Quoted = require('../tree/quoted'),\n        URL = require('../tree/url'),\n        functionRegistry = require('./function-registry');\n\n    functionRegistry.add('svg-gradient', function(direction) {\n\n        var stops,\n            gradientDirectionSvg,\n            gradientType = 'linear',\n            rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"',\n            renderEnv = {compress: false},\n            returner,\n            directionValue = direction.toCSS(renderEnv),\n            i, color, position, positionValue, alpha;\n\n        function throwArgumentDescriptor() {\n            throw { type: 'Argument',\n                message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' +\n                            ' end_color [end_position] or direction, color list' };\n        }\n\n        if (arguments.length == 2) {\n            if (arguments[1].value.length < 2) {\n                throwArgumentDescriptor();\n            }\n            stops = arguments[1].value;\n        } else if (arguments.length < 3) {\n            throwArgumentDescriptor();\n        } else {\n            stops = Array.prototype.slice.call(arguments, 1);\n        }\n\n        switch (directionValue) {\n            case 'to bottom':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\n                break;\n            case 'to right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case 'to bottom right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\n                break;\n            case 'to top right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case 'ellipse':\n            case 'ellipse at center':\n                gradientType = 'radial';\n                gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\n                rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\n                break;\n            default:\n                throw { type: 'Argument', message: 'svg-gradient direction must be \\'to bottom\\', \\'to right\\',' +\n                    ' \\'to bottom right\\', \\'to top right\\' or \\'ellipse at center\\'' };\n        }\n        returner = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1 1\">' +\n            '<' + gradientType + 'Gradient id=\"g\" ' + gradientDirectionSvg + '>';\n\n        for (i = 0; i < stops.length; i += 1) {\n            if (stops[i] instanceof Expression) {\n                color = stops[i].value[0];\n                position = stops[i].value[1];\n            } else {\n                color = stops[i];\n                position = undefined;\n            }\n\n            if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {\n                throwArgumentDescriptor();\n            }\n            positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';\n            alpha = color.alpha;\n            returner += '<stop offset=\"' + positionValue + '\" stop-color=\"' + color.toRGB() + '\"' + (alpha < 1 ? ' stop-opacity=\"' + alpha + '\"' : '') + '/>';\n        }\n        returner += '</' + gradientType + 'Gradient>' +\n            '<rect ' + rectangleDimension + ' fill=\"url(#g)\" /></svg>';\n\n        returner = encodeURIComponent(returner);\n\n        returner = 'data:image/svg+xml,' + returner;\n        return new URL(new Quoted('\\'' + returner + '\\'', returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    });\n};\n\n},{\"../tree/color\":55,\"../tree/dimension\":62,\"../tree/expression\":64,\"../tree/quoted\":80,\"../tree/url\":85,\"./function-registry\":27}],35:[function(require,module,exports){\nvar Keyword = require('../tree/keyword'),\n    DetachedRuleset = require('../tree/detached-ruleset'),\n    Dimension = require('../tree/dimension'),\n    Color = require('../tree/color'),\n    Quoted = require('../tree/quoted'),\n    Anonymous = require('../tree/anonymous'),\n    URL = require('../tree/url'),\n    Operation = require('../tree/operation'),\n    functionRegistry = require('./function-registry');\n\nvar isa = function (n, Type) {\n        return (n instanceof Type) ? Keyword.True : Keyword.False;\n    },\n    isunit = function (n, unit) {\n        if (unit === undefined) {\n            throw { type: 'Argument', message: 'missing the required second argument to isunit.' };\n        }\n        unit = typeof unit.value === 'string' ? unit.value : unit;\n        if (typeof unit !== 'string') {\n            throw { type: 'Argument', message: 'Second argument to isunit should be a unit or a string.' };\n        }\n        return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;\n    };\n\nfunctionRegistry.addMultiple({\n    isruleset: function (n) {\n        return isa(n, DetachedRuleset);\n    },\n    iscolor: function (n) {\n        return isa(n, Color);\n    },\n    isnumber: function (n) {\n        return isa(n, Dimension);\n    },\n    isstring: function (n) {\n        return isa(n, Quoted);\n    },\n    iskeyword: function (n) {\n        return isa(n, Keyword);\n    },\n    isurl: function (n) {\n        return isa(n, URL);\n    },\n    ispixel: function (n) {\n        return isunit(n, 'px');\n    },\n    ispercentage: function (n) {\n        return isunit(n, '%');\n    },\n    isem: function (n) {\n        return isunit(n, 'em');\n    },\n    isunit: isunit,\n    unit: function (val, unit) {\n        if (!(val instanceof Dimension)) {\n            throw { type: 'Argument',\n                message: 'the first argument to unit must be a number' +\n                    (val instanceof Operation ? '. Have you forgotten parenthesis?' : '') };\n        }\n        if (unit) {\n            if (unit instanceof Keyword) {\n                unit = unit.value;\n            } else {\n                unit = unit.toCSS();\n            }\n        } else {\n            unit = '';\n        }\n        return new Dimension(val.value, unit);\n    },\n    'get-unit': function (n) {\n        return new Anonymous(n.unit);\n    }\n});\n\n},{\"../tree/anonymous\":50,\"../tree/color\":55,\"../tree/detached-ruleset\":61,\"../tree/dimension\":62,\"../tree/keyword\":70,\"../tree/operation\":77,\"../tree/quoted\":80,\"../tree/url\":85,\"./function-registry\":27}],36:[function(require,module,exports){\nvar contexts = require('./contexts'),\n    Parser = require('./parser/parser'),\n    LessError = require('./less-error'),\n    utils = require('./utils'),\n    PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise,\n    logger = require('./logger');\n\nmodule.exports = function(environment) {\n\n    // FileInfo = {\n    //  'rewriteUrls' - option - whether to adjust URL's to be relative\n    //  'filename' - full resolved filename of current file\n    //  'rootpath' - path to append to normal URLs for this node\n    //  'currentDirectory' - path to the current file, absolute\n    //  'rootFilename' - filename of the base file\n    //  'entryPath' - absolute path to the entry file\n    //  'reference' - whether the file should not be output and only output parts that are referenced\n\n    var ImportManager = function(less, context, rootFileInfo) {\n        this.less = less;\n        this.rootFilename = rootFileInfo.filename;\n        this.paths = context.paths || [];  // Search paths, when importing\n        this.contents = {};             // map - filename to contents of all the files\n        this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\n        this.mime = context.mime;\n        this.error = null;\n        this.context = context;\n        // Deprecated? Unused outside of here, could be useful.\n        this.queue = [];        // Files which haven't been imported yet\n        this.files = {};        // Holds the imported parse trees.\n    };\n\n    /**\n     * Add an import to be imported\n     * @param path - the raw path\n     * @param tryAppendExtension - whether to try appending a file extension (.less or .js if the path has no extension)\n     * @param currentFileInfo - the current file info (used for instance to work out relative paths)\n     * @param importOptions - import options\n     * @param callback - callback for when it is imported\n     */\n    ImportManager.prototype.push = function (path, tryAppendExtension, currentFileInfo, importOptions, callback) {\n        var importManager = this,\n            pluginLoader = this.context.pluginManager.Loader;\n\n        this.queue.push(path);\n\n        var fileParsedFunc = function (e, root, fullPath) {\n            importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\n\n            var importedEqualsRoot = fullPath === importManager.rootFilename;\n            if (importOptions.optional && e) {\n                callback(null, {rules:[]}, false, null);\n                logger.info('The file ' + fullPath + ' was skipped because it was not found and the import was marked optional.');\n            }\n            else {\n                // Inline imports aren't cached here.\n                // If we start to cache them, please make sure they won't conflict with non-inline imports of the\n                // same name as they used to do before this comment and the condition below have been added.\n                if (!importManager.files[fullPath] && !importOptions.inline) {\n                    importManager.files[fullPath] = { root: root, options: importOptions };\n                }\n                if (e && !importManager.error) { importManager.error = e; }\n                callback(e, root, importedEqualsRoot, fullPath);\n            }\n        };\n\n        var newFileInfo = {\n            rewriteUrls: this.context.rewriteUrls,\n            entryPath: currentFileInfo.entryPath,\n            rootpath: currentFileInfo.rootpath,\n            rootFilename: currentFileInfo.rootFilename\n        };\n\n        var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\n\n        if (!fileManager) {\n            fileParsedFunc({ message: 'Could not find a file-manager for ' + path });\n            return;\n        }\n\n        var loadFileCallback = function(loadedFile) {\n            var plugin,\n                resolvedFilename = loadedFile.filename,\n                contents = loadedFile.contents.replace(/^\\uFEFF/, '');\n\n            // Pass on an updated rootpath if path of imported file is relative and file\n            // is in a (sub|sup) directory\n            //\n            // Examples:\n            // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\n            //   then rootpath should become 'less/module/nav/'\n            // - If path of imported file is '../mixins.less' and rootpath is 'less/',\n            //   then rootpath should become 'less/../'\n            newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\n            if (newFileInfo.rewriteUrls) {\n                newFileInfo.rootpath = fileManager.join(\n                    (importManager.context.rootpath || ''),\n                    fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\n\n                if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\n                    newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\n                }\n            }\n            newFileInfo.filename = resolvedFilename;\n\n            var newEnv = new contexts.Parse(importManager.context);\n\n            newEnv.processImports = false;\n            importManager.contents[resolvedFilename] = contents;\n\n            if (currentFileInfo.reference || importOptions.reference) {\n                newFileInfo.reference = true;\n            }\n\n            if (importOptions.isPlugin) {\n                plugin = pluginLoader.evalPlugin(contents, newEnv, importManager, importOptions.pluginArgs, newFileInfo);\n                if (plugin instanceof LessError) {\n                    fileParsedFunc(plugin, null, resolvedFilename);\n                }\n                else {\n                    fileParsedFunc(null, plugin, resolvedFilename);\n                }\n            } else if (importOptions.inline) {\n                fileParsedFunc(null, contents, resolvedFilename);\n            } else {\n\n                // import (multiple) parse trees apparently get altered and can't be cached.\n                // TODO: investigate why this is\n                if (importManager.files[resolvedFilename]\n                    && !importManager.files[resolvedFilename].options.multiple\n                    && !importOptions.multiple) {\n\n                    fileParsedFunc(null, importManager.files[resolvedFilename].root, resolvedFilename);\n                }\n                else {\n                    new Parser(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {\n                        fileParsedFunc(e, root, resolvedFilename);\n                    });\n                }\n            }\n        };\n        var promise, context = utils.clone(this.context);\n\n        if (tryAppendExtension) {\n            context.ext = importOptions.isPlugin ? '.js' : '.less';\n        }\n\n        if (importOptions.isPlugin) {\n            promise = pluginLoader.loadPlugin(path, currentFileInfo.currentDirectory, context, environment, fileManager);\n        }\n        else {\n            promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, context, environment,\n                function(err, loadedFile) {\n                    if (err) {\n                        fileParsedFunc(err);\n                    } else {\n                        loadFileCallback(loadedFile);\n                    }\n                });\n        }\n        if (promise) {\n            promise.then(loadFileCallback, fileParsedFunc);\n        }\n\n    };\n    return ImportManager;\n};\n\n},{\"./contexts\":13,\"./less-error\":38,\"./logger\":39,\"./parser/parser\":44,\"./utils\":89,\"promise\":undefined}],37:[function(require,module,exports){\nmodule.exports = function(environment, fileManagers) {\n    var SourceMapOutput, SourceMapBuilder, ParseTree, ImportManager, Environment;\n\n    var initial = {\n        version: [3, 9, 0],\n        data: require('./data'),\n        tree: require('./tree'),\n        Environment: (Environment = require('./environment/environment')),\n        AbstractFileManager: require('./environment/abstract-file-manager'),\n        AbstractPluginLoader: require('./environment/abstract-plugin-loader'),\n        environment: (environment = new Environment(environment, fileManagers)),\n        visitors: require('./visitors'),\n        Parser: require('./parser/parser'),\n        functions: require('./functions')(environment),\n        contexts: require('./contexts'),\n        SourceMapOutput: (SourceMapOutput = require('./source-map-output')(environment)),\n        SourceMapBuilder: (SourceMapBuilder = require('./source-map-builder')(SourceMapOutput, environment)),\n        ParseTree: (ParseTree = require('./parse-tree')(SourceMapBuilder)),\n        ImportManager: (ImportManager = require('./import-manager')(environment)),\n        render: require('./render')(environment, ParseTree, ImportManager),\n        parse: require('./parse')(environment, ParseTree, ImportManager),\n        LessError: require('./less-error'),\n        transformTree: require('./transform-tree'),\n        utils: require('./utils'),\n        PluginManager: require('./plugin-manager'),\n        logger: require('./logger')\n    };\n\n    // Create a public API\n\n    var ctor = function(t) {\n        return function() {\n            var obj = Object.create(t.prototype);\n            t.apply(obj, Array.prototype.slice.call(arguments, 0));\n            return obj;\n        };\n    };\n    var t, api = Object.create(initial);\n    for (var n in initial.tree) {\n        /* eslint guard-for-in: 0 */\n        t = initial.tree[n];\n        if (typeof t === 'function') {\n            api[n.toLowerCase()] = ctor(t);\n        }\n        else {\n            api[n] = Object.create(null);\n            for (var o in t) {\n                /* eslint guard-for-in: 0 */\n                api[n][o.toLowerCase()] = ctor(t[o]);\n            }\n        }\n    }\n\n    return api;\n};\n\n},{\"./contexts\":13,\"./data\":15,\"./environment/abstract-file-manager\":18,\"./environment/abstract-plugin-loader\":19,\"./environment/environment\":20,\"./functions\":28,\"./import-manager\":36,\"./less-error\":38,\"./logger\":39,\"./parse\":41,\"./parse-tree\":40,\"./parser/parser\":44,\"./plugin-manager\":45,\"./render\":46,\"./source-map-builder\":47,\"./source-map-output\":48,\"./transform-tree\":49,\"./tree\":67,\"./utils\":89,\"./visitors\":93}],38:[function(require,module,exports){\nvar utils = require('./utils');\n/**\n * This is a centralized class of any error that could be thrown internally (mostly by the parser).\n * Besides standard .message it keeps some additional data like a path to the file where the error\n * occurred along with line and column numbers.\n *\n * @class\n * @extends Error\n * @type {module.LessError}\n *\n * @prop {string} type\n * @prop {string} filename\n * @prop {number} index\n * @prop {number} line\n * @prop {number} column\n * @prop {number} callLine\n * @prop {number} callExtract\n * @prop {string[]} extract\n *\n * @param {Object} e              - An error object to wrap around or just a descriptive object\n * @param {Object} fileContentMap - An object with file contents in 'contents' property (like importManager) @todo - move to fileManager?\n * @param {string} [currentFilename]\n */\nvar LessError = module.exports = function LessError(e, fileContentMap, currentFilename) {\n    Error.call(this);\n\n    var filename = e.filename || currentFilename;\n\n    this.message = e.message;\n    this.stack = e.stack;\n\n    if (fileContentMap && filename) {\n        var input = fileContentMap.contents[filename],\n            loc = utils.getLocation(e.index, input),\n            line = loc.line,\n            col  = loc.column,\n            callLine = e.call && utils.getLocation(e.call, input).line,\n            lines = input ? input.split('\\n') : '';\n\n        this.type = e.type || 'Syntax';\n        this.filename = filename;\n        this.index = e.index;\n        this.line = typeof line === 'number' ? line + 1 : null;\n        this.column = col;\n\n        if (!this.line && this.stack) {\n            var found = this.stack.match(/(<anonymous>|Function):(\\d+):(\\d+)/);\n\n            if (found) {\n                if (found[2]) {\n                    this.line = parseInt(found[2]) - 2;\n                }\n                if (found[3]) {\n                    this.column = parseInt(found[3]);\n                }\n            }\n        }\n\n        this.callLine = callLine + 1;\n        this.callExtract = lines[callLine];\n\n        this.extract = [\n            lines[this.line - 2],\n            lines[this.line - 1],\n            lines[this.line]\n        ];\n\n    }\n\n};\n\nif (typeof Object.create === 'undefined') {\n    var F = function () {};\n    F.prototype = Error.prototype;\n    LessError.prototype = new F();\n} else {\n    LessError.prototype = Object.create(Error.prototype);\n}\n\nLessError.prototype.constructor = LessError;\n\n/**\n * An overridden version of the default Object.prototype.toString\n * which uses additional information to create a helpful message.\n *\n * @param {Object} options\n * @returns {string}\n */\nLessError.prototype.toString = function(options) {\n    options = options || {};\n\n    var message = '';\n    var extract = this.extract || [];\n    var error = [];\n    var stylize = function (str) { return str; };\n    if (options.stylize) {\n        var type = typeof options.stylize;\n        if (type !== 'function') {\n            throw Error('options.stylize should be a function, got a ' + type + '!');\n        }\n        stylize = options.stylize;\n    }\n\n    if (this.line !== null) {\n        if (typeof extract[0] === 'string') {\n            error.push(stylize((this.line - 1) + ' ' + extract[0], 'grey'));\n        }\n\n        if (typeof extract[1] === 'string') {\n            var errorTxt = this.line + ' ';\n            if (extract[1]) {\n                errorTxt += extract[1].slice(0, this.column) +\n                    stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') +\n                        extract[1].slice(this.column + 1), 'red'), 'inverse');\n            }\n            error.push(errorTxt);\n        }\n\n        if (typeof extract[2] === 'string') {\n            error.push(stylize((this.line + 1) + ' ' + extract[2], 'grey'));\n        }\n        error = error.join('\\n') + stylize('', 'reset') + '\\n';\n    }\n\n    message += stylize(this.type + 'Error: ' + this.message, 'red');\n    if (this.filename) {\n        message += stylize(' in ', 'red') + this.filename;\n    }\n    if (this.line) {\n        message += stylize(' on line ' + this.line + ', column ' + (this.column + 1) + ':', 'grey');\n    }\n\n    message += '\\n' + error;\n\n    if (this.callLine) {\n        message += stylize('from ', 'red') + (this.filename || '') + '/n';\n        message += stylize(this.callLine, 'grey') + ' ' + this.callExtract + '/n';\n    }\n\n    return message;\n};\n\n},{\"./utils\":89}],39:[function(require,module,exports){\nmodule.exports = {\n    error: function(msg) {\n        this._fireEvent('error', msg);\n    },\n    warn: function(msg) {\n        this._fireEvent('warn', msg);\n    },\n    info: function(msg) {\n        this._fireEvent('info', msg);\n    },\n    debug: function(msg) {\n        this._fireEvent('debug', msg);\n    },\n    addListener: function(listener) {\n        this._listeners.push(listener);\n    },\n    removeListener: function(listener) {\n        for (var i = 0; i < this._listeners.length; i++) {\n            if (this._listeners[i] === listener) {\n                this._listeners.splice(i, 1);\n                return;\n            }\n        }\n    },\n    _fireEvent: function(type, msg) {\n        for (var i = 0; i < this._listeners.length; i++) {\n            var logFunction = this._listeners[i][type];\n            if (logFunction) {\n                logFunction(msg);\n            }\n        }\n    },\n    _listeners: []\n};\n\n},{}],40:[function(require,module,exports){\nvar LessError = require('./less-error'),\n    transformTree = require('./transform-tree'),\n    logger = require('./logger');\n\nmodule.exports = function(SourceMapBuilder) {\n    var ParseTree = function(root, imports) {\n        this.root = root;\n        this.imports = imports;\n    };\n\n    ParseTree.prototype.toCSS = function(options) {\n        var evaldRoot, result = {}, sourceMapBuilder;\n        try {\n            evaldRoot = transformTree(this.root, options);\n        } catch (e) {\n            throw new LessError(e, this.imports);\n        }\n\n        try {\n            var compress = Boolean(options.compress);\n            if (compress) {\n                logger.warn('The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');\n            }\n\n            var toCSSOptions = {\n                compress: compress,\n                dumpLineNumbers: options.dumpLineNumbers,\n                strictUnits: Boolean(options.strictUnits),\n                numPrecision: 8};\n\n            if (options.sourceMap) {\n                sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\n                result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\n            } else {\n                result.css = evaldRoot.toCSS(toCSSOptions);\n            }\n        } catch (e) {\n            throw new LessError(e, this.imports);\n        }\n\n        if (options.pluginManager) {\n            var postProcessors = options.pluginManager.getPostProcessors();\n            for (var i = 0; i < postProcessors.length; i++) {\n                result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options: options, imports: this.imports });\n            }\n        }\n        if (options.sourceMap) {\n            result.map = sourceMapBuilder.getExternalSourceMap();\n        }\n\n        result.imports = [];\n        for (var file in this.imports.files) {\n            if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {\n                result.imports.push(file);\n            }\n        }\n        return result;\n    };\n    return ParseTree;\n};\n\n},{\"./less-error\":38,\"./logger\":39,\"./transform-tree\":49}],41:[function(require,module,exports){\nvar PromiseConstructor,\n    contexts = require('./contexts'),\n    Parser = require('./parser/parser'),\n    PluginManager = require('./plugin-manager'),\n    LessError = require('./less-error'),\n    utils = require('./utils');\n\nmodule.exports = function(environment, ParseTree, ImportManager) {\n    var parse = function (input, options, callback) {\n\n        if (typeof options === 'function') {\n            callback = options;\n            options = utils.copyOptions(this.options, {});\n        }\n        else {\n            options = utils.copyOptions(this.options, options || {});\n        }\n\n        if (!callback) {\n            if (!PromiseConstructor) {\n                PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise;\n            }\n            var self = this;\n            return new PromiseConstructor(function (resolve, reject) {\n                parse.call(self, input, options, function(err, output) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            var context,\n                rootFileInfo,\n                pluginManager = new PluginManager(this, !options.reUsePluginManager);\n\n            options.pluginManager = pluginManager;\n\n            context = new contexts.Parse(options);\n\n            if (options.rootFileInfo) {\n                rootFileInfo = options.rootFileInfo;\n            } else {\n                var filename = options.filename || 'input';\n                var entryPath = filename.replace(/[^\\/\\\\]*$/, '');\n                rootFileInfo = {\n                    filename: filename,\n                    rewriteUrls: context.rewriteUrls,\n                    rootpath: context.rootpath || '',\n                    currentDirectory: entryPath,\n                    entryPath: entryPath,\n                    rootFilename: filename\n                };\n                // add in a missing trailing slash\n                if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\n                    rootFileInfo.rootpath += '/';\n                }\n            }\n\n            var imports = new ImportManager(this, context, rootFileInfo);\n            this.importManager = imports;\n\n            // TODO: allow the plugins to be just a list of paths or names\n            // Do an async plugin queue like lessc\n\n            if (options.plugins) {\n                options.plugins.forEach(function(plugin) {\n                    var evalResult, contents;\n                    if (plugin.fileContent) {\n                        contents = plugin.fileContent.replace(/^\\uFEFF/, '');\n                        evalResult = pluginManager.Loader.evalPlugin(contents, context, imports, plugin.options, plugin.filename);\n                        if (evalResult instanceof LessError) {\n                            return callback(evalResult);\n                        }\n                    }\n                    else {\n                        pluginManager.addPlugin(plugin);\n                    }\n                });\n            }\n\n            new Parser(context, imports, rootFileInfo)\n                .parse(input, function (e, root) {\n                    if (e) { return callback(e); }\n                    callback(null, root, imports, options);\n                }, options);\n        }\n    };\n    return parse;\n};\n\n},{\"./contexts\":13,\"./less-error\":38,\"./parser/parser\":44,\"./plugin-manager\":45,\"./utils\":89,\"promise\":undefined}],42:[function(require,module,exports){\n// Split the input into chunks.\nmodule.exports = function (input, fail) {\n    var len = input.length, level = 0, parenLevel = 0,\n        lastOpening, lastOpeningParen, lastMultiComment, lastMultiCommentEndBrace,\n        chunks = [], emitFrom = 0,\n        chunkerCurrentIndex, currentChunkStartIndex, cc, cc2, matched;\n\n    function emitChunk(force) {\n        var len = chunkerCurrentIndex - emitFrom;\n        if (((len < 512) && !force) || !len) {\n            return;\n        }\n        chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\n        emitFrom = chunkerCurrentIndex + 1;\n    }\n\n    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n        cc = input.charCodeAt(chunkerCurrentIndex);\n        if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {\n            // a-z or whitespace\n            continue;\n        }\n\n        switch (cc) {\n            case 40:                        // (\n                parenLevel++;\n                lastOpeningParen = chunkerCurrentIndex;\n                continue;\n            case 41:                        // )\n                if (--parenLevel < 0) {\n                    return fail('missing opening `(`', chunkerCurrentIndex);\n                }\n                continue;\n            case 59:                        // ;\n                if (!parenLevel) { emitChunk(); }\n                continue;\n            case 123:                       // {\n                level++;\n                lastOpening = chunkerCurrentIndex;\n                continue;\n            case 125:                       // }\n                if (--level < 0) {\n                    return fail('missing opening `{`', chunkerCurrentIndex);\n                }\n                if (!level && !parenLevel) { emitChunk(); }\n                continue;\n            case 92:                        // \\\n                if (chunkerCurrentIndex < len - 1) { chunkerCurrentIndex++; continue; }\n                return fail('unescaped `\\\\`', chunkerCurrentIndex);\n            case 34:\n            case 39:\n            case 96:                        // \", ' and `\n                matched = 0;\n                currentChunkStartIndex = chunkerCurrentIndex;\n                for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                    cc2 = input.charCodeAt(chunkerCurrentIndex);\n                    if (cc2 > 96) { continue; }\n                    if (cc2 == cc) { matched = 1; break; }\n                    if (cc2 == 92) {        // \\\n                        if (chunkerCurrentIndex == len - 1) {\n                            return fail('unescaped `\\\\`', chunkerCurrentIndex);\n                        }\n                        chunkerCurrentIndex++;\n                    }\n                }\n                if (matched) { continue; }\n                return fail('unmatched `' + String.fromCharCode(cc) + '`', currentChunkStartIndex);\n            case 47:                        // /, check for comment\n                if (parenLevel || (chunkerCurrentIndex == len - 1)) { continue; }\n                cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\n                if (cc2 == 47) {\n                    // //, find lnfeed\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) { break; }\n                    }\n                } else if (cc2 == 42) {\n                    // /*, find */\n                    lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if (cc2 == 125) { lastMultiCommentEndBrace = chunkerCurrentIndex; }\n                        if (cc2 != 42) { continue; }\n                        if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) { break; }\n                    }\n                    if (chunkerCurrentIndex == len - 1) {\n                        return fail('missing closing `*/`', currentChunkStartIndex);\n                    }\n                    chunkerCurrentIndex++;\n                }\n                continue;\n            case 42:                       // *, check for unmatched */\n                if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {\n                    return fail('unmatched `/*`', chunkerCurrentIndex);\n                }\n                continue;\n        }\n    }\n\n    if (level !== 0) {\n        if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {\n            return fail('missing closing `}` or `*/`', lastOpening);\n        } else {\n            return fail('missing closing `}`', lastOpening);\n        }\n    } else if (parenLevel !== 0) {\n        return fail('missing closing `)`', lastOpeningParen);\n    }\n\n    emitChunk(true);\n    return chunks;\n};\n\n},{}],43:[function(require,module,exports){\nvar chunker = require('./chunker');\n\nmodule.exports = function() {\n    var input,       // Less input string\n        j,           // current chunk\n        saveStack = [],   // holds state for backtracking\n        furthest,    // furthest index the parser has gone to\n        furthestPossibleErrorMessage, // if this is furthest we got to, this is the probably cause\n        chunks,      // chunkified input\n        current,     // current chunk\n        currentPos,  // index of current chunk, in `input`\n        parserInput = {};\n\n    var CHARCODE_SPACE = 32,\n        CHARCODE_TAB = 9,\n        CHARCODE_LF = 10,\n        CHARCODE_CR = 13,\n        CHARCODE_PLUS = 43,\n        CHARCODE_COMMA = 44,\n        CHARCODE_FORWARD_SLASH = 47,\n        CHARCODE_9 = 57;\n\n    function skipWhitespace(length) {\n        var oldi = parserInput.i, oldj = j,\n            curr = parserInput.i - currentPos,\n            endIndex = parserInput.i + current.length - curr,\n            mem = (parserInput.i += length),\n            inp = input,\n            c, nextChar, comment;\n\n        for (; parserInput.i < endIndex; parserInput.i++) {\n            c = inp.charCodeAt(parserInput.i);\n\n            if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\n                nextChar = inp.charAt(parserInput.i + 1);\n                if (nextChar === '/') {\n                    comment = {index: parserInput.i, isLineComment: true};\n                    var nextNewLine = inp.indexOf('\\n', parserInput.i + 2);\n                    if (nextNewLine < 0) {\n                        nextNewLine = endIndex;\n                    }\n                    parserInput.i = nextNewLine;\n                    comment.text = inp.substr(comment.index, parserInput.i - comment.index);\n                    parserInput.commentStore.push(comment);\n                    continue;\n                } else if (nextChar === '*') {\n                    var nextStarSlash = inp.indexOf('*/', parserInput.i + 2);\n                    if (nextStarSlash >= 0) {\n                        comment = {\n                            index: parserInput.i,\n                            text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),\n                            isLineComment: false\n                        };\n                        parserInput.i += comment.text.length - 1;\n                        parserInput.commentStore.push(comment);\n                        continue;\n                    }\n                }\n                break;\n            }\n\n            if ((c !== CHARCODE_SPACE) && (c !== CHARCODE_LF) && (c !== CHARCODE_TAB) && (c !== CHARCODE_CR)) {\n                break;\n            }\n        }\n\n        current = current.slice(length + parserInput.i - mem + curr);\n        currentPos = parserInput.i;\n\n        if (!current.length) {\n            if (j < chunks.length - 1) {\n                current = chunks[++j];\n                skipWhitespace(0); // skip space at the beginning of a chunk\n                return true; // things changed\n            }\n            parserInput.finished = true;\n        }\n\n        return oldi !== parserInput.i || oldj !== j;\n    }\n\n    parserInput.save = function() {\n        currentPos = parserInput.i;\n        saveStack.push( { current: current, i: parserInput.i, j: j });\n    };\n    parserInput.restore = function(possibleErrorMessage) {\n\n        if (parserInput.i > furthest || (parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage)) {\n            furthest = parserInput.i;\n            furthestPossibleErrorMessage = possibleErrorMessage;\n        }\n        var state = saveStack.pop();\n        current = state.current;\n        currentPos = parserInput.i = state.i;\n        j = state.j;\n    };\n    parserInput.forget = function() {\n        saveStack.pop();\n    };\n    parserInput.isWhitespace = function (offset) {\n        var pos = parserInput.i + (offset || 0),\n            code = input.charCodeAt(pos);\n        return (code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF);\n    };\n\n    // Specialization of $(tok)\n    parserInput.$re = function(tok) {\n        if (parserInput.i > currentPos) {\n            current = current.slice(parserInput.i - currentPos);\n            currentPos = parserInput.i;\n        }\n\n        var m = tok.exec(current);\n        if (!m) {\n            return null;\n        }\n\n        skipWhitespace(m[0].length);\n        if (typeof m === 'string') {\n            return m;\n        }\n\n        return m.length === 1 ? m[0] : m;\n    };\n\n    parserInput.$char = function(tok) {\n        if (input.charAt(parserInput.i) !== tok) {\n            return null;\n        }\n        skipWhitespace(1);\n        return tok;\n    };\n\n    parserInput.$str = function(tok) {\n        var tokLength = tok.length;\n\n        // https://jsperf.com/string-startswith/21\n        for (var i = 0; i < tokLength; i++) {\n            if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                return null;\n            }\n        }\n\n        skipWhitespace(tokLength);\n        return tok;\n    };\n\n    parserInput.$quoted = function(loc) {\n        var pos = loc || parserInput.i,\n            startChar = input.charAt(pos);\n\n        if (startChar !== '\\'' && startChar !== '\"') {\n            return;\n        }\n        var length = input.length,\n            currentPosition = pos;\n\n        for (var i = 1; i + currentPosition < length; i++) {\n            var nextChar = input.charAt(i + currentPosition);\n            switch (nextChar) {\n                case '\\\\':\n                    i++;\n                    continue;\n                case '\\r':\n                case '\\n':\n                    break;\n                case startChar:\n                    var str = input.substr(currentPosition, i + 1);\n                    if (!loc && loc !== 0) {\n                        skipWhitespace(i + 1);\n                        return str\n                    }\n                    return [startChar, str];\n                default:\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Permissive parsing. Ignores everything except matching {} [] () and quotes\n     * until matching token (outside of blocks)\n     */\n    parserInput.$parseUntil = function(tok) {\n        var quote = '',\n            returnVal = null,\n            inComment = false,\n            blockDepth = 0,\n            blockStack = [],\n            parseGroups = [],\n            length = input.length,\n            startPos = parserInput.i,\n            lastPos = parserInput.i,\n            i = parserInput.i,\n            loop = true,\n            testChar;\n\n        if (typeof tok === 'string') {\n            testChar = function(char) {\n                return char === tok;\n            }\n        } else {\n            testChar = function(char) {\n                return tok.test(char);\n            }\n        }\n\n        do {\n            var prevChar, nextChar = input.charAt(i);\n            if (blockDepth === 0 && testChar(nextChar)) {\n                returnVal = input.substr(lastPos, i - lastPos);\n                if (returnVal) {\n                    parseGroups.push(returnVal);\n                }\n                else {\n                    parseGroups.push(' ');\n                }\n                returnVal = parseGroups;\n                skipWhitespace(i - startPos);\n                loop = false\n            } else {\n                if (inComment) {\n                    if (nextChar === '*' && \n                        input.charAt(i + 1) === '/') {\n                        i++;\n                        blockDepth--;\n                        inComment = false;\n                    }\n                    i++;\n                    continue;\n                }\n                switch (nextChar) {\n                    case '\\\\':\n                        i++;\n                        nextChar = input.charAt(i);\n                        parseGroups.push(input.substr(lastPos, i - lastPos + 1));\n                        lastPos = i + 1;\n                        break;\n                    case '/':\n                        if (input.charAt(i + 1) === '*') {\n                            i++;\n                            inComment = true;\n                            blockDepth++;\n                        }\n                        break;\n                    case '\\'':\n                    case '\"':\n                        quote = parserInput.$quoted(i);\n                        if (quote) {\n                            parseGroups.push(input.substr(lastPos, i - lastPos), quote);\n                            i += quote[1].length - 1;\n                            lastPos = i + 1;\n                        }\n                        else {\n                            skipWhitespace(i - startPos);\n                            returnVal = nextChar;\n                            loop = false;\n                        }\n                        break;\n                    case '{':\n                        blockStack.push('}');\n                        blockDepth++;\n                        break;\n                    case '(':\n                        blockStack.push(')');\n                        blockDepth++;\n                        break;\n                    case '[':\n                        blockStack.push(']');\n                        blockDepth++;\n                        break;\n                    case '}':\n                    case ')':\n                    case ']':\n                        var expected = blockStack.pop();\n                        if (nextChar === expected) {\n                            blockDepth--;\n                        } else {\n                            // move the parser to the error and return expected\n                            skipWhitespace(i - startPos);\n                            returnVal = expected;\n                            loop = false;\n                        }\n                }\n                i++;\n                if (i > length) {\n                    loop = false;\n                }\n            }\n            prevChar = nextChar;\n        } while (loop);\n\n        return returnVal ? returnVal : null;\n    }\n\n    parserInput.autoCommentAbsorb = true;\n    parserInput.commentStore = [];\n    parserInput.finished = false;\n\n    // Same as $(), but don't change the state of the parser,\n    // just return the match.\n    parserInput.peek = function(tok) {\n        if (typeof tok === 'string') {\n            // https://jsperf.com/string-startswith/21\n            for (var i = 0; i < tok.length; i++) {\n                if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            return tok.test(current);\n        }\n    };\n\n    // Specialization of peek()\n    // TODO remove or change some currentChar calls to peekChar\n    parserInput.peekChar = function(tok) {\n        return input.charAt(parserInput.i) === tok;\n    };\n\n    parserInput.currentChar = function() {\n        return input.charAt(parserInput.i);\n    };\n\n    parserInput.prevChar = function() {\n        return input.charAt(parserInput.i - 1);\n    };\n\n    parserInput.getInput = function() {\n        return input;\n    };\n\n    parserInput.peekNotNumeric = function() {\n        var c = input.charCodeAt(parserInput.i);\n        // Is the first char of the dimension 0-9, '.', '+' or '-'\n        return (c > CHARCODE_9 || c < CHARCODE_PLUS) || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;\n    };\n\n    parserInput.start = function(str, chunkInput, failFunction) {\n        input = str;\n        parserInput.i = j = currentPos = furthest = 0;\n\n        // chunking apparently makes things quicker (but my tests indicate\n        // it might actually make things slower in node at least)\n        // and it is a non-perfect parse - it can't recognise\n        // unquoted urls, meaning it can't distinguish comments\n        // meaning comments with quotes or {}() in them get 'counted'\n        // and then lead to parse errors.\n        // In addition if the chunking chunks in the wrong place we might\n        // not be able to parse a parser statement in one go\n        // this is officially deprecated but can be switched on via an option\n        // in the case it causes too much performance issues.\n        if (chunkInput) {\n            chunks = chunker(str, failFunction);\n        } else {\n            chunks = [str];\n        }\n\n        current = chunks[0];\n\n        skipWhitespace(0);\n    };\n\n    parserInput.end = function() {\n        var message,\n            isFinished = parserInput.i >= input.length;\n\n        if (parserInput.i < furthest) {\n            message = furthestPossibleErrorMessage;\n            parserInput.i = furthest;\n        }\n        return {\n            isFinished: isFinished,\n            furthest: parserInput.i,\n            furthestPossibleErrorMessage: message,\n            furthestReachedEnd: parserInput.i >= input.length - 1,\n            furthestChar: input[parserInput.i]\n        };\n    };\n\n    return parserInput;\n};\n\n},{\"./chunker\":42}],44:[function(require,module,exports){\nvar LessError = require('../less-error'),\n    tree = require('../tree'),\n    visitors = require('../visitors'),\n    getParserInput = require('./parser-input'),\n    utils = require('../utils'),\n    functionRegistry = require('../functions/function-registry');\n\n//\n// less.js - parser\n//\n//    A relatively straight-forward predictive parser.\n//    There is no tokenization/lexing stage, the input is parsed\n//    in one sweep.\n//\n//    To make the parser fast enough to run in the browser, several\n//    optimization had to be made:\n//\n//    - Matching and slicing on a huge input is often cause of slowdowns.\n//      The solution is to chunkify the input into smaller strings.\n//      The chunks are stored in the `chunks` var,\n//      `j` holds the current chunk index, and `currentPos` holds\n//      the index of the current chunk in relation to `input`.\n//      This gives us an almost 4x speed-up.\n//\n//    - In many cases, we don't need to match individual tokens;\n//      for example, if a value doesn't hold any variables, operations\n//      or dynamic references, the parser can effectively 'skip' it,\n//      treating it as a literal.\n//      An example would be '1px solid #000' - which evaluates to itself,\n//      we don't need to know what the individual components are.\n//      The drawback, of course is that you don't get the benefits of\n//      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\n//      and a smaller speed-up in the code-gen.\n//\n//\n//    Token matching is done with the `$` function, which either takes\n//    a terminal string or regexp, or a non-terminal function to call.\n//    It also takes care of moving all the indices forwards.\n//\n\nvar Parser = function Parser(context, imports, fileInfo) {\n    var parsers,\n        parserInput = getParserInput();\n\n    function error(msg, type) {\n        throw new LessError(\n            {\n                index: parserInput.i,\n                filename: fileInfo.filename,\n                type: type || 'Syntax',\n                message: msg\n            },\n            imports\n        );\n    }\n\n    function expect(arg, msg) {\n        // some older browsers return typeof 'function' for RegExp\n        var result = (arg instanceof Function) ? arg.call(parsers) : parserInput.$re(arg);\n        if (result) {\n            return result;\n        }\n        \n        error(msg || (typeof arg === 'string'\n            ? 'expected \\'' + arg + '\\' got \\'' + parserInput.currentChar() + '\\''\n            : 'unexpected token'));\n    }\n\n    // Specialization of expect()\n    function expectChar(arg, msg) {\n        if (parserInput.$char(arg)) {\n            return arg;\n        }\n        error(msg || 'expected \\'' + arg + '\\' got \\'' + parserInput.currentChar() + '\\'');\n    }\n\n    function getDebugInfo(index) {\n        var filename = fileInfo.filename;\n\n        return {\n            lineNumber: utils.getLocation(index, parserInput.getInput()).line + 1,\n            fileName: filename\n        };\n    }\n\n    /**\n     *  Used after initial parsing to create nodes on the fly\n     * \n     *  @param {String} str          - string to parse \n     *  @param {Array}  parseList    - array of parsers to run input through e.g. [\"value\", \"important\"]\n     *  @param {Number} currentIndex - start number to begin indexing\n     *  @param {Object} fileInfo     - fileInfo to attach to created nodes\n     */\n    function parseNode(str, parseList, currentIndex, fileInfo, callback) {\n        var result, returnNodes = [];\n        var parser = parserInput;\n\n        try {\n            parser.start(str, false, function fail(msg, index) {\n                callback({\n                    message: msg,\n                    index: index + currentIndex\n                });\n            });\n            for (var x = 0, p, i; (p = parseList[x]); x++) {\n                i = parser.i;\n                result = parsers[p]();\n                if (result) {\n                    result._index = i + currentIndex;\n                    result._fileInfo = fileInfo;\n                    returnNodes.push(result);\n                }\n                else {\n                    returnNodes.push(null);\n                }\n            }\n\n            var endInfo = parser.end();\n            if (endInfo.isFinished) {\n                callback(null, returnNodes);\n            }\n            else {\n                callback(true, null);\n            }\n        } catch (e) {\n            throw new LessError({\n                index: e.index + currentIndex,\n                message: e.message\n            }, imports, fileInfo.filename);\n        }\n    }\n    \n    //\n    // The Parser\n    //\n    return {\n        parserInput: parserInput,\n        imports: imports,\n        fileInfo: fileInfo,\n        parseNode: parseNode,\n        //\n        // Parse an input string into an abstract syntax tree,\n        // @param str A string containing 'less' markup\n        // @param callback call `callback` when done.\n        // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\n        //\n        parse: function (str, callback, additionalData) {\n            var root, error = null, globalVars, modifyVars, ignored, preText = '';\n\n            globalVars = (additionalData && additionalData.globalVars) ? Parser.serializeVars(additionalData.globalVars) + '\\n' : '';\n            modifyVars = (additionalData && additionalData.modifyVars) ? '\\n' + Parser.serializeVars(additionalData.modifyVars) : '';\n\n            if (context.pluginManager) {\n                var preProcessors = context.pluginManager.getPreProcessors();\n                for (var i = 0; i < preProcessors.length; i++) {\n                    str = preProcessors[i].process(str, { context: context, imports: imports, fileInfo: fileInfo });\n                }\n            }\n\n            if (globalVars || (additionalData && additionalData.banner)) {\n                preText = ((additionalData && additionalData.banner) ? additionalData.banner : '') + globalVars;\n                ignored = imports.contentsIgnoredChars;\n                ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;\n                ignored[fileInfo.filename] += preText.length;\n            }\n\n            str = str.replace(/\\r\\n?/g, '\\n');\n            // Remove potential UTF Byte Order Mark\n            str = preText + str.replace(/^\\uFEFF/, '') + modifyVars;\n            imports.contents[fileInfo.filename] = str;\n\n            // Start with the primary rule.\n            // The whole syntax tree is held under a Ruleset node,\n            // with the `root` property set to true, so no `{}` are\n            // output. The callback is called when the input is parsed.\n            try {\n                parserInput.start(str, context.chunkInput, function fail(msg, index) {\n                    throw new LessError({\n                        index: index,\n                        type: 'Parse',\n                        message: msg,\n                        filename: fileInfo.filename\n                    }, imports);\n                });\n\n                tree.Node.prototype.parse = this;\n                root = new tree.Ruleset(null, this.parsers.primary());\n                tree.Node.prototype.rootNode = root;\n                root.root = true;\n                root.firstRoot = true;\n                root.functionRegistry = functionRegistry.inherit();\n                \n            } catch (e) {\n                return callback(new LessError(e, imports, fileInfo.filename));\n            }\n\n            // If `i` is smaller than the `input.length - 1`,\n            // it means the parser wasn't able to parse the whole\n            // string, so we've got a parsing error.\n            //\n            // We try to extract a \\n delimited string,\n            // showing the line where the parse error occurred.\n            // We split it up into two parts (the part which parsed,\n            // and the part which didn't), so we can color them differently.\n            var endInfo = parserInput.end();\n            if (!endInfo.isFinished) {\n\n                var message = endInfo.furthestPossibleErrorMessage;\n\n                if (!message) {\n                    message = 'Unrecognised input';\n                    if (endInfo.furthestChar === '}') {\n                        message += '. Possibly missing opening \\'{\\'';\n                    } else if (endInfo.furthestChar === ')') {\n                        message += '. Possibly missing opening \\'(\\'';\n                    } else if (endInfo.furthestReachedEnd) {\n                        message += '. Possibly missing something';\n                    }\n                }\n\n                error = new LessError({\n                    type: 'Parse',\n                    message: message,\n                    index: endInfo.furthest,\n                    filename: fileInfo.filename\n                }, imports);\n            }\n\n            var finish = function (e) {\n                e = error || e || imports.error;\n\n                if (e) {\n                    if (!(e instanceof LessError)) {\n                        e = new LessError(e, imports, fileInfo.filename);\n                    }\n\n                    return callback(e);\n                }\n                else {\n                    return callback(null, root);\n                }\n            };\n\n            if (context.processImports !== false) {\n                new visitors.ImportVisitor(imports, finish)\n                    .run(root);\n            } else {\n                return finish();\n            }\n        },\n\n        //\n        // Here in, the parsing rules/functions\n        //\n        // The basic structure of the syntax tree generated is as follows:\n        //\n        //   Ruleset ->  Declaration -> Value -> Expression -> Entity\n        //\n        // Here's some Less code:\n        //\n        //    .class {\n        //      color: #fff;\n        //      border: 1px solid #000;\n        //      width: @w + 4px;\n        //      > .child {...}\n        //    }\n        //\n        // And here's what the parse tree might look like:\n        //\n        //     Ruleset (Selector '.class', [\n        //         Declaration (\"color\",  Value ([Expression [Color #fff]]))\n        //         Declaration (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\n        //         Declaration (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\n        //         Ruleset (Selector [Element '>', '.child'], [...])\n        //     ])\n        //\n        //  In general, most rules will try to parse a token with the `$re()` function, and if the return\n        //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n        //  first, before parsing, that's when we use `peek()`.\n        //\n        parsers: parsers = {\n            //\n            // The `primary` rule is the *entry* and *exit* point of the parser.\n            // The rules here can appear at any level of the parse tree.\n            //\n            // The recursive nature of the grammar is an interplay between the `block`\n            // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n            // as represented by this simplified grammar:\n            //\n            //     primary  →  (ruleset | declaration)+\n            //     ruleset  →  selector+ block\n            //     block    →  '{' primary '}'\n            //\n            // Only at one point is the primary rule not called from the\n            // block rule: at the root level.\n            //\n            primary: function () {\n                var mixin = this.mixin, root = [], node;\n\n                while (true) {\n                    while (true) {\n                        node = this.comment();\n                        if (!node) { break; }\n                        root.push(node);\n                    }\n                    // always process comments before deciding if finished\n                    if (parserInput.finished) {\n                        break;\n                    }\n                    if (parserInput.peek('}')) {\n                        break;\n                    }\n\n                    node = this.extendRule();\n                    if (node) {\n                        root = root.concat(node);\n                        continue;\n                    }\n\n                    node = mixin.definition() || this.declaration() || this.ruleset() ||\n                        mixin.call(false, false) || this.variableCall() || this.entities.call() || this.atrule();\n                    if (node) {\n                        root.push(node);\n                    } else {\n                        var foundSemiColon = false;\n                        while (parserInput.$char(';')) {\n                            foundSemiColon = true;\n                        }\n                        if (!foundSemiColon) {\n                            break;\n                        }\n                    }\n                }\n\n                return root;\n            },\n\n            // comments are collected by the main parsing mechanism and then assigned to nodes\n            // where the current structure allows it\n            comment: function () {\n                if (parserInput.commentStore.length) {\n                    var comment = parserInput.commentStore.shift();\n                    return new(tree.Comment)(comment.text, comment.isLineComment, comment.index, fileInfo);\n                }\n            },\n\n            //\n            // Entities are tokens which can be found inside an Expression\n            //\n            entities: {\n                mixinLookup: function() {\n                    return parsers.mixin.call(true, true);\n                },\n                //\n                // A string, which supports escaping \" and '\n                //\n                //     \"milky way\" 'he\\'s the one!'\n                //\n                quoted: function (forceEscaped) {\n                    var str, index = parserInput.i, isEscaped = false;\n\n                    parserInput.save();\n                    if (parserInput.$char('~')) {\n                        isEscaped = true;\n                    } else if (forceEscaped) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    str = parserInput.$quoted();\n                    if (!str) {\n                        parserInput.restore();\n                        return;\n                    }\n                    parserInput.forget();\n\n                    return new(tree.Quoted)(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);\n                },\n\n                //\n                // A catch-all word, such as:\n                //\n                //     black border-collapse\n                //\n                keyword: function () {\n                    var k = parserInput.$char('%') || parserInput.$re(/^\\[?(?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+\\]?/);\n                    if (k) {\n                        return tree.Color.fromKeyword(k) || new(tree.Keyword)(k);\n                    }\n                },\n\n                //\n                // A function call\n                //\n                //     rgb(255, 0, 255)\n                //\n                // The arguments are parsed with the `entities.arguments` parser.\n                //\n                call: function () {\n                    var name, args, func, index = parserInput.i;\n\n                    // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                    if (parserInput.peek(/^url\\(/i)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    name = parserInput.$re(/^([\\w-]+|%|progid:[\\w\\.]+)\\(/);\n                    if (!name) {\n                        parserInput.forget(); \n                        return;\n                    }\n\n                    name = name[1];\n                    func = this.customFuncCall(name);\n                    if (func) {\n                        args = func.parse();\n                        if (args && func.stop) {\n                            parserInput.forget();\n                            return args;\n                        }\n                    }\n\n                    args = this.arguments(args);\n\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore('Could not parse call arguments or missing \\')\\'');\n                        return;\n                    }\n\n                    parserInput.forget();\n                    \n                    return new(tree.Call)(name, args, index, fileInfo);\n                },\n                \n                //\n                // Parsing rules for functions with non-standard args, e.g.:\n                //\n                //     boolean(not(2 > 1))\n                //\n                //     This is a quick prototype, to be modified/improved when\n                //     more custom-parsed funcs come (e.g. `selector(...)`)\n                //\n\n                customFuncCall: function (name) {\n                    /* Ideally the table is to be moved out of here for faster perf.,\n                       but it's quite tricky since it relies on all these `parsers`\n                       and `expect` available only here */\n                    return {\n                        alpha:   f(parsers.ieAlpha, true),\n                        boolean: f(condition),\n                        'if':    f(condition)\n                    }[name.toLowerCase()];\n\n                    function f(parse, stop) {\n                        return {\n                            parse: parse, // parsing function\n                            stop:  stop   // when true - stop after parse() and return its result, \n                                          // otherwise continue for plain args\n                        };\n                    }\n                \n                    function condition() {\n                        return [expect(parsers.condition, 'expected condition')];\n                    }\n                },\n\n                arguments: function (prevArgs) {\n                    var argsComma = prevArgs || [],\n                        argsSemiColon = [],\n                        isSemiColonSeparated, value;\n\n                    parserInput.save();\n\n                    while (true) {\n                        if (prevArgs) {\n                            prevArgs = false;\n                        } else {\n                            value = parsers.detachedRuleset() || this.assignment() || parsers.expression();\n                            if (!value) {\n                                break;\n                            }\n\n                            if (value.value && value.value.length == 1) {\n                                value = value.value[0];\n                            }\n\n                            argsComma.push(value);\n                        }\n\n                        if (parserInput.$char(',')) {\n                            continue;\n                        }\n\n                        if (parserInput.$char(';') || isSemiColonSeparated) {\n                            isSemiColonSeparated = true;\n                            value = (argsComma.length < 1) ? argsComma[0]\n                                : new tree.Value(argsComma);\n                            argsSemiColon.push(value);\n                            argsComma = [];\n                        }\n                    }\n\n                    parserInput.forget();\n                    return isSemiColonSeparated ? argsSemiColon : argsComma;\n                },\n                literal: function () {\n                    return this.dimension() ||\n                           this.color() ||\n                           this.quoted() ||\n                           this.unicodeDescriptor();\n                },\n\n                // Assignments are argument entities for calls.\n                // They are present in ie filter properties as shown below.\n                //\n                //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\n                //\n\n                assignment: function () {\n                    var key, value;\n                    parserInput.save();\n                    key = parserInput.$re(/^\\w+(?=\\s?=)/i);\n                    if (!key) {\n                        parserInput.restore();\n                        return;\n                    }\n                    if (!parserInput.$char('=')) {\n                        parserInput.restore();\n                        return;\n                    }\n                    value = parsers.entity();\n                    if (value) {\n                        parserInput.forget();\n                        return new(tree.Assignment)(key, value);\n                    } else {\n                        parserInput.restore();\n                    }\n                },\n\n                //\n                // Parse url() tokens\n                //\n                // We use a specific rule for urls, because they don't really behave like\n                // standard function calls. The difference is that the argument doesn't have\n                // to be enclosed within a string, so it can't be parsed as an Expression.\n                //\n                url: function () {\n                    var value, index = parserInput.i;\n\n                    parserInput.autoCommentAbsorb = false;\n\n                    if (!parserInput.$str('url(')) {\n                        parserInput.autoCommentAbsorb = true;\n                        return;\n                    }\n\n                    value = this.quoted() || this.variable() || this.property() ||\n                            parserInput.$re(/^(?:(?:\\\\[\\(\\)'\"])|[^\\(\\)'\"])+/) || '';\n\n                    parserInput.autoCommentAbsorb = true;\n\n                    expectChar(')');\n\n                    return new(tree.URL)((value.value != null || \n                        value instanceof tree.Variable || \n                        value instanceof tree.Property) ?\n                        value : new(tree.Anonymous)(value, index), index, fileInfo);\n                },\n\n                //\n                // A Variable entity, such as `@fink`, in\n                //\n                //     width: @fink + 2px\n                //\n                // We use a different parser for variable definitions,\n                // see `parsers.variable`.\n                //\n                variable: function () {\n                    var ch, name, index = parserInput.i;\n\n                    parserInput.save();\n                    if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\\w-]+/))) {\n                        ch = parserInput.currentChar();\n                        if (ch === '(' || ch === '[' && !parserInput.prevChar().match(/^\\s/)) {\n                            // this may be a VariableCall lookup\n                            var result = parsers.variableCall(name);\n                            if (result) {\n                                parserInput.forget();\n                                return result;\n                            }\n                        }\n                        parserInput.forget();\n                        return new(tree.Variable)(name, index, fileInfo);\n                    }\n                    parserInput.restore();\n                },\n\n                // A variable entity using the protective {} e.g. @{var}\n                variableCurly: function () {\n                    var curly, index = parserInput.i;\n\n                    if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))) {\n                        return new(tree.Variable)('@' + curly[1], index, fileInfo);\n                    }\n                },\n                //\n                // A Property accessor, such as `$color`, in\n                //\n                //     background-color: $color\n                //\n                property: function () {\n                    var name, index = parserInput.i;\n\n                    if (parserInput.currentChar() === '$' && (name = parserInput.$re(/^\\$[\\w-]+/))) {\n                        return new(tree.Property)(name, index, fileInfo);\n                    }\n                },\n\n                // A property entity useing the protective {} e.g. ${prop}\n                propertyCurly: function () {\n                    var curly, index = parserInput.i;\n\n                    if (parserInput.currentChar() === '$' && (curly = parserInput.$re(/^\\$\\{([\\w-]+)\\}/))) {\n                        return new(tree.Property)('$' + curly[1], index, fileInfo);\n                    }\n                },\n                //\n                // A Hexadecimal color\n                //\n                //     #4F3C2F\n                //\n                // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\n                //\n                color: function () {\n                    var rgb;\n\n                    if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})/))) {\n                        return new(tree.Color)(rgb[1], undefined, rgb[0]);\n                    }\n                },\n\n                colorKeyword: function () {\n                    parserInput.save();\n                    var autoCommentAbsorb = parserInput.autoCommentAbsorb;\n                    parserInput.autoCommentAbsorb = false;\n                    var k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);\n                    parserInput.autoCommentAbsorb = autoCommentAbsorb;\n                    if (!k) {\n                        parserInput.forget();\n                        return;\n                    }\n                    parserInput.restore();\n                    var color = tree.Color.fromKeyword(k);\n                    if (color) {\n                        parserInput.$str(k);\n                        return color;\n                    }\n                },\n\n                //\n                // A Dimension, that is, a number and a unit\n                //\n                //     0.5em 95%\n                //\n                dimension: function () {\n                    if (parserInput.peekNotNumeric()) {\n                        return;\n                    }\n\n                    var value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i);\n                    if (value) {\n                        return new(tree.Dimension)(value[1], value[2]);\n                    }\n                },\n\n                //\n                // A unicode descriptor, as is used in unicode-range\n                //\n                // U+0??  or U+00A1-00A9\n                //\n                unicodeDescriptor: function () {\n                    var ud;\n\n                    ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/);\n                    if (ud) {\n                        return new(tree.UnicodeDescriptor)(ud[0]);\n                    }\n                },\n\n                //\n                // JavaScript code to be evaluated\n                //\n                //     `window.location.href`\n                //\n                javascript: function () {\n                    var js, index = parserInput.i;\n\n                    parserInput.save();\n\n                    var escape = parserInput.$char('~');\n                    var jsQuote = parserInput.$char('`');\n\n                    if (!jsQuote) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    js = parserInput.$re(/^[^`]*`/);\n                    if (js) {\n                        parserInput.forget();\n                        return new(tree.JavaScript)(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);\n                    }\n                    parserInput.restore('invalid javascript definition');\n                }\n            },\n\n            //\n            // The variable part of a variable definition. Used in the `rule` parser\n            //\n            //     @fink:\n            //\n            variable: function () {\n                var name;\n\n                if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))) { return name[1]; }\n            },\n\n            //\n            // Call a variable value to retrieve a detached ruleset\n            // or a value from a detached ruleset's rules.\n            //\n            //     @fink();\n            //     @fink;\n            //     color: @fink[@color];\n            //\n            variableCall: function (parsedName) {\n                var lookups, important, i = parserInput.i,\n                    inValue = !!parsedName, name = parsedName;\n\n                parserInput.save();\n\n                if (name || (parserInput.currentChar() === '@'\n                    && (name = parserInput.$re(/^(@[\\w-]+)(\\(\\s*\\))?/)))) {\n\n                    lookups = this.mixin.ruleLookups();\n\n                    if (!lookups && ((inValue && parserInput.$str('()') !== '()') || (name[2] !== '()'))) {\n                        parserInput.restore('Missing \\'[...]\\' lookup in variable call');\n                        return;\n                    }\n\n                    if (!inValue) {\n                        name = name[1];\n                    }\n\n                    if (lookups && parsers.important()) {\n                        important = true;\n                    }\n\n                    var call = new tree.VariableCall(name, i, fileInfo);\n                    if (!inValue && parsers.end()) {\n                        parserInput.forget();\n                        return call;\n                    }\n                    else {\n                        parserInput.forget();\n                        return new tree.NamespaceValue(call, lookups, important, i, fileInfo);\n                    }\n                }\n\n                parserInput.restore();\n            },\n\n            //\n            // extend syntax - used to extend selectors\n            //\n            extend: function(isRule) {\n                var elements, e, index = parserInput.i, option, extendList, extend;\n\n                if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {\n                    return;\n                }\n\n                do {\n                    option = null;\n                    elements = null;\n                    while (!(option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\n                        e = this.element();\n                        if (!e) {\n                            break;\n                        }\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                    }\n\n                    option = option && option[1];\n                    if (!elements) {\n                        error('Missing target selector for :extend().');\n                    }\n                    extend = new(tree.Extend)(new(tree.Selector)(elements), option, index, fileInfo);\n                    if (extendList) {\n                        extendList.push(extend);\n                    } else {\n                        extendList = [ extend ];\n                    }\n                } while (parserInput.$char(','));\n\n                expect(/^\\)/);\n\n                if (isRule) {\n                    expect(/^;/);\n                }\n\n                return extendList;\n            },\n\n            //\n            // extendRule - used in a rule to extend all the parent selectors\n            //\n            extendRule: function() {\n                return this.extend(true);\n            },\n\n            //\n            // Mixins\n            //\n            mixin: {\n                //\n                // A Mixin call, with an optional argument list\n                //\n                //     #mixins > .square(#fff);\n                //     #mixins.square(#fff);\n                //     .rounded(4px, black);\n                //     .button;\n                //\n                // We can lookup / return a value using the lookup syntax:\n                //\n                //     color: #mixin.square(#fff)[@color];\n                //\n                // The `while` loop is there because mixins can be\n                // namespaced, but we only support the child and descendant\n                // selector for now.\n                //\n                call: function (inValue, getLookup) {\n                    var s = parserInput.currentChar(), important = false, lookups,\n                        index = parserInput.i, elements, args, hasParens;\n\n                    if (s !== '.' && s !== '#') { return; }\n\n                    parserInput.save(); // stop us absorbing part of an invalid selector\n\n                    elements = this.elements();\n\n                    if (elements) {\n                        if (parserInput.$char('(')) {\n                            args = this.args(true).args;\n                            expectChar(')');\n                            hasParens = true;\n                        }\n\n                        if (getLookup !== false) {\n                            lookups = this.ruleLookups();\n                        }\n                        if (getLookup === true && !lookups) {\n                            parserInput.restore();\n                            return;\n                        }\n\n                        if (inValue && !lookups && !hasParens) {\n                            // This isn't a valid in-value mixin call\n                            parserInput.restore();\n                            return;\n                        }\n\n                        if (!inValue && parsers.important()) {\n                            important = true;\n                        }\n\n                        if (inValue || parsers.end()) {\n                            parserInput.forget();\n                            var mixin = new(tree.mixin.Call)(elements, args, index, fileInfo, !lookups && important);\n                            if (lookups) {\n                                return new tree.NamespaceValue(mixin, lookups, important);\n                            }\n                            else {\n                                return mixin;\n                            }\n                        }\n                    }\n\n                    parserInput.restore();\n                },\n                /**\n                 * Matching elements for mixins\n                 * (Start with . or # and can have > )\n                 */\n                elements: function() {\n                    var elements, e, c, elem, elemIndex,\n                        re = /^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/;\n                    while (true) {\n                        elemIndex = parserInput.i;\n                        e = parserInput.$re(re);\n                        \n                        if (!e) {\n                            break;\n                        }\n                        elem = new(tree.Element)(c, e, false, elemIndex, fileInfo);\n                        if (elements) {\n                            elements.push(elem);\n                        } else {\n                            elements = [ elem ];\n                        }\n                        c = parserInput.$char('>');\n                    }\n                    return elements;\n                },\n                args: function (isCall) {\n                    var entities = parsers.entities,\n                        returner = { args:null, variadic: false },\n                        expressions = [], argsSemiColon = [], argsComma = [],\n                        isSemiColonSeparated, expressionContainsNamed, name, nameLoop,\n                        value, arg, expand, hasSep = true; \n\n                    parserInput.save();\n\n                    while (true) {\n                        if (isCall) {\n                            arg = parsers.detachedRuleset() || parsers.expression();\n                        } else {\n                            parserInput.commentStore.length = 0;\n                            if (parserInput.$str('...')) {\n                                returner.variadic = true;\n                                if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                    isSemiColonSeparated = true;\n                                }\n                                (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                    .push({ variadic: true });\n                                break;\n                            }\n                            arg = entities.variable() || entities.property() || entities.literal() || entities.keyword() || this.call(true);\n                        }\n\n                        if (!arg || !hasSep) {\n                            break;\n                        }\n\n                        nameLoop = null;\n                        if (arg.throwAwayComments) {\n                            arg.throwAwayComments();\n                        }\n                        value = arg;\n                        var val = null;\n\n                        if (isCall) {\n                            // Variable\n                            if (arg.value && arg.value.length == 1) {\n                                val = arg.value[0];\n                            }\n                        } else {\n                            val = arg;\n                        }\n\n                        if (val && (val instanceof tree.Variable || val instanceof tree.Property)) {\n                            if (parserInput.$char(':')) {\n                                if (expressions.length > 0) {\n                                    if (isSemiColonSeparated) {\n                                        error('Cannot mix ; and , as delimiter types');\n                                    }\n                                    expressionContainsNamed = true;\n                                }\n\n                                value = parsers.detachedRuleset() || parsers.expression();\n\n                                if (!value) {\n                                    if (isCall) {\n                                        error('could not understand value for named argument');\n                                    } else {\n                                        parserInput.restore();\n                                        returner.args = [];\n                                        return returner;\n                                    }\n                                }\n                                nameLoop = (name = val.name);\n                            } else if (parserInput.$str('...')) {\n                                if (!isCall) {\n                                    returner.variadic = true;\n                                    if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                        isSemiColonSeparated = true;\n                                    }\n                                    (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                        .push({ name: arg.name, variadic: true });\n                                    break;\n                                } else {\n                                    expand = true;\n                                }\n                            } else if (!isCall) {\n                                name = nameLoop = val.name;\n                                value = null;\n                            }\n                        }\n\n                        if (value) {\n                            expressions.push(value);\n                        }\n\n                        argsComma.push({ name:nameLoop, value:value, expand:expand });\n\n                        if (parserInput.$char(',')) {\n                            hasSep = true;\n                            continue;\n                        }\n                        hasSep = parserInput.$char(';') === ';';\n\n                        if (hasSep || isSemiColonSeparated) {\n\n                            if (expressionContainsNamed) {\n                                error('Cannot mix ; and , as delimiter types');\n                            }\n\n                            isSemiColonSeparated = true;\n\n                            if (expressions.length > 1) {\n                                value = new(tree.Value)(expressions);\n                            }\n                            argsSemiColon.push({ name:name, value:value, expand:expand });\n\n                            name = null;\n                            expressions = [];\n                            expressionContainsNamed = false;\n                        }\n                    }\n\n                    parserInput.forget();\n                    returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;\n                    return returner;\n                },\n                //\n                // A Mixin definition, with a list of parameters\n                //\n                //     .rounded (@radius: 2px, @color) {\n                //        ...\n                //     }\n                //\n                // Until we have a finer grained state-machine, we have to\n                // do a look-ahead, to make sure we don't have a mixin call.\n                // See the `rule` function for more information.\n                //\n                // We start by matching `.rounded (`, and then proceed on to\n                // the argument list, which has optional default values.\n                // We store the parameters in `params`, with a `value` key,\n                // if there is a value, such as in the case of `@radius`.\n                //\n                // Once we've got our params list, and a closing `)`, we parse\n                // the `{...}` block.\n                //\n                definition: function () {\n                    var name, params = [], match, ruleset, cond, variadic = false;\n                    if ((parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#') ||\n                        parserInput.peek(/^[^{]*\\}/)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    match = parserInput.$re(/^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/);\n                    if (match) {\n                        name = match[1];\n\n                        var argInfo = this.args(false);\n                        params = argInfo.args;\n                        variadic = argInfo.variadic;\n\n                        // .mixincall(\"@{a}\");\n                        // looks a bit like a mixin definition..\n                        // also\n                        // .mixincall(@a: {rule: set;});\n                        // so we have to be nice and restore\n                        if (!parserInput.$char(')')) {\n                            parserInput.restore('Missing closing \\')\\'');\n                            return;\n                        }\n\n                        parserInput.commentStore.length = 0;\n\n                        if (parserInput.$str('when')) { // Guard\n                            cond = expect(parsers.conditions, 'expected condition');\n                        }\n\n                        ruleset = parsers.block();\n\n                        if (ruleset) {\n                            parserInput.forget();\n                            return new(tree.mixin.Definition)(name, params, ruleset, cond, variadic);\n                        } else {\n                            parserInput.restore();\n                        }\n                    } else {\n                        parserInput.forget();\n                    }\n                },\n            \n                ruleLookups: function() {\n                    var rule, args, lookups = [];\n\n                    if (parserInput.currentChar() !== '[') { \n                        return;\n                    }\n                    \n                    while (true) {\n                        parserInput.save();\n                        args = null;\n                        rule = this.lookupValue();\n                        if (!rule && rule !== '') {\n                            parserInput.restore();\n                            break;\n                        }\n                        lookups.push(rule);\n                        parserInput.forget();\n                    }\n                    if (lookups.length > 0) {\n                        return lookups;\n                    }\n                },\n    \n                lookupValue: function() {\n                    parserInput.save();\n    \n                    if (!parserInput.$char('[')) { \n                        parserInput.restore();\n                        return;\n                    }\n    \n                    var name = parserInput.$re(/^(?:[@$]{0,2})[_a-zA-Z0-9-]*/);\n    \n                    if (!parserInput.$char(']')) {\n                        parserInput.restore();\n                        return;\n                    } \n\n                    if (name || name === '') {\n                        parserInput.forget();\n                        return name;\n                    }\n    \n                    parserInput.restore();\n                }\n            },\n            //\n            // Entities are the smallest recognized token,\n            // and can be found inside a rule's value.\n            //\n            entity: function () {\n                var entities = this.entities;\n\n                return this.comment() || entities.literal() || entities.variable() || entities.url() ||\n                    entities.property() || entities.call() || entities.keyword() || this.mixin.call(true) ||\n                    entities.javascript();\n            },\n\n            //\n            // A Declaration terminator. Note that we use `peek()` to check for '}',\n            // because the `block` rule will be expecting it, but we still need to make sure\n            // it's there, if ';' was omitted.\n            //\n            end: function () {\n                return parserInput.$char(';') || parserInput.peek('}');\n            },\n\n            //\n            // IE's alpha function\n            //\n            //     alpha(opacity=88)\n            //\n            ieAlpha: function () {\n                var value;\n\n                // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                if (!parserInput.$re(/^opacity=/i)) { return; }\n                value = parserInput.$re(/^\\d+/);\n                if (!value) {\n                    value = expect(parsers.entities.variable, 'Could not parse alpha');\n                    value = '@{' + value.name.slice(1) + '}';\n                }\n                expectChar(')');\n                return new tree.Quoted('', 'alpha(opacity=' + value + ')');\n            },\n\n            //\n            // A Selector Element\n            //\n            //     div\n            //     + h1\n            //     #socks\n            //     input[type=\"text\"]\n            //\n            // Elements are the building blocks for Selectors,\n            // they are made out of a `Combinator` (see combinator rule),\n            // and an element name, such as a tag a class, or `*`.\n            //\n            element: function () {\n                var e, c, v, index = parserInput.i;\n\n                c = this.combinator();\n\n                e = parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) ||\n                    parserInput.$re(/^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) ||\n                    parserInput.$char('*') || parserInput.$char('&') || this.attribute() ||\n                    parserInput.$re(/^\\([^&()@]+\\)/) ||  parserInput.$re(/^[\\.#:](?=@)/) ||\n                    this.entities.variableCurly();\n\n                if (!e) {\n                    parserInput.save();\n                    if (parserInput.$char('(')) {\n                        if ((v = this.selector(false)) && parserInput.$char(')')) {\n                            e = new(tree.Paren)(v);\n                            parserInput.forget();\n                        } else {\n                            parserInput.restore('Missing closing \\')\\'');\n                        }\n                    } else {\n                        parserInput.forget();\n                    }\n                }\n\n                if (e) { return new(tree.Element)(c, e, e instanceof tree.Variable, index, fileInfo); }\n            },\n\n            //\n            // Combinators combine elements together, in a Selector.\n            //\n            // Because our parser isn't white-space sensitive, special care\n            // has to be taken, when parsing the descendant combinator, ` `,\n            // as it's an empty space. We have to check the previous character\n            // in the input, to see if it's a ` ` character. More info on how\n            // we deal with this in *combinator.js*.\n            //\n            combinator: function () {\n                var c = parserInput.currentChar();\n\n                if (c === '/') {\n                    parserInput.save();\n                    var slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i);\n                    if (slashedCombinator) {\n                        parserInput.forget();\n                        return new(tree.Combinator)(slashedCombinator);\n                    }\n                    parserInput.restore();\n                }\n\n                if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\n                    parserInput.i++;\n                    if (c === '^' && parserInput.currentChar() === '^') {\n                        c = '^^';\n                        parserInput.i++;\n                    }\n                    while (parserInput.isWhitespace()) { parserInput.i++; }\n                    return new(tree.Combinator)(c);\n                } else if (parserInput.isWhitespace(-1)) {\n                    return new(tree.Combinator)(' ');\n                } else {\n                    return new(tree.Combinator)(null);\n                }\n            },\n            //\n            // A CSS Selector\n            // with less extensions e.g. the ability to extend and guard\n            //\n            //     .class > div + h1\n            //     li a:hover\n            //\n            // Selectors are made out of one or more Elements, see above.\n            //\n            selector: function (isLess) {\n                var index = parserInput.i, elements, extendList, c, e, allExtends, when, condition;\n                isLess = isLess !== false;\n                while ((isLess && (extendList = this.extend())) || (isLess && (when = parserInput.$str('when'))) || (e = this.element())) {\n                    if (when) {\n                        condition = expect(this.conditions, 'expected condition');\n                    } else if (condition) {\n                        error('CSS guard can only be used at the end of selector');\n                    } else if (extendList) {\n                        if (allExtends) {\n                            allExtends = allExtends.concat(extendList);\n                        } else {\n                            allExtends = extendList;\n                        }\n                    } else {\n                        if (allExtends) { error('Extend can only be used at the end of selector'); }\n                        c = parserInput.currentChar();\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                        e = null;\n                    }\n                    if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\n                        break;\n                    }\n                }\n\n                if (elements) { return new(tree.Selector)(elements, allExtends, condition, index, fileInfo); }\n                if (allExtends) { error('Extend must be used to extend a selector, it cannot be used on its own'); }\n            },\n            selectors: function () {\n                var s, selectors;\n                while (true) {\n                    s = this.selector();\n                    if (!s) {\n                        break;\n                    }\n                    if (selectors) {\n                        selectors.push(s);\n                    } else {\n                        selectors = [ s ];\n                    }\n                    parserInput.commentStore.length = 0;\n                    if (s.condition && selectors.length > 1) {\n                        error(\"Guards are only currently allowed on a single selector.\");\n                    }\n                    if (!parserInput.$char(',')) { break; }\n                    if (s.condition) {\n                        error(\"Guards are only currently allowed on a single selector.\");\n                    }\n                    parserInput.commentStore.length = 0;\n                }\n                return selectors;\n            },\n            attribute: function () {\n                if (!parserInput.$char('[')) { return; }\n\n                var entities = this.entities,\n                    key, val, op;\n\n                if (!(key = entities.variableCurly())) {\n                    key = expect(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/);\n                }\n\n                op = parserInput.$re(/^[|~*$^]?=/);\n                if (op) {\n                    val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\\w-]+/) || entities.variableCurly();\n                }\n\n                expectChar(']');\n\n                return new(tree.Attribute)(key, op, val);\n            },\n\n            //\n            // The `block` rule is used by `ruleset` and `mixin.definition`.\n            // It's a wrapper around the `primary` rule, with added `{}`.\n            //\n            block: function () {\n                var content;\n                if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {\n                    return content;\n                }\n            },\n\n            blockRuleset: function() {\n                var block = this.block();\n\n                if (block) {\n                    block = new tree.Ruleset(null, block);\n                }\n                return block;\n            },\n\n            detachedRuleset: function() {\n                var argInfo, params, variadic;\n\n                parserInput.save();\n                if (parserInput.$re(/^[.#]\\(/)) {\n                    /**\n                     * DR args currently only implemented for each() function, and not \n                     * yet settable as `@dr: #(@arg) {}`\n                     * This should be done when DRs are merged with mixins.\n                     * See: https://github.com/less/less-meta/issues/16\n                     */\n                    argInfo = this.mixin.args(false);\n                    params = argInfo.args;\n                    variadic = argInfo.variadic;\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore();\n                        return;\n                    }\n                }\n                var blockRuleset = this.blockRuleset();\n                if (blockRuleset) {\n                    parserInput.forget();\n                    if (params) {\n                        return new tree.mixin.Definition(null, params, blockRuleset, null, variadic);\n                    }\n                    return new tree.DetachedRuleset(blockRuleset);\n                }\n                parserInput.restore();\n            },\n\n            //\n            // div, .class, body > p {...}\n            //\n            ruleset: function () {\n                var selectors, rules, debugInfo;\n\n                parserInput.save();\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(parserInput.i);\n                }\n\n                selectors = this.selectors();\n\n                if (selectors && (rules = this.block())) {\n                    parserInput.forget();\n                    var ruleset = new(tree.Ruleset)(selectors, rules, context.strictImports);\n                    if (context.dumpLineNumbers) {\n                        ruleset.debugInfo = debugInfo;\n                    }\n                    return ruleset;\n                } else {\n                    parserInput.restore();\n                }\n            },\n            declaration: function () {\n                var name, value, index = parserInput.i, hasDR,\n                    c = parserInput.currentChar(), important, merge, isVariable;\n\n                if (c === '.' || c === '#' || c === '&' || c === ':') { return; }\n\n                parserInput.save();\n\n                name = this.variable() || this.ruleProperty();\n                if (name) {\n                    isVariable = typeof name === 'string';\n\n                    if (isVariable) {\n                        value = this.detachedRuleset();\n                        if (value) {\n                            hasDR = true;\n                        }\n                    }\n\n                    parserInput.commentStore.length = 0;\n                    if (!value) {\n                        // a name returned by this.ruleProperty() is always an array of the form:\n                        // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\n                        // where each item is a tree.Keyword or tree.Variable\n                        merge = !isVariable && name.length > 1 && name.pop().value;\n\n                        // Custom property values get permissive parsing\n                        if (name[0].value && name[0].value.slice(0, 2) === '--') {\n                            value = this.permissiveValue();\n                        }\n                        // Try to store values as anonymous\n                        // If we need the value later we'll re-parse it in ruleset.parseValue\n                        else {\n                            value = this.anonymousValue();\n                        }\n                        if (value) {\n                            parserInput.forget();\n                            // anonymous values absorb the end ';' which is required for them to work\n                            return new (tree.Declaration)(name, value, false, merge, index, fileInfo);\n                        }\n\n                        if (!value) {\n                            value = this.value();\n                        }\n\n                        if (value) {\n                            important = this.important();\n                        } else if (isVariable) {\n                            // As a last resort, try permissiveValue\n                            value = this.permissiveValue();\n                        }\n                    }\n\n                    if (value && (this.end() || hasDR)) {\n                        parserInput.forget();\n                        return new (tree.Declaration)(name, value, important, merge, index, fileInfo);\n                    }\n                    else {\n                        parserInput.restore();\n                    }\n                } else {\n                    parserInput.restore();\n                }\n            },\n            anonymousValue: function () {\n                var index = parserInput.i;\n                var match = parserInput.$re(/^([^.#@\\$+\\/'\"*`(;{}-]*);/);\n                if (match) {\n                    return new(tree.Anonymous)(match[1], index);\n                }\n            },\n            /**\n             * Used for custom properties, at-rules, and variables (as fallback)\n             * Parses almost anything inside of {} [] () \"\" blocks\n             * until it reaches outer-most tokens.\n             * \n             * First, it will try to parse comments and entities to reach\n             * the end. This is mostly like the Expression parser except no\n             * math is allowed.\n             */\n            permissiveValue: function (untilTokens) {\n                var i, e, done, value, \n                    tok = untilTokens || ';',\n                    index = parserInput.i, result = [];\n\n                function testCurrentChar() {\n                    var char = parserInput.currentChar();\n                    if (typeof tok === 'string') {\n                        return char === tok;\n                    } else {\n                        return tok.test(char);\n                    }\n                }\n                if (testCurrentChar()) {\n                    return;\n                }\n                value = [];\n                do {\n                    e = this.comment();\n                    if (e) {\n                        value.push(e);\n                        continue;\n                    }\n                    e = this.entity();\n                    if (e) {\n                        value.push(e);\n                    }\n                } while (e);\n\n                done = testCurrentChar();\n                \n                if (value.length > 0) {\n                    value = new(tree.Expression)(value);\n                    if (done) {\n                        return value;\n                    }\n                    else {\n                        result.push(value);\n                    }\n                    // Preserve space before $parseUntil as it will not\n                    if (parserInput.prevChar() === ' ') {\n                        result.push(new tree.Anonymous(' ', index));\n                    }\n                }\n                parserInput.save();\n                \n                value = parserInput.$parseUntil(tok);\n\n                if (value) {\n                    if (typeof value === 'string') {\n                        error('Expected \\'' + value + '\\'', 'Parse');\n                    }\n                    if (value.length === 1 && value[0] === ' ') {\n                        parserInput.forget();\n                        return new tree.Anonymous('', index);\n                    }\n                    var item;\n                    for (i = 0; i < value.length; i++) {\n                        item = value[i];\n                        if (Array.isArray(item)) {\n                            // Treat actual quotes as normal quoted values\n                            result.push(new tree.Quoted(item[0], item[1], true, index, fileInfo));\n                        }\n                        else {\n                            if (i === value.length - 1) {\n                                item = item.trim();\n                            }\n                            // Treat like quoted values, but replace vars like unquoted expressions\n                            var quote = new tree.Quoted('\\'', item, true, index, fileInfo);\n                            quote.variableRegex = /@([\\w-]+)/g;\n                            quote.propRegex = /\\$([\\w-]+)/g;\n                            result.push(quote);\n                        }\n                    }\n                    parserInput.forget();\n                    return new tree.Expression(result, true);\n                }\n                parserInput.restore();\n            },\n\n            //\n            // An @import atrule\n            //\n            //     @import \"lib\";\n            //\n            // Depending on our environment, importing is done differently:\n            // In the browser, it's an XHR request, in Node, it would be a\n            // file-system operation. The function used for importing is\n            // stored in `import`, which we pass to the Import constructor.\n            //\n            'import': function () {\n                var path, features, index = parserInput.i;\n\n                var dir = parserInput.$re(/^@import?\\s+/);\n\n                if (dir) {\n                    var options = (dir ? this.importOptions() : null) || {};\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n                        features = this.mediaFeatures();\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error('missing semi-colon or unrecognised media features on import');\n                        }\n                        features = features && new(tree.Value)(features);\n                        return new(tree.Import)(path, features, options, index, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error('malformed import statement');\n                    }\n                }\n            },\n\n            importOptions: function() {\n                var o, options = {}, optionName, value;\n\n                // list of options, surrounded by parens\n                if (!parserInput.$char('(')) { return null; }\n                do {\n                    o = this.importOption();\n                    if (o) {\n                        optionName = o;\n                        value = true;\n                        switch (optionName) {\n                            case 'css':\n                                optionName = 'less';\n                                value = false;\n                                break;\n                            case 'once':\n                                optionName = 'multiple';\n                                value = false;\n                                break;\n                        }\n                        options[optionName] = value;\n                        if (!parserInput.$char(',')) { break; }\n                    }\n                } while (o);\n                expectChar(')');\n                return options;\n            },\n\n            importOption: function() {\n                var opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);\n                if (opt) {\n                    return opt[1];\n                }\n            },\n\n            mediaFeature: function () {\n                var entities = this.entities, nodes = [], e, p;\n                parserInput.save();\n                do {\n                    e = entities.keyword() || entities.variable() || entities.mixinLookup();\n                    if (e) {\n                        nodes.push(e);\n                    } else if (parserInput.$char('(')) {\n                        p = this.property();\n                        e = this.value();\n                        if (parserInput.$char(')')) {\n                            if (p && e) {\n                                nodes.push(new(tree.Paren)(new(tree.Declaration)(p, e, null, null, parserInput.i, fileInfo, true)));\n                            } else if (e) {\n                                nodes.push(new(tree.Paren)(e));\n                            } else {\n                                error('badly formed media feature definition');\n                            }\n                        } else {\n                            error('Missing closing \\')\\'', 'Parse');\n                        }\n                    }\n                } while (e);\n\n                parserInput.forget();\n                if (nodes.length > 0) {\n                    return new(tree.Expression)(nodes);\n                }\n            },\n\n            mediaFeatures: function () {\n                var entities = this.entities, features = [], e;\n                do {\n                    e = this.mediaFeature();\n                    if (e) {\n                        features.push(e);\n                        if (!parserInput.$char(',')) { break; }\n                    } else {\n                        e = entities.variable() || entities.mixinLookup();\n                        if (e) {\n                            features.push(e);\n                            if (!parserInput.$char(',')) { break; }\n                        }\n                    }\n                } while (e);\n\n                return features.length > 0 ? features : null;\n            },\n\n            media: function () {\n                var features, rules, media, debugInfo, index = parserInput.i;\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(index);\n                }\n\n                parserInput.save();\n\n                if (parserInput.$str('@media')) {\n                    features = this.mediaFeatures();\n\n                    rules = this.block();\n\n                    if (!rules) {\n                        error('media definitions require block statements after any features');\n                    }\n\n                    parserInput.forget();\n\n                    media = new(tree.Media)(rules, features, index, fileInfo);\n                    if (context.dumpLineNumbers) {\n                        media.debugInfo = debugInfo;\n                    }\n\n                    return media;\n                }\n\n                parserInput.restore();\n            },\n\n            //\n\n            // A @plugin directive, used to import plugins dynamically.\n            //\n            //     @plugin (args) \"lib\";\n            //\n            plugin: function () {\n                var path, args, options,\n                    index = parserInput.i,\n                    dir   = parserInput.$re(/^@plugin?\\s+/);\n\n                if (dir) {\n                    args = this.pluginArgs();\n\n                    if (args) {\n                        options = {\n                            pluginArgs: args,\n                            isPlugin: true\n                        };\n                    }\n                    else {\n                        options = { isPlugin: true };\n                    }\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error('missing semi-colon on @plugin');\n                        }\n                        return new(tree.Import)(path, null, options, index, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error('malformed @plugin statement');\n                    }\n                }\n            },\n\n            pluginArgs: function() {\n                // list of options, surrounded by parens\n                parserInput.save();\n                if (!parserInput.$char('(')) {\n                    parserInput.restore();\n                    return null;\n                }\n                var args = parserInput.$re(/^\\s*([^\\);]+)\\)\\s*/);\n                if (args[1]) {\n                    parserInput.forget();\n                    return args[1].trim();\n                }\n                else { \n                    parserInput.restore();\n                    return null;\n                }\n            },\n\n            //\n            // A CSS AtRule\n            //\n            //     @charset \"utf-8\";\n            //\n            atrule: function () {\n                var index = parserInput.i, name, value, rules, nonVendorSpecificName,\n                    hasIdentifier, hasExpression, hasUnknown, hasBlock = true, isRooted = true;\n\n                if (parserInput.currentChar() !== '@') { return; }\n\n                value = this['import']() || this.plugin() || this.media();\n                if (value) {\n                    return value;\n                }\n\n                parserInput.save();\n\n                name = parserInput.$re(/^@[a-z-]+/);\n\n                if (!name) { return; }\n\n                nonVendorSpecificName = name;\n                if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\n                    nonVendorSpecificName = '@' + name.slice(name.indexOf('-', 2) + 1);\n                }\n\n                switch (nonVendorSpecificName) {\n                    case '@charset':\n                        hasIdentifier = true;\n                        hasBlock = false;\n                        break;\n                    case '@namespace':\n                        hasExpression = true;\n                        hasBlock = false;\n                        break;\n                    case '@keyframes':\n                    case '@counter-style':\n                        hasIdentifier = true;\n                        break;\n                    case '@document':\n                    case '@supports':\n                        hasUnknown = true;\n                        isRooted = false;\n                        break;\n                    default:\n                        hasUnknown = true;\n                        break;\n                }\n\n                parserInput.commentStore.length = 0;\n\n                if (hasIdentifier) {\n                    value = this.entity();\n                    if (!value) {\n                        error('expected ' + name + ' identifier');\n                    }\n                } else if (hasExpression) {\n                    value = this.expression();\n                    if (!value) {\n                        error('expected ' + name + ' expression');\n                    }\n                } else if (hasUnknown) {\n                    value = this.permissiveValue(/^[{;]/);\n                    hasBlock = (parserInput.currentChar() === '{');\n                    if (!value) {\n                        if (!hasBlock && parserInput.currentChar() !== ';') {\n                            error(name + ' rule is missing block or ending semi-colon');\n                        }\n                    }\n                    else if (!value.value) {\n                        value = null;\n                    }\n                }\n\n                if (hasBlock) {\n                    rules = this.blockRuleset();\n                }\n\n                if (rules || (!hasBlock && value && parserInput.$char(';'))) {\n                    parserInput.forget();\n                    return new (tree.AtRule)(name, value, rules, index, fileInfo,\n                        context.dumpLineNumbers ? getDebugInfo(index) : null,\n                        isRooted\n                    );\n                }\n\n                parserInput.restore('at-rule options not recognised');\n            },\n\n            //\n            // A Value is a comma-delimited list of Expressions\n            //\n            //     font-family: Baskerville, Georgia, serif;\n            //\n            // In a Rule, a Value represents everything after the `:`,\n            // and before the `;`.\n            //\n            value: function () {\n                var e, expressions = [], index = parserInput.i;\n\n                do {\n                    e = this.expression();\n                    if (e) {\n                        expressions.push(e);\n                        if (!parserInput.$char(',')) { break; }\n                    }\n                } while (e);\n\n                if (expressions.length > 0) {\n                    return new(tree.Value)(expressions, index);\n                }\n            },\n            important: function () {\n                if (parserInput.currentChar() === '!') {\n                    return parserInput.$re(/^! *important/);\n                }\n            },\n            sub: function () {\n                var a, e;\n\n                parserInput.save();\n                if (parserInput.$char('(')) {\n                    a = this.addition();\n                    if (a && parserInput.$char(')')) {\n                        parserInput.forget();\n                        e = new(tree.Expression)([a]);\n                        e.parens = true;\n                        return e;\n                    }\n                    parserInput.restore('Expected \\')\\'');\n                    return;\n                }\n                parserInput.restore();\n            },\n            multiplication: function () {\n                var m, a, op, operation, isSpaced;\n                m = this.operand();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        if (parserInput.peek(/^\\/[*\\/]/)) {\n                            break;\n                        }\n\n                        parserInput.save();\n\n                        op = parserInput.$char('/') || parserInput.$char('*') || parserInput.$str('./');\n\n                        if (!op) { parserInput.forget(); break; }\n\n                        a = this.operand();\n\n                        if (!a) { parserInput.restore(); break; }\n                        parserInput.forget();\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            addition: function () {\n                var m, a, op, operation, isSpaced;\n                m = this.multiplication();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        op = parserInput.$re(/^[-+]\\s+/) || (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')));\n                        if (!op) {\n                            break;\n                        }\n                        a = this.multiplication();\n                        if (!a) {\n                            break;\n                        }\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            conditions: function () {\n                var a, b, index = parserInput.i, condition;\n\n                a = this.condition(true);\n                if (a) {\n                    while (true) {\n                        if (!parserInput.peek(/^,\\s*(not\\s*)?\\(/) || !parserInput.$char(',')) {\n                            break;\n                        }\n                        b = this.condition(true);\n                        if (!b) {\n                            break;\n                        }\n                        condition = new(tree.Condition)('or', condition || a, b, index);\n                    }\n                    return condition || a;\n                }\n            },\n            condition: function (needsParens) {\n                var result, logical, next;\n                function or() {\n                    return parserInput.$str('or');\n                }\n\n                result = this.conditionAnd(needsParens);\n                if (!result) {\n                    return ;\n                }\n                logical = or();\n                if (logical) {\n                    next = this.condition(needsParens);\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            conditionAnd: function (needsParens) {\n                var result, logical, next, self = this;\n                function insideCondition() {\n                    var cond = self.negatedCondition(needsParens) || self.parenthesisCondition(needsParens);\n                    if (!cond && !needsParens) {\n                        return self.atomicCondition(needsParens);\n                    }\n                    return cond;\n                }\n                function and() {\n                    return parserInput.$str('and');\n                }\n\n                result = insideCondition();\n                if (!result) {\n                    return ;\n                }\n                logical = and();\n                if (logical) {\n                    next = this.conditionAnd(needsParens);\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            negatedCondition: function (needsParens) {\n                if (parserInput.$str('not')) {\n                    var result = this.parenthesisCondition(needsParens);\n                    if (result) {\n                        result.negate = !result.negate;\n                    }\n                    return result;\n                }\n            },\n            parenthesisCondition: function (needsParens) {\n                function tryConditionFollowedByParenthesis(me) {\n                    var body;\n                    parserInput.save();\n                    body = me.condition(needsParens);\n                    if (!body) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    parserInput.forget();\n                    return body;\n                }\n\n                var body;\n                parserInput.save();\n                if (!parserInput.$str('(')) {\n                    parserInput.restore();\n                    return ;\n                }\n                body = tryConditionFollowedByParenthesis(this);\n                if (body) {\n                    parserInput.forget();\n                    return body;\n                }\n\n                body = this.atomicCondition(needsParens);\n                if (!body) {\n                    parserInput.restore();\n                    return ;\n                }\n                if (!parserInput.$char(')')) {\n                    parserInput.restore('expected \\')\\' got \\'' + parserInput.currentChar() + '\\'');\n                    return ;\n                }\n                parserInput.forget();\n                return body;\n            },\n            atomicCondition: function (needsParens) {\n                var entities = this.entities, index = parserInput.i, a, b, c, op;\n\n                function cond() {\n                    return this.addition() || entities.keyword() || entities.quoted() || entities.mixinLookup();\n                }\n                cond = cond.bind(this);\n\n                a = cond();\n                if (a) {\n                    if (parserInput.$char('>')) {\n                        if (parserInput.$char('=')) {\n                            op = '>=';\n                        } else {\n                            op = '>';\n                        }\n                    } else\n                    if (parserInput.$char('<')) {\n                        if (parserInput.$char('=')) {\n                            op = '<=';\n                        } else {\n                            op = '<';\n                        }\n                    } else\n                    if (parserInput.$char('=')) {\n                        if (parserInput.$char('>')) {\n                            op = '=>';\n                        } else if (parserInput.$char('<')) {\n                            op = '=<';\n                        } else {\n                            op = '=';\n                        }\n                    }\n                    if (op) {\n                        b = cond();\n                        if (b) {\n                            c = new(tree.Condition)(op, a, b, index, false);\n                        } else {\n                            error('expected expression');\n                        }\n                    } else {\n                        c = new(tree.Condition)('=', a, new(tree.Keyword)('true'), index, false);\n                    }\n                    return c;\n                }\n            },\n\n            //\n            // An operand is anything that can be part of an operation,\n            // such as a Color, or a Variable\n            //\n            operand: function () {\n                var entities = this.entities, negate;\n\n                if (parserInput.peek(/^-[@\\$\\(]/)) {\n                    negate = parserInput.$char('-');\n                }\n\n                var o = this.sub() || entities.dimension() ||\n                        entities.color() || entities.variable() ||\n                        entities.property() || entities.call() ||\n                        entities.quoted(true) || entities.colorKeyword() ||\n                        entities.mixinLookup();\n\n                if (negate) {\n                    o.parensInOp = true;\n                    o = new(tree.Negative)(o);\n                }\n\n                return o;\n            },\n\n            //\n            // Expressions either represent mathematical operations,\n            // or white-space delimited Entities.\n            //\n            //     1px solid black\n            //     @var * 2\n            //\n            expression: function () {\n                var entities = [], e, delim, index = parserInput.i;\n\n                do {\n                    e = this.comment();\n                    if (e) {\n                        entities.push(e);\n                        continue;\n                    }\n                    e = this.addition() || this.entity();\n                    if (e) {\n                        entities.push(e);\n                        // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\n                        if (!parserInput.peek(/^\\/[\\/*]/)) {\n                            delim = parserInput.$char('/');\n                            if (delim) {\n                                entities.push(new(tree.Anonymous)(delim, index));\n                            }\n                        }\n                    }\n                } while (e);\n                if (entities.length > 0) {\n                    return new(tree.Expression)(entities);\n                }\n            },\n            property: function () {\n                var name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/);\n                if (name) {\n                    return name[1];\n                }\n            },\n            ruleProperty: function () {\n                var name = [], index = [], s, k;\n\n                parserInput.save();\n\n                var simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/);\n                if (simpleProperty) {\n                    name = [new(tree.Keyword)(simpleProperty[1])];\n                    parserInput.forget();\n                    return name;\n                }\n\n                function match(re) {\n                    var i = parserInput.i,\n                        chunk = parserInput.$re(re);\n                    if (chunk) {\n                        index.push(i);\n                        return name.push(chunk[1]);\n                    }\n                }\n\n                match(/^(\\*?)/);\n                while (true) {\n                    if (!match(/^((?:[\\w-]+)|(?:[@\\$]\\{[\\w-]+\\}))/)) {\n                        break;\n                    }\n                }\n\n                if ((name.length > 1) && match(/^((?:\\+_|\\+)?)\\s*:/)) {\n                    parserInput.forget();\n\n                    // at last, we have the complete match now. move forward,\n                    // convert name particles to tree objects and return:\n                    if (name[0] === '') {\n                        name.shift();\n                        index.shift();\n                    }\n                    for (k = 0; k < name.length; k++) {\n                        s = name[k];\n                        name[k] = (s.charAt(0) !== '@' && s.charAt(0) !== '$') ?\n                            new(tree.Keyword)(s) :\n                            (s.charAt(0) === '@' ?\n                                new(tree.Variable)('@' + s.slice(2, -1), index[k], fileInfo) :\n                                new(tree.Property)('$' + s.slice(2, -1), index[k], fileInfo));\n                    }\n                    return name;\n                }\n                parserInput.restore();\n            }\n        }\n    };\n};\nParser.serializeVars = function(vars) {\n    var s = '';\n\n    for (var name in vars) {\n        if (Object.hasOwnProperty.call(vars, name)) {\n            var value = vars[name];\n            s += ((name[0] === '@') ? '' : '@') + name + ': ' + value +\n                ((String(value).slice(-1) === ';') ? '' : ';');\n        }\n    }\n\n    return s;\n};\n\nmodule.exports = Parser;\n\n},{\"../functions/function-registry\":27,\"../less-error\":38,\"../tree\":67,\"../utils\":89,\"../visitors\":93,\"./parser-input\":43}],45:[function(require,module,exports){\n/**\n * Plugin Manager\n */\nvar PluginManager = function(less) {\n    this.less = less;\n    this.visitors = [];\n    this.preProcessors = [];\n    this.postProcessors = [];\n    this.installedPlugins = [];\n    this.fileManagers = [];\n    this.iterator = -1;\n    this.pluginCache = {};\n    this.Loader = new less.PluginLoader(less);\n};\n\nvar pm, PluginManagerFactory = function(less, newFactory) {\n        if (newFactory || !pm) {\n            pm = new PluginManager(less);\n        }\n        return pm;\n    };\n\n/**\n * Adds all the plugins in the array\n * @param {Array} plugins\n */\nPluginManager.prototype.addPlugins = function(plugins) {\n    if (plugins) {\n        for (var i = 0; i < plugins.length; i++) {\n            this.addPlugin(plugins[i]);\n        }\n    }\n};\n/**\n *\n * @param plugin\n * @param {String} filename\n */\nPluginManager.prototype.addPlugin = function(plugin, filename, functionRegistry) {\n    this.installedPlugins.push(plugin);\n    if (filename) {\n        this.pluginCache[filename] = plugin;\n    }\n    if (plugin.install) {\n        plugin.install(this.less, this, functionRegistry || this.less.functions.functionRegistry);\n    }\n};\n/**\n *\n * @param filename\n */\nPluginManager.prototype.get = function(filename) {\n    return this.pluginCache[filename];\n};\n\n/**\n * Adds a visitor. The visitor object has options on itself to determine\n * when it should run.\n * @param visitor\n */\nPluginManager.prototype.addVisitor = function(visitor) {\n    this.visitors.push(visitor);\n};\n/**\n * Adds a pre processor object\n * @param {object} preProcessor\n * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\n */\nPluginManager.prototype.addPreProcessor = function(preProcessor, priority) {\n    var indexToInsertAt;\n    for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {\n        if (this.preProcessors[indexToInsertAt].priority >= priority) {\n            break;\n        }\n    }\n    this.preProcessors.splice(indexToInsertAt, 0, {preProcessor: preProcessor, priority: priority});\n};\n/**\n * Adds a post processor object\n * @param {object} postProcessor\n * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n */\nPluginManager.prototype.addPostProcessor = function(postProcessor, priority) {\n    var indexToInsertAt;\n    for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {\n        if (this.postProcessors[indexToInsertAt].priority >= priority) {\n            break;\n        }\n    }\n    this.postProcessors.splice(indexToInsertAt, 0, {postProcessor: postProcessor, priority: priority});\n};\n/**\n *\n * @param manager\n */\nPluginManager.prototype.addFileManager = function(manager) {\n    this.fileManagers.push(manager);\n};\n/**\n *\n * @returns {Array}\n * @private\n */\nPluginManager.prototype.getPreProcessors = function() {\n    var preProcessors = [];\n    for (var i = 0; i < this.preProcessors.length; i++) {\n        preProcessors.push(this.preProcessors[i].preProcessor);\n    }\n    return preProcessors;\n};\n/**\n *\n * @returns {Array}\n * @private\n */\nPluginManager.prototype.getPostProcessors = function() {\n    var postProcessors = [];\n    for (var i = 0; i < this.postProcessors.length; i++) {\n        postProcessors.push(this.postProcessors[i].postProcessor);\n    }\n    return postProcessors;\n};\n/**\n *\n * @returns {Array}\n * @private\n */\nPluginManager.prototype.getVisitors = function() {\n    return this.visitors;\n};\n\nPluginManager.prototype.visitor = function() {\n    var self = this;\n    return {\n        first: function() {\n            self.iterator = -1;\n            return self.visitors[self.iterator];\n        },\n        get: function() {\n            self.iterator += 1;\n            return self.visitors[self.iterator];\n        }\n    };\n};\n/**\n *\n * @returns {Array}\n * @private\n */\nPluginManager.prototype.getFileManagers = function() {\n    return this.fileManagers;\n};\n\n//\nmodule.exports = PluginManagerFactory;\n\n},{}],46:[function(require,module,exports){\nvar PromiseConstructor,\n    utils = require('./utils');\n\nmodule.exports = function(environment, ParseTree, ImportManager) {\n    var render = function (input, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = utils.copyOptions(this.options, {});\n        }\n        else {\n            options = utils.copyOptions(this.options, options || {});\n        }\n\n        if (!callback) {\n            if (!PromiseConstructor) {\n                PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise;\n            }\n            var self = this;\n            return new PromiseConstructor(function (resolve, reject) {\n                render.call(self, input, options, function(err, output) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            this.parse(input, options, function(err, root, imports, options) {\n                if (err) { return callback(err); }\n\n                var result;\n                try {\n                    var parseTree = new ParseTree(root, imports);\n                    result = parseTree.toCSS(options);\n                }\n                catch (err) { return callback(err); }\n\n                callback(null, result);\n            });\n        }\n    };\n\n    return render;\n};\n\n},{\"./utils\":89,\"promise\":undefined}],47:[function(require,module,exports){\nmodule.exports = function (SourceMapOutput, environment) {\n\n    var SourceMapBuilder = function (options) {\n        this.options = options;\n    };\n\n    SourceMapBuilder.prototype.toCSS = function(rootNode, options, imports) {\n        var sourceMapOutput = new SourceMapOutput(\n            {\n                contentsIgnoredCharsMap: imports.contentsIgnoredChars,\n                rootNode: rootNode,\n                contentsMap: imports.contents,\n                sourceMapFilename: this.options.sourceMapFilename,\n                sourceMapURL: this.options.sourceMapURL,\n                outputFilename: this.options.sourceMapOutputFilename,\n                sourceMapBasepath: this.options.sourceMapBasepath,\n                sourceMapRootpath: this.options.sourceMapRootpath,\n                outputSourceFiles: this.options.outputSourceFiles,\n                sourceMapGenerator: this.options.sourceMapGenerator,\n                sourceMapFileInline: this.options.sourceMapFileInline\n            });\n\n        var css = sourceMapOutput.toCSS(options);\n        this.sourceMap = sourceMapOutput.sourceMap;\n        this.sourceMapURL = sourceMapOutput.sourceMapURL;\n        if (this.options.sourceMapInputFilename) {\n            this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);\n        }\n        if (this.options.sourceMapBasepath !== undefined && this.sourceMapURL !== undefined) {\n            this.sourceMapURL = sourceMapOutput.removeBasepath(this.sourceMapURL);\n        }\n        return css + this.getCSSAppendage();\n    };\n\n    SourceMapBuilder.prototype.getCSSAppendage = function() {\n\n        var sourceMapURL = this.sourceMapURL;\n        if (this.options.sourceMapFileInline) {\n            if (this.sourceMap === undefined) {\n                return '';\n            }\n            sourceMapURL = 'data:application/json;base64,' + environment.encodeBase64(this.sourceMap);\n        }\n\n        if (sourceMapURL) {\n            return '/*# sourceMappingURL=' + sourceMapURL + ' */';\n        }\n        return '';\n    };\n\n    SourceMapBuilder.prototype.getExternalSourceMap = function() {\n        return this.sourceMap;\n    };\n    SourceMapBuilder.prototype.setExternalSourceMap = function(sourceMap) {\n        this.sourceMap = sourceMap;\n    };\n\n    SourceMapBuilder.prototype.isInline = function() {\n        return this.options.sourceMapFileInline;\n    };\n    SourceMapBuilder.prototype.getSourceMapURL = function() {\n        return this.sourceMapURL;\n    };\n    SourceMapBuilder.prototype.getOutputFilename = function() {\n        return this.options.sourceMapOutputFilename;\n    };\n    SourceMapBuilder.prototype.getInputFilename = function() {\n        return this.sourceMapInputFilename;\n    };\n\n    return SourceMapBuilder;\n};\n\n},{}],48:[function(require,module,exports){\nmodule.exports = function (environment) {\n\n    var SourceMapOutput = function (options) {\n        this._css = [];\n        this._rootNode = options.rootNode;\n        this._contentsMap = options.contentsMap;\n        this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\n        if (options.sourceMapFilename) {\n            this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\n        }\n        this._outputFilename = options.outputFilename;\n        this.sourceMapURL = options.sourceMapURL;\n        if (options.sourceMapBasepath) {\n            this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\n        }\n        if (options.sourceMapRootpath) {\n            this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\n            if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\n                this._sourceMapRootpath += '/';\n            }\n        } else {\n            this._sourceMapRootpath = '';\n        }\n        this._outputSourceFiles = options.outputSourceFiles;\n        this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\n\n        this._lineNumber = 0;\n        this._column = 0;\n    };\n\n    SourceMapOutput.prototype.removeBasepath = function(path) {\n        if (this._sourceMapBasepath && path.indexOf(this._sourceMapBasepath) === 0) {\n            path = path.substring(this._sourceMapBasepath.length);\n            if (path.charAt(0) === '\\\\' || path.charAt(0) === '/') {\n                path = path.substring(1);\n            }\n        }\n\n        return path;\n    };\n\n    SourceMapOutput.prototype.normalizeFilename = function(filename) {\n        filename = filename.replace(/\\\\/g, '/');\n        filename = this.removeBasepath(filename);\n        return (this._sourceMapRootpath || '') + filename;\n    };\n\n    SourceMapOutput.prototype.add = function(chunk, fileInfo, index, mapLines) {\n\n        // ignore adding empty strings\n        if (!chunk) {\n            return;\n        }\n\n        var lines,\n            sourceLines,\n            columns,\n            sourceColumns,\n            i;\n\n        if (fileInfo && fileInfo.filename) {\n            var inputSource = this._contentsMap[fileInfo.filename];\n\n            // remove vars/banner added to the top of the file\n            if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n                // adjust the index\n                index -= this._contentsIgnoredCharsMap[fileInfo.filename];\n                if (index < 0) { index = 0; }\n                // adjust the source\n                inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\n            }\n            inputSource = inputSource.substring(0, index);\n            sourceLines = inputSource.split('\\n');\n            sourceColumns = sourceLines[sourceLines.length - 1];\n        }\n\n        lines = chunk.split('\\n');\n        columns = lines[lines.length - 1];\n\n        if (fileInfo && fileInfo.filename) {\n            if (!mapLines) {\n                this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + 1, column: this._column},\n                    original: { line: sourceLines.length, column: sourceColumns.length},\n                    source: this.normalizeFilename(fileInfo.filename)});\n            } else {\n                for (i = 0; i < lines.length; i++) {\n                    this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + i + 1, column: i === 0 ? this._column : 0},\n                        original: { line: sourceLines.length + i, column: i === 0 ? sourceColumns.length : 0},\n                        source: this.normalizeFilename(fileInfo.filename)});\n                }\n            }\n        }\n\n        if (lines.length === 1) {\n            this._column += columns.length;\n        } else {\n            this._lineNumber += lines.length - 1;\n            this._column = columns.length;\n        }\n\n        this._css.push(chunk);\n    };\n\n    SourceMapOutput.prototype.isEmpty = function() {\n        return this._css.length === 0;\n    };\n\n    SourceMapOutput.prototype.toCSS = function(context) {\n        this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({ file: this._outputFilename, sourceRoot: null });\n\n        if (this._outputSourceFiles) {\n            for (var filename in this._contentsMap) {\n                if (this._contentsMap.hasOwnProperty(filename)) {\n                    var source = this._contentsMap[filename];\n                    if (this._contentsIgnoredCharsMap[filename]) {\n                        source = source.slice(this._contentsIgnoredCharsMap[filename]);\n                    }\n                    this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\n                }\n            }\n        }\n\n        this._rootNode.genCSS(context, this);\n\n        if (this._css.length > 0) {\n            var sourceMapURL,\n                sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\n\n            if (this.sourceMapURL) {\n                sourceMapURL = this.sourceMapURL;\n            } else if (this._sourceMapFilename) {\n                sourceMapURL = this._sourceMapFilename;\n            }\n            this.sourceMapURL = sourceMapURL;\n\n            this.sourceMap = sourceMapContent;\n        }\n\n        return this._css.join('');\n    };\n\n    return SourceMapOutput;\n};\n\n},{}],49:[function(require,module,exports){\nvar contexts = require('./contexts'),\n    visitor = require('./visitors'),\n    tree = require('./tree');\n\nmodule.exports = function(root, options) {\n    options = options || {};\n    var evaldRoot,\n        variables = options.variables,\n        evalEnv = new contexts.Eval(options);\n\n    //\n    // Allows setting variables with a hash, so:\n    //\n    //   `{ color: new tree.Color('#f01') }` will become:\n    //\n    //   new tree.Declaration('@color',\n    //     new tree.Value([\n    //       new tree.Expression([\n    //         new tree.Color('#f01')\n    //       ])\n    //     ])\n    //   )\n    //\n    if (typeof variables === 'object' && !Array.isArray(variables)) {\n        variables = Object.keys(variables).map(function (k) {\n            var value = variables[k];\n\n            if (!(value instanceof tree.Value)) {\n                if (!(value instanceof tree.Expression)) {\n                    value = new tree.Expression([value]);\n                }\n                value = new tree.Value([value]);\n            }\n            return new tree.Declaration('@' + k, value, false, null, 0);\n        });\n        evalEnv.frames = [new tree.Ruleset(null, variables)];\n    }\n\n    var visitors = [\n            new visitor.JoinSelectorVisitor(),\n            new visitor.MarkVisibleSelectorsVisitor(true),\n            new visitor.ExtendVisitor(),\n            new visitor.ToCSSVisitor({compress: Boolean(options.compress)})\n        ], preEvalVisitors = [], v, visitorIterator;\n\n    /**\n     * first() / get() allows visitors to be added while visiting\n     * \n     * @todo Add scoping for visitors just like functions for @plugin; right now they're global\n     */\n    if (options.pluginManager) {\n        visitorIterator = options.pluginManager.visitor();\n        for (var i = 0; i < 2; i++) {\n            visitorIterator.first();\n            while ((v = visitorIterator.get())) {\n                if (v.isPreEvalVisitor) {\n                    if (i === 0 || preEvalVisitors.indexOf(v) === -1) {\n                        preEvalVisitors.push(v);\n                        v.run(root);\n                    }\n                }\n                else {\n                    if (i === 0 || visitors.indexOf(v) === -1) {\n                        if (v.isPreVisitor) {\n                            visitors.unshift(v);\n                        }\n                        else {\n                            visitors.push(v);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    evaldRoot = root.eval(evalEnv);\n\n    for (var i = 0; i < visitors.length; i++) {\n        visitors[i].run(evaldRoot);\n    }\n\n    // Run any remaining visitors added after eval pass\n    if (options.pluginManager) {\n        visitorIterator.first();\n        while ((v = visitorIterator.get())) {\n            if (visitors.indexOf(v) === -1 && preEvalVisitors.indexOf(v) === -1) {\n                v.run(evaldRoot);\n            }\n        }\n    }\n\n    return evaldRoot;\n};\n\n},{\"./contexts\":13,\"./tree\":67,\"./visitors\":93}],50:[function(require,module,exports){\nvar Node = require('./node');\n\nvar Anonymous = function (value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {\n    this.value = value;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.mapLines = mapLines;\n    this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;\n    this.allowRoot = true;\n    this.copyVisibilityInfo(visibilityInfo);\n};\nAnonymous.prototype = new Node();\nAnonymous.prototype.type = 'Anonymous';\nAnonymous.prototype.eval = function () {\n    return new Anonymous(this.value, this._index, this._fileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());\n};\nAnonymous.prototype.compare = function (other) {\n    return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n};\nAnonymous.prototype.isRulesetLike = function() {\n    return this.rulesetLike;\n};\nAnonymous.prototype.genCSS = function (context, output) {\n    this.nodeVisible = Boolean(this.value);\n    if (this.nodeVisible) {\n        output.add(this.value, this._fileInfo, this._index, this.mapLines);\n    }\n};\nmodule.exports = Anonymous;\n\n},{\"./node\":76}],51:[function(require,module,exports){\nvar Node = require('./node');\n\nvar Assignment = function (key, val) {\n    this.key = key;\n    this.value = val;\n};\n\nAssignment.prototype = new Node();\nAssignment.prototype.type = 'Assignment';\nAssignment.prototype.accept = function (visitor) {\n    this.value = visitor.visit(this.value);\n};\nAssignment.prototype.eval = function (context) {\n    if (this.value.eval) {\n        return new Assignment(this.key, this.value.eval(context));\n    }\n    return this;\n};\nAssignment.prototype.genCSS = function (context, output) {\n    output.add(this.key + '=');\n    if (this.value.genCSS) {\n        this.value.genCSS(context, output);\n    } else {\n        output.add(this.value);\n    }\n};\nmodule.exports = Assignment;\n\n},{\"./node\":76}],52:[function(require,module,exports){\nvar Node = require('./node'),\n    Selector = require('./selector'),\n    Ruleset = require('./ruleset'),\n    Anonymous = require('./anonymous');\n\nvar AtRule = function (name, value, rules, index, currentFileInfo, debugInfo, isRooted, visibilityInfo) {\n    var i;\n\n    this.name  = name;\n    this.value = (value instanceof Node) ? value : (value ? new Anonymous(value) : value);\n    if (rules) {\n        if (Array.isArray(rules)) {\n            this.rules = rules;\n        } else {\n            this.rules = [rules];\n            this.rules[0].selectors = (new Selector([], null, null, index, currentFileInfo)).createEmptySelectors();\n        }\n        for (i = 0; i < this.rules.length; i++) {\n            this.rules[i].allowImports = true;\n        }\n        this.setParent(this.rules, this);\n    }\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.debugInfo = debugInfo;\n    this.isRooted = isRooted || false;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n};\n\nAtRule.prototype = new Node();\nAtRule.prototype.type = 'AtRule';\nAtRule.prototype.accept = function (visitor) {\n    var value = this.value, rules = this.rules;\n    if (rules) {\n        this.rules = visitor.visitArray(rules);\n    }\n    if (value) {\n        this.value = visitor.visit(value);\n    }\n};\nAtRule.prototype.isRulesetLike = function() {\n    return this.rules || !this.isCharset();\n};\nAtRule.prototype.isCharset = function() {\n    return '@charset' === this.name;\n};\nAtRule.prototype.genCSS = function (context, output) {\n    var value = this.value, rules = this.rules;\n    output.add(this.name, this.fileInfo(), this.getIndex());\n    if (value) {\n        output.add(' ');\n        value.genCSS(context, output);\n    }\n    if (rules) {\n        this.outputRuleset(context, output, rules);\n    } else {\n        output.add(';');\n    }\n};\nAtRule.prototype.eval = function (context) {\n    var mediaPathBackup, mediaBlocksBackup, value = this.value, rules = this.rules;\n\n    // media stored inside other atrule should not bubble over it\n    // backpup media bubbling information\n    mediaPathBackup = context.mediaPath;\n    mediaBlocksBackup = context.mediaBlocks;\n    // deleted media bubbling information\n    context.mediaPath = [];\n    context.mediaBlocks = [];\n\n    if (value) {\n        value = value.eval(context);\n    }\n    if (rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        rules = [rules[0].eval(context)];\n        rules[0].root = true;\n    }\n    // restore media bubbling information\n    context.mediaPath = mediaPathBackup;\n    context.mediaBlocks = mediaBlocksBackup;\n\n    return new AtRule(this.name, value, rules,\n        this.getIndex(), this.fileInfo(), this.debugInfo, this.isRooted, this.visibilityInfo());\n};\nAtRule.prototype.variable = function (name) {\n    if (this.rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        return Ruleset.prototype.variable.call(this.rules[0], name);\n    }\n};\nAtRule.prototype.find = function () {\n    if (this.rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        return Ruleset.prototype.find.apply(this.rules[0], arguments);\n    }\n};\nAtRule.prototype.rulesets = function () {\n    if (this.rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        return Ruleset.prototype.rulesets.apply(this.rules[0]);\n    }\n};\nAtRule.prototype.outputRuleset = function (context, output, rules) {\n    var ruleCnt = rules.length, i;\n    context.tabLevel = (context.tabLevel | 0) + 1;\n\n    // Compressed\n    if (context.compress) {\n        output.add('{');\n        for (i = 0; i < ruleCnt; i++) {\n            rules[i].genCSS(context, output);\n        }\n        output.add('}');\n        context.tabLevel--;\n        return;\n    }\n\n    // Non-compressed\n    var tabSetStr = '\\n' + Array(context.tabLevel).join('  '), tabRuleStr = tabSetStr + '  ';\n    if (!ruleCnt) {\n        output.add(' {' + tabSetStr + '}');\n    } else {\n        output.add(' {' + tabRuleStr);\n        rules[0].genCSS(context, output);\n        for (i = 1; i < ruleCnt; i++) {\n            output.add(tabRuleStr);\n            rules[i].genCSS(context, output);\n        }\n        output.add(tabSetStr + '}');\n    }\n\n    context.tabLevel--;\n};\nmodule.exports = AtRule;\n\n},{\"./anonymous\":50,\"./node\":76,\"./ruleset\":81,\"./selector\":82}],53:[function(require,module,exports){\nvar Node = require('./node');\n\nvar Attribute = function (key, op, value) {\n    this.key = key;\n    this.op = op;\n    this.value = value;\n};\nAttribute.prototype = new Node();\nAttribute.prototype.type = 'Attribute';\nAttribute.prototype.eval = function (context) {\n    return new Attribute(this.key.eval ? this.key.eval(context) : this.key,\n        this.op, (this.value && this.value.eval) ? this.value.eval(context) : this.value);\n};\nAttribute.prototype.genCSS = function (context, output) {\n    output.add(this.toCSS(context));\n};\nAttribute.prototype.toCSS = function (context) {\n    var value = this.key.toCSS ? this.key.toCSS(context) : this.key;\n\n    if (this.op) {\n        value += this.op;\n        value += (this.value.toCSS ? this.value.toCSS(context) : this.value);\n    }\n\n    return '[' + value + ']';\n};\nmodule.exports = Attribute;\n\n},{\"./node\":76}],54:[function(require,module,exports){\nvar Node = require('./node'),\n    Anonymous = require('./anonymous'),\n    FunctionCaller = require('../functions/function-caller');\n//\n// A function call node.\n//\nvar Call = function (name, args, index, currentFileInfo) {\n    this.name = name;\n    this.args = args;\n    this.calc = name === 'calc';\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n};\nCall.prototype = new Node();\nCall.prototype.type = 'Call';\nCall.prototype.accept = function (visitor) {\n    if (this.args) {\n        this.args = visitor.visitArray(this.args);\n    }\n};\n//\n// When evaluating a function call,\n// we either find the function in the functionRegistry,\n// in which case we call it, passing the  evaluated arguments,\n// if this returns null or we cannot find the function, we\n// simply print it out as it appeared originally [2].\n//\n// The reason why we evaluate the arguments, is in the case where\n// we try to pass a variable to a function, like: `saturate(@color)`.\n// The function should receive the value, not the variable.\n//\nCall.prototype.eval = function (context) {\n    /**\n     * Turn off math for calc(), and switch back on for evaluating nested functions\n     */\n    var currentMathContext = context.mathOn;\n    context.mathOn = !this.calc;\n    if (this.calc || context.inCalc) {\n        context.enterCalc();\n    }\n    var args = this.args.map(function (a) { return a.eval(context); });\n    if (this.calc || context.inCalc) {\n        context.exitCalc();\n    }\n    context.mathOn = currentMathContext;\n\n    var result, funcCaller = new FunctionCaller(this.name, context, this.getIndex(), this.fileInfo());\n    \n    if (funcCaller.isValid()) {\n        try {\n            result = funcCaller.call(args);\n        } catch (e) {\n            throw { \n                type: e.type || 'Runtime',\n                message: 'error evaluating function `' + this.name + '`' +\n                         (e.message ? ': ' + e.message : ''),\n                index: this.getIndex(), \n                filename: this.fileInfo().filename,\n                line: e.lineNumber,\n                column: e.columnNumber\n            };\n        }\n\n        if (result !== null && result !== undefined) {\n            // Results that that are not nodes are cast as Anonymous nodes\n            // Falsy values or booleans are returned as empty nodes\n            if (!(result instanceof Node)) {\n                if (!result || result === true) {\n                    result = new Anonymous(null); \n                }\n                else {\n                    result = new Anonymous(result.toString()); \n                }\n                \n            }\n            result._index = this._index;\n            result._fileInfo = this._fileInfo;\n            return result;\n        }\n\n    }\n\n    return new Call(this.name, args, this.getIndex(), this.fileInfo());\n};\nCall.prototype.genCSS = function (context, output) {\n    output.add(this.name + '(', this.fileInfo(), this.getIndex());\n\n    for (var i = 0; i < this.args.length; i++) {\n        this.args[i].genCSS(context, output);\n        if (i + 1 < this.args.length) {\n            output.add(', ');\n        }\n    }\n\n    output.add(')');\n};\nmodule.exports = Call;\n\n},{\"../functions/function-caller\":26,\"./anonymous\":50,\"./node\":76}],55:[function(require,module,exports){\nvar Node = require('./node'),\n    colors = require('../data/colors');\n\n//\n// RGB Colors - #ff0014, #eee\n//\nvar Color = function (rgb, a, originalForm) {\n    var self = this;\n    //\n    // The end goal here, is to parse the arguments\n    // into an integer triplet, such as `128, 255, 0`\n    //\n    // This facilitates operations and conversions.\n    //\n    if (Array.isArray(rgb)) {\n        this.rgb = rgb;\n    } else if (rgb.length >= 6) {\n        this.rgb = [];\n        rgb.match(/.{2}/g).map(function (c, i) {\n            if (i < 3) {\n                self.rgb.push(parseInt(c, 16));\n            } else {\n                self.alpha = (parseInt(c, 16)) / 255;\n            }\n        });\n    } else {\n        this.rgb = [];\n        rgb.split('').map(function (c, i) {\n            if (i < 3) {\n                self.rgb.push(parseInt(c + c, 16));\n            } else {\n                self.alpha = (parseInt(c + c, 16)) / 255;\n            }\n        });\n    }\n    this.alpha = this.alpha || (typeof a === 'number' ? a : 1);\n    if (typeof originalForm !== 'undefined') {\n        this.value = originalForm;\n    }\n};\n\nColor.prototype = new Node();\nColor.prototype.type = 'Color';\n\nfunction clamp(v, max) {\n    return Math.min(Math.max(v, 0), max);\n}\n\nfunction toHex(v) {\n    return '#' + v.map(function (c) {\n        c = clamp(Math.round(c), 255);\n        return (c < 16 ? '0' : '') + c.toString(16);\n    }).join('');\n}\n\nColor.prototype.luma = function () {\n    var r = this.rgb[0] / 255,\n        g = this.rgb[1] / 255,\n        b = this.rgb[2] / 255;\n\n    r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);\n    g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);\n    b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);\n\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n};\nColor.prototype.genCSS = function (context, output) {\n    output.add(this.toCSS(context));\n};\nColor.prototype.toCSS = function (context, doNotCompress) {\n    var compress = context && context.compress && !doNotCompress, color, alpha,\n        colorFunction, args = [];\n\n    // `value` is set if this color was originally\n    // converted from a named color string so we need\n    // to respect this and try to output named color too.\n    alpha = this.fround(context, this.alpha);\n\n    if (this.value) {\n        if (this.value.indexOf('rgb') === 0) {\n            if (alpha < 1) {\n                colorFunction = 'rgba';\n            }\n        } else if (this.value.indexOf('hsl') === 0) {\n            if (alpha < 1) {\n                colorFunction = 'hsla';\n            } else {\n                colorFunction = 'hsl';\n            }\n        } else {\n            return this.value;\n        }\n    } else {\n        if (alpha < 1) {\n            colorFunction = 'rgba';\n        }\n    }\n\n    switch (colorFunction) {\n        case 'rgba':\n            args = this.rgb.map(function (c) {\n                return clamp(Math.round(c), 255);\n            }).concat(clamp(alpha, 1));\n            break;\n        case 'hsla':\n            args.push(clamp(alpha, 1));\n        case 'hsl':\n            color = this.toHSL();\n            args = [\n                this.fround(context, color.h),\n                this.fround(context, color.s * 100) + '%',\n                this.fround(context, color.l * 100) + '%'\n            ].concat(args);\n    }\n\n    if (colorFunction) {\n        // Values are capped between `0` and `255`, rounded and zero-padded.\n        return colorFunction + '(' + args.join(',' + (compress ? '' : ' ')) + ')';\n    }\n\n    color = this.toRGB();\n\n    if (compress) {\n        var splitcolor = color.split('');\n\n        // Convert color to short format\n        if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {\n            color = '#' + splitcolor[1] + splitcolor[3] + splitcolor[5];\n        }\n    }\n\n    return color;\n};\n\n//\n// Operations have to be done per-channel, if not,\n// channels will spill onto each other. Once we have\n// our result, in the form of an integer triplet,\n// we create a new Color node to hold the result.\n//\nColor.prototype.operate = function (context, op, other) {\n    var rgb = new Array(3);\n    var alpha = this.alpha * (1 - other.alpha) + other.alpha;\n    for (var c = 0; c < 3; c++) {\n        rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);\n    }\n    return new Color(rgb, alpha);\n};\nColor.prototype.toRGB = function () {\n    return toHex(this.rgb);\n};\nColor.prototype.toHSL = function () {\n    var r = this.rgb[0] / 255,\n        g = this.rgb[1] / 255,\n        b = this.rgb[2] / 255,\n        a = this.alpha;\n\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h, s, l = (max + min) / 2, d = max - min;\n\n    if (max === min) {\n        h = s = 0;\n    } else {\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n        switch (max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2;               break;\n            case b: h = (r - g) / d + 4;               break;\n        }\n        h /= 6;\n    }\n    return { h: h * 360, s: s, l: l, a: a };\n};\n// Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\nColor.prototype.toHSV = function () {\n    var r = this.rgb[0] / 255,\n        g = this.rgb[1] / 255,\n        b = this.rgb[2] / 255,\n        a = this.alpha;\n\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    if (max === 0) {\n        s = 0;\n    } else {\n        s = d / max;\n    }\n\n    if (max === min) {\n        h = 0;\n    } else {\n        switch (max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h * 360, s: s, v: v, a: a };\n};\nColor.prototype.toARGB = function () {\n    return toHex([this.alpha * 255].concat(this.rgb));\n};\nColor.prototype.compare = function (x) {\n    return (x.rgb &&\n        x.rgb[0] === this.rgb[0] &&\n        x.rgb[1] === this.rgb[1] &&\n        x.rgb[2] === this.rgb[2] &&\n        x.alpha  === this.alpha) ? 0 : undefined;\n};\n\nColor.fromKeyword = function(keyword) {\n    var c, key = keyword.toLowerCase();\n    if (colors.hasOwnProperty(key)) {\n        c = new Color(colors[key].slice(1));\n    }\n    else if (key === 'transparent') {\n        c = new Color([0, 0, 0], 0);\n    }\n\n    if (c) {\n        c.value = keyword;\n        return c;\n    }\n};\nmodule.exports = Color;\n\n},{\"../data/colors\":14,\"./node\":76}],56:[function(require,module,exports){\nvar Node = require('./node');\n\nvar Combinator = function (value) {\n    if (value === ' ') {\n        this.value = ' ';\n        this.emptyOrWhitespace = true;\n    } else {\n        this.value = value ? value.trim() : '';\n        this.emptyOrWhitespace = this.value === '';\n    }\n};\nCombinator.prototype = new Node();\nCombinator.prototype.type = 'Combinator';\nvar _noSpaceCombinators = {\n    '': true,\n    ' ': true,\n    '|': true\n};\nCombinator.prototype.genCSS = function (context, output) {\n    var spaceOrEmpty = (context.compress || _noSpaceCombinators[this.value]) ? '' : ' ';\n    output.add(spaceOrEmpty + this.value + spaceOrEmpty);\n};\nmodule.exports = Combinator;\n\n},{\"./node\":76}],57:[function(require,module,exports){\nvar Node = require('./node'),\n    getDebugInfo = require('./debug-info');\n\nvar Comment = function (value, isLineComment, index, currentFileInfo) {\n    this.value = value;\n    this.isLineComment = isLineComment;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.allowRoot = true;\n};\nComment.prototype = new Node();\nComment.prototype.type = 'Comment';\nComment.prototype.genCSS = function (context, output) {\n    if (this.debugInfo) {\n        output.add(getDebugInfo(context, this), this.fileInfo(), this.getIndex());\n    }\n    output.add(this.value);\n};\nComment.prototype.isSilent = function(context) {\n    var isCompressed = context.compress && this.value[2] !== '!';\n    return this.isLineComment || isCompressed;\n};\nmodule.exports = Comment;\n\n},{\"./debug-info\":59,\"./node\":76}],58:[function(require,module,exports){\nvar Node = require('./node');\n\nvar Condition = function (op, l, r, i, negate) {\n    this.op = op.trim();\n    this.lvalue = l;\n    this.rvalue = r;\n    this._index = i;\n    this.negate = negate;\n};\nCondition.prototype = new Node();\nCondition.prototype.type = 'Condition';\nCondition.prototype.accept = function (visitor) {\n    this.lvalue = visitor.visit(this.lvalue);\n    this.rvalue = visitor.visit(this.rvalue);\n};\nCondition.prototype.eval = function (context) {\n    var result = (function (op, a, b) {\n        switch (op) {\n            case 'and': return a && b;\n            case 'or':  return a || b;\n            default:\n                switch (Node.compare(a, b)) {\n                    case -1:\n                        return op === '<' || op === '=<' || op === '<=';\n                    case 0:\n                        return op === '=' || op === '>=' || op === '=<' || op === '<=';\n                    case 1:\n                        return op === '>' || op === '>=';\n                    default:\n                        return false;\n                }\n        }\n    })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\n\n    return this.negate ? !result : result;\n};\nmodule.exports = Condition;\n\n},{\"./node\":76}],59:[function(require,module,exports){\nvar debugInfo = function(context, ctx, lineSeparator) {\n    var result = '';\n    if (context.dumpLineNumbers && !context.compress) {\n        switch (context.dumpLineNumbers) {\n            case 'comments':\n                result = debugInfo.asComment(ctx);\n                break;\n            case 'mediaquery':\n                result = debugInfo.asMediaQuery(ctx);\n                break;\n            case 'all':\n                result = debugInfo.asComment(ctx) + (lineSeparator || '') + debugInfo.asMediaQuery(ctx);\n                break;\n        }\n    }\n    return result;\n};\n\ndebugInfo.asComment = function(ctx) {\n    return '/* line ' + ctx.debugInfo.lineNumber + ', ' + ctx.debugInfo.fileName + ' */\\n';\n};\n\ndebugInfo.asMediaQuery = function(ctx) {\n    var filenameWithProtocol = ctx.debugInfo.fileName;\n    if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\n        filenameWithProtocol = 'file://' + filenameWithProtocol;\n    }\n    return '@media -sass-debug-info{filename{font-family:' +\n        filenameWithProtocol.replace(/([.:\\/\\\\])/g, function (a) {\n            if (a == '\\\\') {\n                a = '\\/';\n            }\n            return '\\\\' + a;\n        }) +\n        '}line{font-family:\\\\00003' + ctx.debugInfo.lineNumber + '}}\\n';\n};\n\nmodule.exports = debugInfo;\n\n},{}],60:[function(require,module,exports){\nvar Node = require('./node'),\n    Value = require('./value'),\n    Keyword = require('./keyword'),\n    Anonymous = require('./anonymous'),\n    MATH = require('../constants').Math;\n\nvar Declaration = function (name, value, important, merge, index, currentFileInfo, inline, variable) {\n    this.name = name;\n    this.value = (value instanceof Node) ? value : new Value([value ? new Anonymous(value) : null]);\n    this.important = important ? ' ' + important.trim() : '';\n    this.merge = merge;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.inline = inline || false;\n    this.variable = (variable !== undefined) ? variable\n        : (name.charAt && (name.charAt(0) === '@'));\n    this.allowRoot = true;\n    this.setParent(this.value, this);\n};\n\nfunction evalName(context, name) {\n    var value = '', i, n = name.length,\n        output = {add: function (s) {value += s;}};\n    for (i = 0; i < n; i++) {\n        name[i].eval(context).genCSS(context, output);\n    }\n    return value;\n}\n\nDeclaration.prototype = new Node();\nDeclaration.prototype.type = 'Declaration';\nDeclaration.prototype.genCSS = function (context, output) {\n    output.add(this.name + (context.compress ? ':' : ': '), this.fileInfo(), this.getIndex());\n    try {\n        this.value.genCSS(context, output);\n    }\n    catch (e) {\n        e.index = this._index;\n        e.filename = this._fileInfo.filename;\n        throw e;\n    }\n    output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? '' : ';'), this._fileInfo, this._index);\n};\nDeclaration.prototype.eval = function (context) {\n    var mathBypass = false, prevMath, name = this.name, evaldValue, variable = this.variable;\n    if (typeof name !== 'string') {\n        // expand 'primitive' name directly to get\n        // things faster (~10% for benchmark.less):\n        name = (name.length === 1) && (name[0] instanceof Keyword) ?\n                name[0].value : evalName(context, name);\n        variable = false; // never treat expanded interpolation as new variable name\n    }\n\n    // @todo remove when parens-division is default\n    if (name === 'font' && context.math === MATH.ALWAYS) {\n        mathBypass = true;\n        prevMath = context.math;\n        context.math = MATH.PARENS_DIVISION;\n    }\n    try {\n        context.importantScope.push({});\n        evaldValue = this.value.eval(context);\n\n        if (!this.variable && evaldValue.type === 'DetachedRuleset') {\n            throw { message: 'Rulesets cannot be evaluated on a property.',\n                index: this.getIndex(), filename: this.fileInfo().filename };\n        }\n        var important = this.important,\n            importantResult = context.importantScope.pop();\n        if (!important && importantResult.important) {\n            important = importantResult.important;\n        }\n\n        return new Declaration(name,\n                          evaldValue,\n                          important,\n                          this.merge,\n                          this.getIndex(), this.fileInfo(), this.inline,\n                              variable);\n    }\n    catch (e) {\n        if (typeof e.index !== 'number') {\n            e.index = this.getIndex();\n            e.filename = this.fileInfo().filename;\n        }\n        throw e;\n    }\n    finally {\n        if (mathBypass) {\n            context.math = prevMath;\n        }\n    }\n};\nDeclaration.prototype.makeImportant = function () {\n    return new Declaration(this.name,\n                          this.value,\n                          '!important',\n                          this.merge,\n                          this.getIndex(), this.fileInfo(), this.inline);\n};\n\nmodule.exports = Declaration;\n},{\"../constants\":12,\"./anonymous\":50,\"./keyword\":70,\"./node\":76,\"./value\":86}],61:[function(require,module,exports){\nvar Node = require('./node'),\n    contexts = require('../contexts'),\n    utils = require('../utils');\n\nvar DetachedRuleset = function (ruleset, frames) {\n    this.ruleset = ruleset;\n    this.frames = frames;\n    this.setParent(this.ruleset, this);\n};\nDetachedRuleset.prototype = new Node();\nDetachedRuleset.prototype.type = 'DetachedRuleset';\nDetachedRuleset.prototype.evalFirst = true;\nDetachedRuleset.prototype.accept = function (visitor) {\n    this.ruleset = visitor.visit(this.ruleset);\n};\nDetachedRuleset.prototype.eval = function (context) {\n    var frames = this.frames || utils.copyArray(context.frames);\n    return new DetachedRuleset(this.ruleset, frames);\n};\nDetachedRuleset.prototype.callEval = function (context) {\n    return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);\n};\nmodule.exports = DetachedRuleset;\n\n},{\"../contexts\":13,\"../utils\":89,\"./node\":76}],62:[function(require,module,exports){\nvar Node = require('./node'),\n    unitConversions = require('../data/unit-conversions'),\n    Unit = require('./unit'),\n    Color = require('./color');\n\n//\n// A number with a unit\n//\nvar Dimension = function (value, unit) {\n    this.value = parseFloat(value);\n    if (isNaN(this.value)) {\n        throw new Error('Dimension is not a number.');\n    }\n    this.unit = (unit && unit instanceof Unit) ? unit :\n      new Unit(unit ? [unit] : undefined);\n    this.setParent(this.unit, this);\n};\n\nDimension.prototype = new Node();\nDimension.prototype.type = 'Dimension';\nDimension.prototype.accept = function (visitor) {\n    this.unit = visitor.visit(this.unit);\n};\nDimension.prototype.eval = function (context) {\n    return this;\n};\nDimension.prototype.toColor = function () {\n    return new Color([this.value, this.value, this.value]);\n};\nDimension.prototype.genCSS = function (context, output) {\n    if ((context && context.strictUnits) && !this.unit.isSingular()) {\n        throw new Error('Multiple units in dimension. Correct the units or use the unit function. Bad unit: ' + this.unit.toString());\n    }\n\n    var value = this.fround(context, this.value),\n        strValue = String(value);\n\n    if (value !== 0 && value < 0.000001 && value > -0.000001) {\n        // would be output 1e-6 etc.\n        strValue = value.toFixed(20).replace(/0+$/, '');\n    }\n\n    if (context && context.compress) {\n        // Zero values doesn't need a unit\n        if (value === 0 && this.unit.isLength()) {\n            output.add(strValue);\n            return;\n        }\n\n        // Float values doesn't need a leading zero\n        if (value > 0 && value < 1) {\n            strValue = (strValue).substr(1);\n        }\n    }\n\n    output.add(strValue);\n    this.unit.genCSS(context, output);\n};\n\n// In an operation between two Dimensions,\n// we default to the first Dimension's unit,\n// so `1px + 2` will yield `3px`.\nDimension.prototype.operate = function (context, op, other) {\n    /* jshint noempty:false */\n    var value = this._operate(context, op, this.value, other.value),\n        unit = this.unit.clone();\n\n    if (op === '+' || op === '-') {\n        if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n            unit = other.unit.clone();\n            if (this.unit.backupUnit) {\n                unit.backupUnit = this.unit.backupUnit;\n            }\n        } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) {\n            // do nothing\n        } else {\n            other = other.convertTo(this.unit.usedUnits());\n\n            if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n                throw new Error('Incompatible units. Change the units or use the unit function. Bad units: \\'' + unit.toString() +\n                    '\\' and \\'' + other.unit.toString() + '\\'.');\n            }\n\n            value = this._operate(context, op, this.value, other.value);\n        }\n    } else if (op === '*') {\n        unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\n        unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\n        unit.cancel();\n    } else if (op === '/') {\n        unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\n        unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\n        unit.cancel();\n    }\n    return new Dimension(value, unit);\n};\nDimension.prototype.compare = function (other) {\n    var a, b;\n\n    if (!(other instanceof Dimension)) {\n        return undefined;\n    }\n\n    if (this.unit.isEmpty() || other.unit.isEmpty()) {\n        a = this;\n        b = other;\n    } else {\n        a = this.unify();\n        b = other.unify();\n        if (a.unit.compare(b.unit) !== 0) {\n            return undefined;\n        }\n    }\n\n    return Node.numericCompare(a.value, b.value);\n};\nDimension.prototype.unify = function () {\n    return this.convertTo({ length: 'px', duration: 's', angle: 'rad' });\n};\nDimension.prototype.convertTo = function (conversions) {\n    var value = this.value, unit = this.unit.clone(),\n        i, groupName, group, targetUnit, derivedConversions = {}, applyUnit;\n\n    if (typeof conversions === 'string') {\n        for (i in unitConversions) {\n            if (unitConversions[i].hasOwnProperty(conversions)) {\n                derivedConversions = {};\n                derivedConversions[i] = conversions;\n            }\n        }\n        conversions = derivedConversions;\n    }\n    applyUnit = function (atomicUnit, denominator) {\n        /* jshint loopfunc:true */\n        if (group.hasOwnProperty(atomicUnit)) {\n            if (denominator) {\n                value = value / (group[atomicUnit] / group[targetUnit]);\n            } else {\n                value = value * (group[atomicUnit] / group[targetUnit]);\n            }\n\n            return targetUnit;\n        }\n\n        return atomicUnit;\n    };\n\n    for (groupName in conversions) {\n        if (conversions.hasOwnProperty(groupName)) {\n            targetUnit = conversions[groupName];\n            group = unitConversions[groupName];\n\n            unit.map(applyUnit);\n        }\n    }\n\n    unit.cancel();\n\n    return new Dimension(value, unit);\n};\nmodule.exports = Dimension;\n\n},{\"../data/unit-conversions\":16,\"./color\":55,\"./node\":76,\"./unit\":84}],63:[function(require,module,exports){\nvar Node = require('./node'),\n    Paren = require('./paren'),\n    Combinator = require('./combinator');\n\nvar Element = function (combinator, value, isVariable, index, currentFileInfo, visibilityInfo) {\n    this.combinator = combinator instanceof Combinator ?\n                      combinator : new Combinator(combinator);\n\n    if (typeof value === 'string') {\n        this.value = value.trim();\n    } else if (value) {\n        this.value = value;\n    } else {\n        this.value = '';\n    }\n    this.isVariable = isVariable;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.setParent(this.combinator, this);\n};\nElement.prototype = new Node();\nElement.prototype.type = 'Element';\nElement.prototype.accept = function (visitor) {\n    var value = this.value;\n    this.combinator = visitor.visit(this.combinator);\n    if (typeof value === 'object') {\n        this.value = visitor.visit(value);\n    }\n};\nElement.prototype.eval = function (context) {\n    return new Element(this.combinator,\n                             this.value.eval ? this.value.eval(context) : this.value,\n                             this.isVariable,\n                             this.getIndex(),\n                             this.fileInfo(), this.visibilityInfo());\n};\nElement.prototype.clone = function () {\n    return new Element(this.combinator,\n        this.value,\n        this.isVariable,\n        this.getIndex(),\n        this.fileInfo(), this.visibilityInfo());\n};\nElement.prototype.genCSS = function (context, output) {\n    output.add(this.toCSS(context), this.fileInfo(), this.getIndex());\n};\nElement.prototype.toCSS = function (context) {\n    context = context || {};\n    var value = this.value, firstSelector = context.firstSelector;\n    if (value instanceof Paren) {\n        // selector in parens should not be affected by outer selector\n        // flags (breaks only interpolated selectors - see #1973)\n        context.firstSelector = true;\n    }\n    value = value.toCSS ? value.toCSS(context) : value;\n    context.firstSelector = firstSelector;\n    if (value === '' && this.combinator.value.charAt(0) === '&') {\n        return '';\n    } else {\n        return this.combinator.toCSS(context) + value;\n    }\n};\nmodule.exports = Element;\n\n},{\"./combinator\":56,\"./node\":76,\"./paren\":78}],64:[function(require,module,exports){\nvar Node = require('./node'),\n    Paren = require('./paren'),\n    Comment = require('./comment'),\n    Dimension = require('./dimension'),\n    MATH = require('../constants').Math;\n\nvar Expression = function (value, noSpacing) {\n    this.value = value;\n    this.noSpacing = noSpacing;\n    if (!value) {\n        throw new Error('Expression requires an array parameter');\n    }\n};\nExpression.prototype = new Node();\nExpression.prototype.type = 'Expression';\nExpression.prototype.accept = function (visitor) {\n    this.value = visitor.visitArray(this.value);\n};\nExpression.prototype.eval = function (context) {\n    var returnValue,\n        mathOn = context.isMathOn(),\n        inParenthesis = this.parens && \n            (context.math !== MATH.STRICT_LEGACY || !this.parensInOp),\n        doubleParen = false;\n    if (inParenthesis) {\n        context.inParenthesis();\n    }\n    if (this.value.length > 1) {\n        returnValue = new Expression(this.value.map(function (e) {\n            if (!e.eval) {\n                return e;\n            }\n            return e.eval(context);\n        }), this.noSpacing);\n    } else if (this.value.length === 1) {\n        if (this.value[0].parens && !this.value[0].parensInOp && !context.inCalc) {\n            doubleParen = true;\n        }\n        returnValue = this.value[0].eval(context);\n    } else {\n        returnValue = this;\n    }\n    if (inParenthesis) {\n        context.outOfParenthesis();\n    }\n    if (this.parens && this.parensInOp && !mathOn && !doubleParen \n        && (!(returnValue instanceof Dimension))) {\n        returnValue = new Paren(returnValue);\n    }\n    return returnValue;\n};\nExpression.prototype.genCSS = function (context, output) {\n    for (var i = 0; i < this.value.length; i++) {\n        this.value[i].genCSS(context, output);\n        if (!this.noSpacing && i + 1 < this.value.length) {\n            output.add(' ');\n        }\n    }\n};\nExpression.prototype.throwAwayComments = function () {\n    this.value = this.value.filter(function(v) {\n        return !(v instanceof Comment);\n    });\n};\nmodule.exports = Expression;\n\n},{\"../constants\":12,\"./comment\":57,\"./dimension\":62,\"./node\":76,\"./paren\":78}],65:[function(require,module,exports){\nvar Node = require('./node'),\n    Selector = require('./selector');\n\nvar Extend = function Extend(selector, option, index, currentFileInfo, visibilityInfo) {\n    this.selector = selector;\n    this.option = option;\n    this.object_id = Extend.next_id++;\n    this.parent_ids = [this.object_id];\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n\n    switch (option) {\n        case 'all':\n            this.allowBefore = true;\n            this.allowAfter = true;\n            break;\n        default:\n            this.allowBefore = false;\n            this.allowAfter = false;\n            break;\n    }\n    this.setParent(this.selector, this);\n};\nExtend.next_id = 0;\n\nExtend.prototype = new Node();\nExtend.prototype.type = 'Extend';\nExtend.prototype.accept = function (visitor) {\n    this.selector = visitor.visit(this.selector);\n};\nExtend.prototype.eval = function (context) {\n    return new Extend(this.selector.eval(context), this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n};\nExtend.prototype.clone = function (context) {\n    return new Extend(this.selector, this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n};\n// it concatenates (joins) all selectors in selector array\nExtend.prototype.findSelfSelectors = function (selectors) {\n    var selfElements = [],\n        i,\n        selectorElements;\n\n    for (i = 0; i < selectors.length; i++) {\n        selectorElements = selectors[i].elements;\n        // duplicate the logic in genCSS function inside the selector node.\n        // future TODO - move both logics into the selector joiner visitor\n        if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === '') {\n            selectorElements[0].combinator.value = ' ';\n        }\n        selfElements = selfElements.concat(selectors[i].elements);\n    }\n\n    this.selfSelectors = [new Selector(selfElements)];\n    this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());\n};\nmodule.exports = Extend;\n\n},{\"./node\":76,\"./selector\":82}],66:[function(require,module,exports){\nvar Node = require('./node'),\n    Media = require('./media'),\n    URL = require('./url'),\n    Quoted = require('./quoted'),\n    Ruleset = require('./ruleset'),\n    Anonymous = require('./anonymous'),\n    utils = require('../utils'),\n    LessError = require('../less-error');\n\n//\n// CSS @import node\n//\n// The general strategy here is that we don't want to wait\n// for the parsing to be completed, before we start importing\n// the file. That's because in the context of a browser,\n// most of the time will be spent waiting for the server to respond.\n//\n// On creation, we push the import path to our import queue, though\n// `import,push`, we also pass it a callback, which it'll call once\n// the file has been fetched, and parsed.\n//\nvar Import = function (path, features, options, index, currentFileInfo, visibilityInfo) {\n    this.options = options;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.path = path;\n    this.features = features;\n    this.allowRoot = true;\n\n    if (this.options.less !== undefined || this.options.inline) {\n        this.css = !this.options.less || this.options.inline;\n    } else {\n        var pathValue = this.getPath();\n        if (pathValue && /[#\\.\\&\\?]css([\\?;].*)?$/.test(pathValue)) {\n            this.css = true;\n        }\n    }\n    this.copyVisibilityInfo(visibilityInfo);\n    this.setParent(this.features, this);\n    this.setParent(this.path, this);\n};\n\n//\n// The actual import node doesn't return anything, when converted to CSS.\n// The reason is that it's used at the evaluation stage, so that the rules\n// it imports can be treated like any other rules.\n//\n// In `eval`, we make sure all Import nodes get evaluated, recursively, so\n// we end up with a flat structure, which can easily be imported in the parent\n// ruleset.\n//\nImport.prototype = new Node();\nImport.prototype.type = 'Import';\nImport.prototype.accept = function (visitor) {\n    if (this.features) {\n        this.features = visitor.visit(this.features);\n    }\n    this.path = visitor.visit(this.path);\n    if (!this.options.isPlugin && !this.options.inline && this.root) {\n        this.root = visitor.visit(this.root);\n    }\n};\nImport.prototype.genCSS = function (context, output) {\n    if (this.css && this.path._fileInfo.reference === undefined) {\n        output.add('@import ', this._fileInfo, this._index);\n        this.path.genCSS(context, output);\n        if (this.features) {\n            output.add(' ');\n            this.features.genCSS(context, output);\n        }\n        output.add(';');\n    }\n};\nImport.prototype.getPath = function () {\n    return (this.path instanceof URL) ?\n        this.path.value.value : this.path.value;\n};\nImport.prototype.isVariableImport = function () {\n    var path = this.path;\n    if (path instanceof URL) {\n        path = path.value;\n    }\n    if (path instanceof Quoted) {\n        return path.containsVariables();\n    }\n\n    return true;\n};\nImport.prototype.evalForImport = function (context) {\n    var path = this.path;\n\n    if (path instanceof URL) {\n        path = path.value;\n    }\n\n    return new Import(path.eval(context), this.features, this.options, this._index, this._fileInfo, this.visibilityInfo());\n};\nImport.prototype.evalPath = function (context) {\n    var path = this.path.eval(context);\n    var fileInfo = this._fileInfo;\n\n    if (!(path instanceof URL)) {\n        // Add the rootpath if the URL requires a rewrite\n        var pathValue = path.value;\n        if (fileInfo &&\n            pathValue &&\n            context.pathRequiresRewrite(pathValue)) {\n            path.value = context.rewritePath(pathValue, fileInfo.rootpath);\n        } else {\n            path.value = context.normalizePath(path.value);\n        }\n    }\n\n    return path;\n};\nImport.prototype.eval = function (context) {\n    var result = this.doEval(context);\n    if (this.options.reference || this.blocksVisibility()) {\n        if (result.length || result.length === 0) {\n            result.forEach(function (node) {\n                node.addVisibilityBlock();\n            }\n            );\n        } else {\n            result.addVisibilityBlock();\n        }\n    }\n    return result;\n};\nImport.prototype.doEval = function (context) {\n    var ruleset, registry,\n        features = this.features && this.features.eval(context);\n\n    if (this.options.isPlugin) {\n        if (this.root && this.root.eval) {\n            try {\n                this.root.eval(context);\n            }\n            catch (e) {\n                e.message = 'Plugin error during evaluation';\n                throw new LessError(e, this.root.imports, this.root.filename);\n            }\n        }\n        registry = context.frames[0] && context.frames[0].functionRegistry;\n        if ( registry && this.root && this.root.functions ) {\n            registry.addMultiple( this.root.functions );\n        }\n\n        return [];\n    }\n\n    if (this.skip) {\n        if (typeof this.skip === 'function') {\n            this.skip = this.skip();\n        }\n        if (this.skip) {\n            return [];\n        }\n    }\n    if (this.options.inline) {\n        var contents = new Anonymous(this.root, 0,\n            {\n                filename: this.importedFilename,\n                reference: this.path._fileInfo && this.path._fileInfo.reference\n            }, true, true);\n\n        return this.features ? new Media([contents], this.features.value) : [contents];\n    } else if (this.css) {\n        var newImport = new Import(this.evalPath(context), features, this.options, this._index);\n        if (!newImport.css && this.error) {\n            throw this.error;\n        }\n        return newImport;\n    } else {\n        ruleset = new Ruleset(null, utils.copyArray(this.root.rules));\n        ruleset.evalImports(context);\n\n        return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;\n    }\n};\nmodule.exports = Import;\n\n},{\"../less-error\":38,\"../utils\":89,\"./anonymous\":50,\"./media\":71,\"./node\":76,\"./quoted\":80,\"./ruleset\":81,\"./url\":85}],67:[function(require,module,exports){\nvar tree = Object.create(null);\n\ntree.Node = require('./node');\ntree.Color = require('./color');\ntree.AtRule = require('./atrule');\ntree.DetachedRuleset = require('./detached-ruleset');\ntree.Operation = require('./operation');\ntree.Dimension = require('./dimension');\ntree.Unit = require('./unit');\ntree.Keyword = require('./keyword');\ntree.Variable = require('./variable');\ntree.Property = require('./property');\ntree.Ruleset = require('./ruleset');\ntree.Element = require('./element');\ntree.Attribute = require('./attribute');\ntree.Combinator = require('./combinator');\ntree.Selector = require('./selector');\ntree.Quoted = require('./quoted');\ntree.Expression = require('./expression');\ntree.Declaration = require('./declaration');\ntree.Call = require('./call');\ntree.URL = require('./url');\ntree.Import = require('./import');\ntree.mixin = {\n    Call: require('./mixin-call'),\n    Definition: require('./mixin-definition')\n};\ntree.Comment = require('./comment');\ntree.Anonymous = require('./anonymous');\ntree.Value = require('./value');\ntree.JavaScript = require('./javascript');\ntree.Assignment = require('./assignment');\ntree.Condition = require('./condition');\ntree.Paren = require('./paren');\ntree.Media = require('./media');\ntree.UnicodeDescriptor = require('./unicode-descriptor');\ntree.Negative = require('./negative');\ntree.Extend = require('./extend');\ntree.VariableCall = require('./variable-call');\ntree.NamespaceValue = require('./namespace-value');\n\nmodule.exports = tree;\n\n},{\"./anonymous\":50,\"./assignment\":51,\"./atrule\":52,\"./attribute\":53,\"./call\":54,\"./color\":55,\"./combinator\":56,\"./comment\":57,\"./condition\":58,\"./declaration\":60,\"./detached-ruleset\":61,\"./dimension\":62,\"./element\":63,\"./expression\":64,\"./extend\":65,\"./import\":66,\"./javascript\":68,\"./keyword\":70,\"./media\":71,\"./mixin-call\":72,\"./mixin-definition\":73,\"./namespace-value\":74,\"./negative\":75,\"./node\":76,\"./operation\":77,\"./paren\":78,\"./property\":79,\"./quoted\":80,\"./ruleset\":81,\"./selector\":82,\"./unicode-descriptor\":83,\"./unit\":84,\"./url\":85,\"./value\":86,\"./variable\":88,\"./variable-call\":87}],68:[function(require,module,exports){\nvar JsEvalNode = require('./js-eval-node'),\n    Dimension = require('./dimension'),\n    Quoted = require('./quoted'),\n    Anonymous = require('./anonymous');\n\nvar JavaScript = function (string, escaped, index, currentFileInfo) {\n    this.escaped = escaped;\n    this.expression = string;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n};\nJavaScript.prototype = new JsEvalNode();\nJavaScript.prototype.type = 'JavaScript';\nJavaScript.prototype.eval = function(context) {\n    var result = this.evaluateJavaScript(this.expression, context);\n    var type = typeof result;\n\n    if (type === 'number' && !isNaN(result)) {\n        return new Dimension(result);\n    } else if (type === 'string') {\n        return new Quoted('\"' + result + '\"', result, this.escaped, this._index);\n    } else if (Array.isArray(result)) {\n        return new Anonymous(result.join(', '));\n    } else {\n        return new Anonymous(result);\n    }\n};\n\nmodule.exports = JavaScript;\n\n},{\"./anonymous\":50,\"./dimension\":62,\"./js-eval-node\":69,\"./quoted\":80}],69:[function(require,module,exports){\nvar Node = require('./node'),\n    Variable = require('./variable');\n\nvar JsEvalNode = function() {\n};\nJsEvalNode.prototype = new Node();\n\nJsEvalNode.prototype.evaluateJavaScript = function (expression, context) {\n    var result,\n        that = this,\n        evalContext = {};\n\n    if (!context.javascriptEnabled) {\n        throw { message: 'Inline JavaScript is not enabled. Is it set in your options?',\n            filename: this.fileInfo().filename,\n            index: this.getIndex() };\n    }\n\n    expression = expression.replace(/@\\{([\\w-]+)\\}/g, function (_, name) {\n        return that.jsify(new Variable('@' + name, that.getIndex(), that.fileInfo()).eval(context));\n    });\n\n    try {\n        expression = new Function('return (' + expression + ')');\n    } catch (e) {\n        throw { message: 'JavaScript evaluation error: ' + e.message + ' from `' + expression + '`' ,\n            filename: this.fileInfo().filename,\n            index: this.getIndex() };\n    }\n\n    var variables = context.frames[0].variables();\n    for (var k in variables) {\n        if (variables.hasOwnProperty(k)) {\n            /* jshint loopfunc:true */\n            evalContext[k.slice(1)] = {\n                value: variables[k].value,\n                toJS: function () {\n                    return this.value.eval(context).toCSS();\n                }\n            };\n        }\n    }\n\n    try {\n        result = expression.call(evalContext);\n    } catch (e) {\n        throw { message: 'JavaScript evaluation error: \\'' + e.name + ': ' + e.message.replace(/[\"]/g, '\\'') + '\\'' ,\n            filename: this.fileInfo().filename,\n            index: this.getIndex() };\n    }\n    return result;\n};\nJsEvalNode.prototype.jsify = function (obj) {\n    if (Array.isArray(obj.value) && (obj.value.length > 1)) {\n        return '[' + obj.value.map(function (v) { return v.toCSS(); }).join(', ') + ']';\n    } else {\n        return obj.toCSS();\n    }\n};\n\nmodule.exports = JsEvalNode;\n\n},{\"./node\":76,\"./variable\":88}],70:[function(require,module,exports){\nvar Node = require('./node');\n\nvar Keyword = function (value) { this.value = value; };\nKeyword.prototype = new Node();\nKeyword.prototype.type = 'Keyword';\nKeyword.prototype.genCSS = function (context, output) {\n    if (this.value === '%') { throw { type: 'Syntax', message: 'Invalid % without number' }; }\n    output.add(this.value);\n};\n\nKeyword.True = new Keyword('true');\nKeyword.False = new Keyword('false');\n\nmodule.exports = Keyword;\n\n},{\"./node\":76}],71:[function(require,module,exports){\nvar Ruleset = require('./ruleset'),\n    Value = require('./value'),\n    Selector = require('./selector'),\n    Anonymous = require('./anonymous'),\n    Expression = require('./expression'),\n    AtRule = require('./atrule'),\n    utils = require('../utils');\n\nvar Media = function (value, features, index, currentFileInfo, visibilityInfo) {\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n\n    var selectors = (new Selector([], null, null, this._index, this._fileInfo)).createEmptySelectors();\n\n    this.features = new Value(features);\n    this.rules = [new Ruleset(selectors, value)];\n    this.rules[0].allowImports = true;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n    this.setParent(selectors, this);\n    this.setParent(this.features, this);\n    this.setParent(this.rules, this);\n};\nMedia.prototype = new AtRule();\nMedia.prototype.type = 'Media';\nMedia.prototype.isRulesetLike = function() { return true; };\nMedia.prototype.accept = function (visitor) {\n    if (this.features) {\n        this.features = visitor.visit(this.features);\n    }\n    if (this.rules) {\n        this.rules = visitor.visitArray(this.rules);\n    }\n};\nMedia.prototype.genCSS = function (context, output) {\n    output.add('@media ', this._fileInfo, this._index);\n    this.features.genCSS(context, output);\n    this.outputRuleset(context, output, this.rules);\n};\nMedia.prototype.eval = function (context) {\n    if (!context.mediaBlocks) {\n        context.mediaBlocks = [];\n        context.mediaPath = [];\n    }\n\n    var media = new Media(null, [], this._index, this._fileInfo, this.visibilityInfo());\n    if (this.debugInfo) {\n        this.rules[0].debugInfo = this.debugInfo;\n        media.debugInfo = this.debugInfo;\n    }\n    \n    media.features = this.features.eval(context);\n\n    context.mediaPath.push(media);\n    context.mediaBlocks.push(media);\n\n    this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n    context.frames.unshift(this.rules[0]);\n    media.rules = [this.rules[0].eval(context)];\n    context.frames.shift();\n\n    context.mediaPath.pop();\n\n    return context.mediaPath.length === 0 ? media.evalTop(context) :\n                media.evalNested(context);\n};\nMedia.prototype.evalTop = function (context) {\n    var result = this;\n\n    // Render all dependent Media blocks.\n    if (context.mediaBlocks.length > 1) {\n        var selectors = (new Selector([], null, null, this.getIndex(), this.fileInfo())).createEmptySelectors();\n        result = new Ruleset(selectors, context.mediaBlocks);\n        result.multiMedia = true;\n        result.copyVisibilityInfo(this.visibilityInfo());\n        this.setParent(result, this);\n    }\n\n    delete context.mediaBlocks;\n    delete context.mediaPath;\n\n    return result;\n};\nMedia.prototype.evalNested = function (context) {\n    var i, value,\n        path = context.mediaPath.concat([this]);\n\n    // Extract the media-query conditions separated with `,` (OR).\n    for (i = 0; i < path.length; i++) {\n        value = path[i].features instanceof Value ?\n                    path[i].features.value : path[i].features;\n        path[i] = Array.isArray(value) ? value : [value];\n    }\n\n    // Trace all permutations to generate the resulting media-query.\n    //\n    // (a, b and c) with nested (d, e) ->\n    //    a and d\n    //    a and e\n    //    b and c and d\n    //    b and c and e\n    this.features = new Value(this.permute(path).map(function (path) {\n        path = path.map(function (fragment) {\n            return fragment.toCSS ? fragment : new Anonymous(fragment);\n        });\n\n        for (i = path.length - 1; i > 0; i--) {\n            path.splice(i, 0, new Anonymous('and'));\n        }\n\n        return new Expression(path);\n    }));\n    this.setParent(this.features, this);\n\n    // Fake a tree-node that doesn't output anything.\n    return new Ruleset([], []);\n};\nMedia.prototype.permute = function (arr) {\n    if (arr.length === 0) {\n        return [];\n    } else if (arr.length === 1) {\n        return arr[0];\n    } else {\n        var result = [];\n        var rest = this.permute(arr.slice(1));\n        for (var i = 0; i < rest.length; i++) {\n            for (var j = 0; j < arr[0].length; j++) {\n                result.push([arr[0][j]].concat(rest[i]));\n            }\n        }\n        return result;\n    }\n};\nMedia.prototype.bubbleSelectors = function (selectors) {\n    if (!selectors) {\n        return;\n    }\n    this.rules = [new Ruleset(utils.copyArray(selectors), [this.rules[0]])];\n    this.setParent(this.rules, this);\n};\nmodule.exports = Media;\n\n},{\"../utils\":89,\"./anonymous\":50,\"./atrule\":52,\"./expression\":64,\"./ruleset\":81,\"./selector\":82,\"./value\":86}],72:[function(require,module,exports){\nvar Node = require('./node'),\n    Selector = require('./selector'),\n    MixinDefinition = require('./mixin-definition'),\n    defaultFunc = require('../functions/default');\n\nvar MixinCall = function (elements, args, index, currentFileInfo, important) {\n    this.selector = new Selector(elements);\n    this.arguments = args || [];\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.important = important;\n    this.allowRoot = true;\n    this.setParent(this.selector, this);\n};\nMixinCall.prototype = new Node();\nMixinCall.prototype.type = 'MixinCall';\nMixinCall.prototype.accept = function (visitor) {\n    if (this.selector) {\n        this.selector = visitor.visit(this.selector);\n    }\n    if (this.arguments.length) {\n        this.arguments = visitor.visitArray(this.arguments);\n    }\n};\nMixinCall.prototype.eval = function (context) {\n    var mixins, mixin, mixinPath, args = [], arg, argValue,\n        rules = [], match = false, i, m, f, isRecursive, isOneFound,\n        candidates = [], candidate, conditionResult = [], defaultResult, defFalseEitherCase = -1,\n        defNone = 0, defTrue = 1, defFalse = 2, count, originalRuleset, noArgumentsFilter;\n\n    this.selector = this.selector.eval(context);\n\n    function calcDefGroup(mixin, mixinPath) {\n        var f, p, namespace;\n\n        for (f = 0; f < 2; f++) {\n            conditionResult[f] = true;\n            defaultFunc.value(f);\n            for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\n                namespace = mixinPath[p];\n                if (namespace.matchCondition) {\n                    conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);\n                }\n            }\n            if (mixin.matchCondition) {\n                conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);\n            }\n        }\n        if (conditionResult[0] || conditionResult[1]) {\n            if (conditionResult[0] != conditionResult[1]) {\n                return conditionResult[1] ?\n                    defTrue : defFalse;\n            }\n\n            return defNone;\n        }\n        return defFalseEitherCase;\n    }\n\n    for (i = 0; i < this.arguments.length; i++) {\n        arg = this.arguments[i];\n        argValue = arg.value.eval(context);\n        if (arg.expand && Array.isArray(argValue.value)) {\n            argValue = argValue.value;\n            for (m = 0; m < argValue.length; m++) {\n                args.push({value: argValue[m]});\n            }\n        } else {\n            args.push({name: arg.name, value: argValue});\n        }\n    }\n\n    noArgumentsFilter = function(rule) {return rule.matchArgs(null, context);};\n\n    for (i = 0; i < context.frames.length; i++) {\n        if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {\n            isOneFound = true;\n\n            // To make `default()` function independent of definition order we have two \"subpasses\" here.\n            // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\n            // and build candidate list with corresponding flags. Then, when we know all possible matches,\n            // we make a final decision.\n\n            for (m = 0; m < mixins.length; m++) {\n                mixin = mixins[m].rule;\n                mixinPath = mixins[m].path;\n                isRecursive = false;\n                for (f = 0; f < context.frames.length; f++) {\n                    if ((!(mixin instanceof MixinDefinition)) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {\n                        isRecursive = true;\n                        break;\n                    }\n                }\n                if (isRecursive) {\n                    continue;\n                }\n\n                if (mixin.matchArgs(args, context)) {\n                    candidate = {mixin: mixin, group: calcDefGroup(mixin, mixinPath)};\n\n                    if (candidate.group !== defFalseEitherCase) {\n                        candidates.push(candidate);\n                    }\n\n                    match = true;\n                }\n            }\n\n            defaultFunc.reset();\n\n            count = [0, 0, 0];\n            for (m = 0; m < candidates.length; m++) {\n                count[candidates[m].group]++;\n            }\n\n            if (count[defNone] > 0) {\n                defaultResult = defFalse;\n            } else {\n                defaultResult = defTrue;\n                if ((count[defTrue] + count[defFalse]) > 1) {\n                    throw { type: 'Runtime',\n                        message: 'Ambiguous use of `default()` found when matching for `' + this.format(args) + '`',\n                        index: this.getIndex(), filename: this.fileInfo().filename };\n                }\n            }\n\n            for (m = 0; m < candidates.length; m++) {\n                candidate = candidates[m].group;\n                if ((candidate === defNone) || (candidate === defaultResult)) {\n                    try {\n                        mixin = candidates[m].mixin;\n                        if (!(mixin instanceof MixinDefinition)) {\n                            originalRuleset = mixin.originalRuleset || mixin;\n                            mixin = new MixinDefinition('', [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());\n                            mixin.originalRuleset = originalRuleset;\n                        }\n                        var newRules = mixin.evalCall(context, args, this.important).rules;\n                        this._setVisibilityToReplacement(newRules);\n                        Array.prototype.push.apply(rules, newRules);\n                    } catch (e) {\n                        throw { message: e.message, index: this.getIndex(), filename: this.fileInfo().filename, stack: e.stack };\n                    }\n                }\n            }\n\n            if (match) {\n                return rules;\n            }\n        }\n    }\n    if (isOneFound) {\n        throw { type:    'Runtime',\n            message: 'No matching definition was found for `' + this.format(args) + '`',\n            index:   this.getIndex(), filename: this.fileInfo().filename };\n    } else {\n        throw { type:    'Name',\n            message: this.selector.toCSS().trim() + ' is undefined',\n            index:   this.getIndex(), filename: this.fileInfo().filename };\n    }\n};\n\nMixinCall.prototype._setVisibilityToReplacement = function (replacement) {\n    var i, rule;\n    if (this.blocksVisibility()) {\n        for (i = 0; i < replacement.length; i++) {\n            rule = replacement[i];\n            rule.addVisibilityBlock();\n        }\n    }\n};\nMixinCall.prototype.format = function (args) {\n    return this.selector.toCSS().trim() + '(' +\n        (args ? args.map(function (a) {\n            var argValue = '';\n            if (a.name) {\n                argValue += a.name + ':';\n            }\n            if (a.value.toCSS) {\n                argValue += a.value.toCSS();\n            } else {\n                argValue += '???';\n            }\n            return argValue;\n        }).join(', ') : '') + ')';\n};\nmodule.exports = MixinCall;\n\n},{\"../functions/default\":25,\"./mixin-definition\":73,\"./node\":76,\"./selector\":82}],73:[function(require,module,exports){\nvar Selector = require('./selector'),\n    Element = require('./element'),\n    Ruleset = require('./ruleset'),\n    Declaration = require('./declaration'),\n    DetachedRuleset = require('./detached-ruleset'),\n    Expression = require('./expression'),\n    contexts = require('../contexts'),\n    utils = require('../utils');\n\nvar Definition = function (name, params, rules, condition, variadic, frames, visibilityInfo) {\n    this.name = name || 'anonymous mixin';\n    this.selectors = [new Selector([new Element(null, name, false, this._index, this._fileInfo)])];\n    this.params = params;\n    this.condition = condition;\n    this.variadic = variadic;\n    this.arity = params.length;\n    this.rules = rules;\n    this._lookups = {};\n    var optionalParameters = [];\n    this.required = params.reduce(function (count, p) {\n        if (!p.name || (p.name && !p.value)) {\n            return count + 1;\n        }\n        else {\n            optionalParameters.push(p.name);\n            return count;\n        }\n    }, 0);\n    this.optionalParameters = optionalParameters;\n    this.frames = frames;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n};\nDefinition.prototype = new Ruleset();\nDefinition.prototype.type = 'MixinDefinition';\nDefinition.prototype.evalFirst = true;\nDefinition.prototype.accept = function (visitor) {\n    if (this.params && this.params.length) {\n        this.params = visitor.visitArray(this.params);\n    }\n    this.rules = visitor.visitArray(this.rules);\n    if (this.condition) {\n        this.condition = visitor.visit(this.condition);\n    }\n};\nDefinition.prototype.evalParams = function (context, mixinEnv, args, evaldArguments) {\n    /* jshint boss:true */\n    var frame = new Ruleset(null, null),\n        varargs, arg,\n        params = utils.copyArray(this.params),\n        i, j, val, name, isNamedFound, argIndex, argsLength = 0;\n\n    if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\n        frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\n    }\n    mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\n\n    if (args) {\n        args = utils.copyArray(args);\n        argsLength = args.length;\n\n        for (i = 0; i < argsLength; i++) {\n            arg = args[i];\n            if (name = (arg && arg.name)) {\n                isNamedFound = false;\n                for (j = 0; j < params.length; j++) {\n                    if (!evaldArguments[j] && name === params[j].name) {\n                        evaldArguments[j] = arg.value.eval(context);\n                        frame.prependRule(new Declaration(name, arg.value.eval(context)));\n                        isNamedFound = true;\n                        break;\n                    }\n                }\n                if (isNamedFound) {\n                    args.splice(i, 1);\n                    i--;\n                    continue;\n                } else {\n                    throw { type: 'Runtime', message: 'Named argument for ' + this.name +\n                        ' ' + args[i].name + ' not found' };\n                }\n            }\n        }\n    }\n    argIndex = 0;\n    for (i = 0; i < params.length; i++) {\n        if (evaldArguments[i]) { continue; }\n\n        arg = args && args[argIndex];\n\n        if (name = params[i].name) {\n            if (params[i].variadic) {\n                varargs = [];\n                for (j = argIndex; j < argsLength; j++) {\n                    varargs.push(args[j].value.eval(context));\n                }\n                frame.prependRule(new Declaration(name, new Expression(varargs).eval(context)));\n            } else {\n                val = arg && arg.value;\n                if (val) {\n                    // This was a mixin call, pass in a detached ruleset of it's eval'd rules\n                    if (Array.isArray(val)) {\n                        val = new DetachedRuleset(new Ruleset('', val));\n                    }\n                    else {\n                        val = val.eval(context);\n                    }\n                } else if (params[i].value) {\n                    val = params[i].value.eval(mixinEnv);\n                    frame.resetCache();\n                } else {\n                    throw { type: 'Runtime', message: 'wrong number of arguments for ' + this.name +\n                        ' (' + argsLength + ' for ' + this.arity + ')' };\n                }\n\n                frame.prependRule(new Declaration(name, val));\n                evaldArguments[i] = val;\n            }\n        }\n\n        if (params[i].variadic && args) {\n            for (j = argIndex; j < argsLength; j++) {\n                evaldArguments[j] = args[j].value.eval(context);\n            }\n        }\n        argIndex++;\n    }\n\n    return frame;\n};\nDefinition.prototype.makeImportant = function() {\n    var rules = !this.rules ? this.rules : this.rules.map(function (r) {\n        if (r.makeImportant) {\n            return r.makeImportant(true);\n        } else {\n            return r;\n        }\n    });\n    var result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\n    return result;\n};\nDefinition.prototype.eval = function (context) {\n    return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || utils.copyArray(context.frames));\n};\nDefinition.prototype.evalCall = function (context, args, important) {\n    var _arguments = [],\n        mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames,\n        frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments),\n        rules, ruleset;\n\n    frame.prependRule(new Declaration('@arguments', new Expression(_arguments).eval(context)));\n\n    rules = utils.copyArray(this.rules);\n\n    ruleset = new Ruleset(null, rules);\n    ruleset.originalRuleset = this;\n    ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));\n    if (important) {\n        ruleset = ruleset.makeImportant();\n    }\n    return ruleset;\n};\nDefinition.prototype.matchCondition = function (args, context) {\n    if (this.condition && !this.condition.eval(\n        new contexts.Eval(context,\n            [this.evalParams(context, /* the parameter variables */\n                new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])]\n            .concat(this.frames || []) // the parent namespace/mixin frames\n            .concat(context.frames)))) { // the current environment frames\n        return false;\n    }\n    return true;\n};\nDefinition.prototype.matchArgs = function (args, context) {\n    var allArgsCnt = (args && args.length) || 0, len, optionalParameters = this.optionalParameters;\n    var requiredArgsCnt = !args ? 0 : args.reduce(function (count, p) {\n        if (optionalParameters.indexOf(p.name) < 0) {\n            return count + 1;\n        } else {\n            return count;\n        }\n    }, 0);\n\n    if (!this.variadic) {\n        if (requiredArgsCnt < this.required) {\n            return false;\n        }\n        if (allArgsCnt > this.params.length) {\n            return false;\n        }\n    } else {\n        if (requiredArgsCnt < (this.required - 1)) {\n            return false;\n        }\n    }\n\n    // check patterns\n    len = Math.min(requiredArgsCnt, this.arity);\n\n    for (var i = 0; i < len; i++) {\n        if (!this.params[i].name && !this.params[i].variadic) {\n            if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\nmodule.exports = Definition;\n\n},{\"../contexts\":13,\"../utils\":89,\"./declaration\":60,\"./detached-ruleset\":61,\"./element\":63,\"./expression\":64,\"./ruleset\":81,\"./selector\":82}],74:[function(require,module,exports){\nvar Node = require('./node'),\n    Variable = require('./variable'),\n    Ruleset = require('./ruleset'),\n    Selector = require('./selector');\n\nvar NamespaceValue = function (ruleCall, lookups, important, index, fileInfo) {\n    this.value = ruleCall;\n    this.lookups = lookups;\n    this.important = important;\n    this._index = index;\n    this._fileInfo = fileInfo;\n};\nNamespaceValue.prototype = new Node();\nNamespaceValue.prototype.type = 'NamespaceValue';\nNamespaceValue.prototype.eval = function (context) {\n    var i, j, name, rules = this.value.eval(context);\n    \n    for (i = 0; i < this.lookups.length; i++) {\n        name = this.lookups[i];\n\n        /**\n         * Eval'd DRs return rulesets.\n         * Eval'd mixins return rules, so let's make a ruleset if we need it.\n         * We need to do this because of late parsing of values\n         */\n        if (Array.isArray(rules)) {\n            rules = new Ruleset([new Selector()], rules);\n        }\n\n        if (name === '') {\n            rules = rules.lastDeclaration();\n        }\n        else if (name.charAt(0) === '@') {\n            if (name.charAt(1) === '@') {\n                name = '@' + new Variable(name.substr(1)).eval(context).value;\n            }\n            if (rules.variables) {\n                rules = rules.variable(name);\n            }\n            \n            if (!rules) {\n                throw { type: 'Name',\n                    message: 'variable ' + name + ' not found',\n                    filename: this.fileInfo().filename,\n                    index: this.getIndex() };\n            }\n        }\n        else {\n            if (name.substring(0, 2) === '$@') {\n                name = '$' + new Variable(name.substr(1)).eval(context).value;\n            }\n            else {\n                name = name.charAt(0) === '$' ? name : '$' + name;\n            }\n            if (rules.properties) {\n                rules = rules.property(name);\n            }\n        \n            if (!rules) {\n                throw { type: 'Name',\n                    message: 'property \"' + name.substr(1) + '\" not found',\n                    filename: this.fileInfo().filename,\n                    index: this.getIndex() };\n            }\n            // Properties are an array of values, since a ruleset can have multiple props.\n            // We pick the last one (the \"cascaded\" value)\n            rules = rules[rules.length - 1];\n        }\n\n        if (rules.value) {\n            rules = rules.eval(context).value;\n        }\n        if (rules.ruleset) {\n            rules = rules.ruleset.eval(context);\n        }\n    }\n    return rules;\n};\nmodule.exports = NamespaceValue;\n\n},{\"./node\":76,\"./ruleset\":81,\"./selector\":82,\"./variable\":88}],75:[function(require,module,exports){\nvar Node = require('./node'),\n    Operation = require('./operation'),\n    Dimension = require('./dimension');\n\nvar Negative = function (node) {\n    this.value = node;\n};\nNegative.prototype = new Node();\nNegative.prototype.type = 'Negative';\nNegative.prototype.genCSS = function (context, output) {\n    output.add('-');\n    this.value.genCSS(context, output);\n};\nNegative.prototype.eval = function (context) {\n    if (context.isMathOn()) {\n        return (new Operation('*', [new Dimension(-1), this.value])).eval(context);\n    }\n    return new Negative(this.value.eval(context));\n};\nmodule.exports = Negative;\n\n},{\"./dimension\":62,\"./node\":76,\"./operation\":77}],76:[function(require,module,exports){\nvar Node = function() {\n    this.parent = null;\n    this.visibilityBlocks = undefined;\n    this.nodeVisible = undefined;\n    this.rootNode = null;\n    this.parsed = null;\n\n    var self = this;\n    Object.defineProperty(this, 'currentFileInfo', {\n        get: function() { return self.fileInfo(); }\n    });\n    Object.defineProperty(this, 'index', {\n        get: function() { return self.getIndex(); }\n    });\n\n};\nNode.prototype.setParent = function(nodes, parent) {\n    function set(node) {\n        if (node && node instanceof Node) {\n            node.parent = parent;\n        }\n    }\n    if (Array.isArray(nodes)) {\n        nodes.forEach(set);\n    }\n    else {\n        set(nodes);\n    }\n};\nNode.prototype.getIndex = function() {\n    return this._index || (this.parent && this.parent.getIndex()) || 0;\n};\nNode.prototype.fileInfo = function() {\n    return this._fileInfo || (this.parent && this.parent.fileInfo()) || {};\n};\nNode.prototype.isRulesetLike = function() { return false; };\nNode.prototype.toCSS = function (context) {\n    var strs = [];\n    this.genCSS(context, {\n        add: function(chunk, fileInfo, index) {\n            strs.push(chunk);\n        },\n        isEmpty: function () {\n            return strs.length === 0;\n        }\n    });\n    return strs.join('');\n};\nNode.prototype.genCSS = function (context, output) {\n    output.add(this.value);\n};\nNode.prototype.accept = function (visitor) {\n    this.value = visitor.visit(this.value);\n};\nNode.prototype.eval = function () { return this; };\nNode.prototype._operate = function (context, op, a, b) {\n    switch (op) {\n        case '+': return a + b;\n        case '-': return a - b;\n        case '*': return a * b;\n        case '/': return a / b;\n    }\n};\nNode.prototype.fround = function(context, value) {\n    var precision = context && context.numPrecision;\n    // add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999...) are properly rounded:\n    return (precision) ? Number((value + 2e-16).toFixed(precision)) : value;\n};\nNode.compare = function (a, b) {\n    /* returns:\n     -1: a < b\n     0: a = b\n     1: a > b\n     and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\n\n    if ((a.compare) &&\n        // for \"symmetric results\" force toCSS-based comparison\n        // of Quoted or Anonymous if either value is one of those\n        !(b.type === 'Quoted' || b.type === 'Anonymous')) {\n        return a.compare(b);\n    } else if (b.compare) {\n        return -b.compare(a);\n    } else if (a.type !== b.type) {\n        return undefined;\n    }\n\n    a = a.value;\n    b = b.value;\n    if (!Array.isArray(a)) {\n        return a === b ? 0 : undefined;\n    }\n    if (a.length !== b.length) {\n        return undefined;\n    }\n    for (var i = 0; i < a.length; i++) {\n        if (Node.compare(a[i], b[i]) !== 0) {\n            return undefined;\n        }\n    }\n    return 0;\n};\n\nNode.numericCompare = function (a, b) {\n    return a  <  b ? -1\n        : a === b ?  0\n        : a  >  b ?  1 : undefined;\n};\n// Returns true if this node represents root of ast imported by reference\nNode.prototype.blocksVisibility = function () {\n    if (this.visibilityBlocks == null) {\n        this.visibilityBlocks = 0;\n    }\n    return this.visibilityBlocks !== 0;\n};\nNode.prototype.addVisibilityBlock = function () {\n    if (this.visibilityBlocks == null) {\n        this.visibilityBlocks = 0;\n    }\n    this.visibilityBlocks = this.visibilityBlocks + 1;\n};\nNode.prototype.removeVisibilityBlock = function () {\n    if (this.visibilityBlocks == null) {\n        this.visibilityBlocks = 0;\n    }\n    this.visibilityBlocks = this.visibilityBlocks - 1;\n};\n// Turns on node visibility - if called node will be shown in output regardless\n// of whether it comes from import by reference or not\nNode.prototype.ensureVisibility = function () {\n    this.nodeVisible = true;\n};\n// Turns off node visibility - if called node will NOT be shown in output regardless\n// of whether it comes from import by reference or not\nNode.prototype.ensureInvisibility = function () {\n    this.nodeVisible = false;\n};\n// return values:\n// false - the node must not be visible\n// true - the node must be visible\n// undefined or null - the node has the same visibility as its parent\nNode.prototype.isVisible = function () {\n    return this.nodeVisible;\n};\nNode.prototype.visibilityInfo = function() {\n    return {\n        visibilityBlocks: this.visibilityBlocks,\n        nodeVisible: this.nodeVisible\n    };\n};\nNode.prototype.copyVisibilityInfo = function(info) {\n    if (!info) {\n        return;\n    }\n    this.visibilityBlocks = info.visibilityBlocks;\n    this.nodeVisible = info.nodeVisible;\n};\nmodule.exports = Node;\n\n},{}],77:[function(require,module,exports){\nvar Node = require('./node'),\n    Color = require('./color'),\n    Dimension = require('./dimension'),\n    MATH = require('../constants').Math;\n\nvar Operation = function (op, operands, isSpaced) {\n    this.op = op.trim();\n    this.operands = operands;\n    this.isSpaced = isSpaced;\n};\nOperation.prototype = new Node();\nOperation.prototype.type = 'Operation';\nOperation.prototype.accept = function (visitor) {\n    this.operands = visitor.visit(this.operands);\n};\nOperation.prototype.eval = function (context) {\n    var a = this.operands[0].eval(context),\n        b = this.operands[1].eval(context),\n        op;\n\n    if (context.isMathOn(this.op)) {\n        op = this.op === './' ? '/' : this.op;\n        if (a instanceof Dimension && b instanceof Color) {\n            a = a.toColor();\n        }\n        if (b instanceof Dimension && a instanceof Color) {\n            b = b.toColor();\n        }\n        if (!a.operate) {\n            if (a instanceof Operation && a.op === '/' && context.math === MATH.PARENS_DIVISION) {\n                return new Operation(this.op, [a, b], this.isSpaced);\n            }\n            throw { type: 'Operation',\n                message: 'Operation on an invalid type' };\n        }\n\n        return a.operate(context, op, b);\n    } else {\n        return new Operation(this.op, [a, b], this.isSpaced);\n    }\n};\nOperation.prototype.genCSS = function (context, output) {\n    this.operands[0].genCSS(context, output);\n    if (this.isSpaced) {\n        output.add(' ');\n    }\n    output.add(this.op);\n    if (this.isSpaced) {\n        output.add(' ');\n    }\n    this.operands[1].genCSS(context, output);\n};\n\nmodule.exports = Operation;\n\n},{\"../constants\":12,\"./color\":55,\"./dimension\":62,\"./node\":76}],78:[function(require,module,exports){\nvar Node = require('./node');\n\nvar Paren = function (node) {\n    this.value = node;\n};\nParen.prototype = new Node();\nParen.prototype.type = 'Paren';\nParen.prototype.genCSS = function (context, output) {\n    output.add('(');\n    this.value.genCSS(context, output);\n    output.add(')');\n};\nParen.prototype.eval = function (context) {\n    return new Paren(this.value.eval(context));\n};\nmodule.exports = Paren;\n\n},{\"./node\":76}],79:[function(require,module,exports){\nvar Node = require('./node'),\n    Declaration = require('./declaration');\n\nvar Property = function (name, index, currentFileInfo) {\n    this.name = name;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n};\nProperty.prototype = new Node();\nProperty.prototype.type = 'Property';\nProperty.prototype.eval = function (context) {\n    var property, name = this.name;\n    // TODO: shorten this reference\n    var mergeRules = context.pluginManager.less.visitors.ToCSSVisitor.prototype._mergeRules;\n\n    if (this.evaluating) {\n        throw { type: 'Name',\n            message: 'Recursive property reference for ' + name,\n            filename: this.fileInfo().filename,\n            index: this.getIndex() };\n    }\n\n    this.evaluating = true;\n\n    property = this.find(context.frames, function (frame) {\n\n        var v, vArr = frame.property(name);\n        if (vArr) {\n            for (var i = 0; i < vArr.length; i++) {\n                v = vArr[i];\n\n                vArr[i] = new Declaration(v.name,\n                    v.value,\n                    v.important,\n                    v.merge,\n                    v.index,\n                    v.currentFileInfo,\n                    v.inline,\n                    v.variable\n                );\n            }\n            mergeRules(vArr);\n\n            v = vArr[vArr.length - 1];\n            if (v.important) {\n                var importantScope = context.importantScope[context.importantScope.length - 1];\n                importantScope.important = v.important;\n            }\n            v = v.value.eval(context);\n            return v;\n        }\n    });\n    if (property) {\n        this.evaluating = false;\n        return property;\n    } else {\n        throw { type: 'Name',\n            message: 'Property \\'' + name + '\\' is undefined',\n            filename: this.currentFileInfo.filename,\n            index: this.index };\n    }\n};\nProperty.prototype.find = function (obj, fun) {\n    for (var i = 0, r; i < obj.length; i++) {\n        r = fun.call(obj, obj[i]);\n        if (r) { return r; }\n    }\n    return null;\n};\nmodule.exports = Property;\n\n},{\"./declaration\":60,\"./node\":76}],80:[function(require,module,exports){\nvar Node = require('./node'),\n    Variable = require('./variable'),\n    Property = require('./property');\n\nvar Quoted = function (str, content, escaped, index, currentFileInfo) {\n    this.escaped = (escaped == null) ? true : escaped;\n    this.value = content || '';\n    this.quote = str.charAt(0);\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.variableRegex = /@\\{([\\w-]+)\\}/g;\n    this.propRegex = /\\$\\{([\\w-]+)\\}/g;\n};\nQuoted.prototype = new Node();\nQuoted.prototype.type = 'Quoted';\nQuoted.prototype.genCSS = function (context, output) {\n    if (!this.escaped) {\n        output.add(this.quote, this.fileInfo(), this.getIndex());\n    }\n    output.add(this.value);\n    if (!this.escaped) {\n        output.add(this.quote);\n    }\n};\nQuoted.prototype.containsVariables = function() {\n    return this.value.match(this.variableRegex);\n};\nQuoted.prototype.eval = function (context) {\n    var that = this, value = this.value;\n    var variableReplacement = function (_, name) {\n        var v = new Variable('@' + name, that.getIndex(), that.fileInfo()).eval(context, true);\n        return (v instanceof Quoted) ? v.value : v.toCSS();\n    };\n    var propertyReplacement = function (_, name) {\n        var v = new Property('$' + name, that.getIndex(), that.fileInfo()).eval(context, true);\n        return (v instanceof Quoted) ? v.value : v.toCSS();\n    };\n    function iterativeReplace(value, regexp, replacementFnc) {\n        var evaluatedValue = value;\n        do {\n            value = evaluatedValue;\n            evaluatedValue = value.replace(regexp, replacementFnc);\n        } while (value !== evaluatedValue);\n        return evaluatedValue;\n    }\n    value = iterativeReplace(value, this.variableRegex, variableReplacement);\n    value = iterativeReplace(value, this.propRegex, propertyReplacement);\n    return new Quoted(this.quote + value + this.quote, value, this.escaped, this.getIndex(), this.fileInfo());\n};\nQuoted.prototype.compare = function (other) {\n    // when comparing quoted strings allow the quote to differ\n    if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\n        return Node.numericCompare(this.value, other.value);\n    } else {\n        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n    }\n};\nmodule.exports = Quoted;\n\n},{\"./node\":76,\"./property\":79,\"./variable\":88}],81:[function(require,module,exports){\nvar Node = require('./node'),\n    Declaration = require('./declaration'),\n    Keyword = require('./keyword'),\n    Comment = require('./comment'),\n    Paren = require('./paren'),\n    Selector = require('./selector'),\n    Element = require('./element'),\n    Anonymous = require('./anonymous'),\n    contexts = require('../contexts'),\n    globalFunctionRegistry = require('../functions/function-registry'),\n    defaultFunc = require('../functions/default'),\n    getDebugInfo = require('./debug-info'),\n    utils = require('../utils');\n\nvar Ruleset = function (selectors, rules, strictImports, visibilityInfo) {\n    this.selectors = selectors;\n    this.rules = rules;\n    this._lookups = {};\n    this._variables = null;\n    this._properties = null;\n    this.strictImports = strictImports;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n\n    this.setParent(this.selectors, this);\n    this.setParent(this.rules, this);\n\n};\nRuleset.prototype = new Node();\nRuleset.prototype.type = 'Ruleset';\nRuleset.prototype.isRuleset = true;\nRuleset.prototype.isRulesetLike = function() { return true; };\nRuleset.prototype.accept = function (visitor) {\n    if (this.paths) {\n        this.paths = visitor.visitArray(this.paths, true);\n    } else if (this.selectors) {\n        this.selectors = visitor.visitArray(this.selectors);\n    }\n    if (this.rules && this.rules.length) {\n        this.rules = visitor.visitArray(this.rules);\n    }\n};\nRuleset.prototype.eval = function (context) {\n    var that = this, selectors, selCnt, selector, i, hasVariable, hasOnePassingSelector = false;\n\n    if (this.selectors && (selCnt = this.selectors.length)) {\n        selectors = new Array(selCnt);\n        defaultFunc.error({\n            type: 'Syntax',\n            message: 'it is currently only allowed in parametric mixin guards,'\n        });\n\n        for (i = 0; i < selCnt; i++) {\n            selector = this.selectors[i].eval(context);\n            for (var j = 0; j < selector.elements.length; j++) {\n                if (selector.elements[j].isVariable) {\n                    hasVariable = true;\n                    break;\n                }\n            }\n            selectors[i] = selector;\n            if (selector.evaldCondition) {\n                hasOnePassingSelector = true;\n            }\n        }\n\n        if (hasVariable) {\n            var toParseSelectors = new Array(selCnt);\n            for (i = 0; i < selCnt; i++) {\n                selector = selectors[i];\n                toParseSelectors[i] = selector.toCSS(context);\n            }\n            this.parse.parseNode(\n                toParseSelectors.join(','),\n                [\"selectors\"], \n                selectors[0].getIndex(), \n                selectors[0].fileInfo(), \n                function(err, result) {\n                    if (result) {\n                        selectors = utils.flattenArray(result);\n                    }\n                });\n        }\n\n        defaultFunc.reset();\n    } else {\n        hasOnePassingSelector = true;\n    }\n\n    var rules = this.rules ? utils.copyArray(this.rules) : null,\n        ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo()),\n        rule, subRule;\n\n    ruleset.originalRuleset = this;\n    ruleset.root = this.root;\n    ruleset.firstRoot = this.firstRoot;\n    ruleset.allowImports = this.allowImports;\n\n    if (this.debugInfo) {\n        ruleset.debugInfo = this.debugInfo;\n    }\n\n    if (!hasOnePassingSelector) {\n        rules.length = 0;\n    }\n\n    // inherit a function registry from the frames stack when possible;\n    // otherwise from the global registry\n    ruleset.functionRegistry = (function (frames) {\n        var i = 0,\n            n = frames.length,\n            found;\n        for ( ; i !== n ; ++i ) {\n            found = frames[ i ].functionRegistry;\n            if ( found ) { return found; }\n        }\n        return globalFunctionRegistry;\n    }(context.frames)).inherit();\n\n    // push the current ruleset to the frames stack\n    var ctxFrames = context.frames;\n    ctxFrames.unshift(ruleset);\n\n    // currrent selectors\n    var ctxSelectors = context.selectors;\n    if (!ctxSelectors) {\n        context.selectors = ctxSelectors = [];\n    }\n    ctxSelectors.unshift(this.selectors);\n\n    // Evaluate imports\n    if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n        ruleset.evalImports(context);\n    }\n\n    // Store the frames around mixin definitions,\n    // so they can be evaluated like closures when the time comes.\n    var rsRules = ruleset.rules;\n    for (i = 0; (rule = rsRules[i]); i++) {\n        if (rule.evalFirst) {\n            rsRules[i] = rule.eval(context);\n        }\n    }\n\n    var mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;\n\n    // Evaluate mixin calls.\n    for (i = 0; (rule = rsRules[i]); i++) {\n        if (rule.type === 'MixinCall') {\n            /* jshint loopfunc:true */\n            rules = rule.eval(context).filter(function(r) {\n                if ((r instanceof Declaration) && r.variable) {\n                    // do not pollute the scope if the variable is\n                    // already there. consider returning false here\n                    // but we need a way to \"return\" variable from mixins\n                    return !(ruleset.variable(r.name));\n                }\n                return true;\n            });\n            rsRules.splice.apply(rsRules, [i, 1].concat(rules));\n            i += rules.length - 1;\n            ruleset.resetCache();\n        } else if (rule.type ===  'VariableCall') {\n            /* jshint loopfunc:true */\n            rules = rule.eval(context).rules.filter(function(r) {\n                if ((r instanceof Declaration) && r.variable) {\n                    // do not pollute the scope at all\n                    return false;\n                }\n                return true;\n            });\n            rsRules.splice.apply(rsRules, [i, 1].concat(rules));\n            i += rules.length - 1;\n            ruleset.resetCache();\n        }\n    }\n\n    // Evaluate everything else\n    for (i = 0; (rule = rsRules[i]); i++) {\n        if (!rule.evalFirst) {\n            rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\n        }\n    }\n\n    // Evaluate everything else\n    for (i = 0; (rule = rsRules[i]); i++) {\n        // for rulesets, check if it is a css guard and can be removed\n        if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\n            // check if it can be folded in (e.g. & where)\n            if (rule.selectors[0] && rule.selectors[0].isJustParentSelector()) {\n                rsRules.splice(i--, 1);\n\n                for (var j = 0; (subRule = rule.rules[j]); j++) {\n                    if (subRule instanceof Node) {\n                        subRule.copyVisibilityInfo(rule.visibilityInfo());\n                        if (!(subRule instanceof Declaration) || !subRule.variable) {\n                            rsRules.splice(++i, 0, subRule);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Pop the stack\n    ctxFrames.shift();\n    ctxSelectors.shift();\n\n    if (context.mediaBlocks) {\n        for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n            context.mediaBlocks[i].bubbleSelectors(selectors);\n        }\n    }\n\n    return ruleset;\n};\nRuleset.prototype.evalImports = function(context) {\n    var rules = this.rules, i, importRules;\n    if (!rules) { return; }\n\n    for (i = 0; i < rules.length; i++) {\n        if (rules[i].type === 'Import') {\n            importRules = rules[i].eval(context);\n            if (importRules && (importRules.length || importRules.length === 0)) {\n                rules.splice.apply(rules, [i, 1].concat(importRules));\n                i += importRules.length - 1;\n            } else {\n                rules.splice(i, 1, importRules);\n            }\n            this.resetCache();\n        }\n    }\n};\nRuleset.prototype.makeImportant = function() {\n    var result = new Ruleset(this.selectors, this.rules.map(function (r) {\n        if (r.makeImportant) {\n            return r.makeImportant();\n        } else {\n            return r;\n        }\n    }), this.strictImports, this.visibilityInfo());\n\n    return result;\n};\nRuleset.prototype.matchArgs = function (args) {\n    return !args || args.length === 0;\n};\n// lets you call a css selector with a guard\nRuleset.prototype.matchCondition = function (args, context) {\n    var lastSelector = this.selectors[this.selectors.length - 1];\n    if (!lastSelector.evaldCondition) {\n        return false;\n    }\n    if (lastSelector.condition &&\n        !lastSelector.condition.eval(\n            new contexts.Eval(context,\n                context.frames))) {\n        return false;\n    }\n    return true;\n};\nRuleset.prototype.resetCache = function () {\n    this._rulesets = null;\n    this._variables = null;\n    this._properties = null;\n    this._lookups = {};\n};\nRuleset.prototype.variables = function () {\n    if (!this._variables) {\n        this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n            if (r instanceof Declaration && r.variable === true) {\n                hash[r.name] = r;\n            }\n            // when evaluating variables in an import statement, imports have not been eval'd\n            // so we need to go inside import statements.\n            // guard against root being a string (in the case of inlined less)\n            if (r.type === 'Import' && r.root && r.root.variables) {\n                var vars = r.root.variables();\n                for (var name in vars) {\n                    if (vars.hasOwnProperty(name)) {\n                        hash[name] = r.root.variable(name);\n                    }\n                }\n            }\n            return hash;\n        }, {});\n    }\n    return this._variables;\n};\nRuleset.prototype.properties = function () {\n    if (!this._properties) {\n        this._properties = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n            if (r instanceof Declaration && r.variable !== true) {\n                var name = (r.name.length === 1) && (r.name[0] instanceof Keyword) ?\n                    r.name[0].value : r.name;\n                // Properties don't overwrite as they can merge\n                if (!hash['$' + name]) {\n                    hash['$' + name] = [ r ];\n                }\n                else {\n                    hash['$' + name].push(r);\n                }\n            }\n            return hash;\n        }, {});\n    }\n    return this._properties;\n};\nRuleset.prototype.variable = function (name) {\n    var decl = this.variables()[name];\n    if (decl) {\n        return this.parseValue(decl);\n    }\n};\nRuleset.prototype.property = function (name) {\n    var decl = this.properties()[name];\n    if (decl) {\n        return this.parseValue(decl);\n    }\n};\nRuleset.prototype.lastDeclaration = function () {\n    for (var i = this.rules.length; i > 0; i--) {\n        var decl = this.rules[i - 1];\n        if (decl instanceof Declaration) {\n            return this.parseValue(decl);\n        }\n    }\n};\nRuleset.prototype.parseValue = function(toParse) {\n    var self = this;\n    function transformDeclaration(decl) {\n        if (decl.value instanceof Anonymous && !decl.parsed) {\n            if (typeof decl.value.value === 'string') {\n                this.parse.parseNode(\n                    decl.value.value,\n                    ['value', 'important'], \n                    decl.value.getIndex(), \n                    decl.fileInfo(), \n                    function(err, result) {\n                        if (err) {\n                            decl.parsed = true;\n                        }\n                        if (result) {\n                            decl.value = result[0];\n                            decl.important = result[1] || '';\n                            decl.parsed = true;\n                        }\n                    });\n            } else {\n                decl.parsed = true;\n            }\n\n            return decl;\n        }\n        else {\n            return decl;\n        }\n    }\n    if (!Array.isArray(toParse)) {\n        return transformDeclaration.call(self, toParse);\n    }\n    else {\n        var nodes = [];\n        toParse.forEach(function(n) {\n            nodes.push(transformDeclaration.call(self, n));\n        });\n        return nodes;\n    }\n};\nRuleset.prototype.rulesets = function () {\n    if (!this.rules) { return []; }\n\n    var filtRules = [], rules = this.rules,\n        i, rule;\n\n    for (i = 0; (rule = rules[i]); i++) {\n        if (rule.isRuleset) {\n            filtRules.push(rule);\n        }\n    }\n\n    return filtRules;\n};\nRuleset.prototype.prependRule = function (rule) {\n    var rules = this.rules;\n    if (rules) {\n        rules.unshift(rule);\n    } else {\n        this.rules = [ rule ];\n    }\n    this.setParent(rule, this);\n};\nRuleset.prototype.find = function (selector, self, filter) {\n    self = self || this;\n    var rules = [], match, foundMixins,\n        key = selector.toCSS();\n\n    if (key in this._lookups) { return this._lookups[key]; }\n\n    this.rulesets().forEach(function (rule) {\n        if (rule !== self) {\n            for (var j = 0; j < rule.selectors.length; j++) {\n                match = selector.match(rule.selectors[j]);\n                if (match) {\n                    if (selector.elements.length > match) {\n                        if (!filter || filter(rule)) {\n                            foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\n                            for (var i = 0; i < foundMixins.length; ++i) {\n                                foundMixins[i].path.push(rule);\n                            }\n                            Array.prototype.push.apply(rules, foundMixins);\n                        }\n                    } else {\n                        rules.push({ rule: rule, path: []});\n                    }\n                    break;\n                }\n            }\n        }\n    });\n    this._lookups[key] = rules;\n    return rules;\n};\nRuleset.prototype.genCSS = function (context, output) {\n    var i, j,\n        charsetRuleNodes = [],\n        ruleNodes = [],\n        debugInfo,     // Line number debugging\n        rule,\n        path;\n\n    context.tabLevel = (context.tabLevel || 0);\n\n    if (!this.root) {\n        context.tabLevel++;\n    }\n\n    var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  '),\n        tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  '),\n        sep;\n\n    var charsetNodeIndex = 0;\n    var importNodeIndex = 0;\n    for (i = 0; (rule = this.rules[i]); i++) {\n        if (rule instanceof Comment) {\n            if (importNodeIndex === i) {\n                importNodeIndex++;\n            }\n            ruleNodes.push(rule);\n        } else if (rule.isCharset && rule.isCharset()) {\n            ruleNodes.splice(charsetNodeIndex, 0, rule);\n            charsetNodeIndex++;\n            importNodeIndex++;\n        } else if (rule.type === 'Import') {\n            ruleNodes.splice(importNodeIndex, 0, rule);\n            importNodeIndex++;\n        } else {\n            ruleNodes.push(rule);\n        }\n    }\n    ruleNodes = charsetRuleNodes.concat(ruleNodes);\n\n    // If this is the root node, we don't render\n    // a selector, or {}.\n    if (!this.root) {\n        debugInfo = getDebugInfo(context, this, tabSetStr);\n\n        if (debugInfo) {\n            output.add(debugInfo);\n            output.add(tabSetStr);\n        }\n\n        var paths = this.paths, pathCnt = paths.length,\n            pathSubCnt;\n\n        sep = context.compress ? ',' : (',\\n' + tabSetStr);\n\n        for (i = 0; i < pathCnt; i++) {\n            path = paths[i];\n            if (!(pathSubCnt = path.length)) { continue; }\n            if (i > 0) { output.add(sep); }\n\n            context.firstSelector = true;\n            path[0].genCSS(context, output);\n\n            context.firstSelector = false;\n            for (j = 1; j < pathSubCnt; j++) {\n                path[j].genCSS(context, output);\n            }\n        }\n\n        output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\n    }\n\n    // Compile rules and rulesets\n    for (i = 0; (rule = ruleNodes[i]); i++) {\n\n        if (i + 1 === ruleNodes.length) {\n            context.lastRule = true;\n        }\n\n        var currentLastRule = context.lastRule;\n        if (rule.isRulesetLike(rule)) {\n            context.lastRule = false;\n        }\n\n        if (rule.genCSS) {\n            rule.genCSS(context, output);\n        } else if (rule.value) {\n            output.add(rule.value.toString());\n        }\n\n        context.lastRule = currentLastRule;\n\n        if (!context.lastRule && rule.isVisible()) {\n            output.add(context.compress ? '' : ('\\n' + tabRuleStr));\n        } else {\n            context.lastRule = false;\n        }\n    }\n\n    if (!this.root) {\n        output.add((context.compress ? '}' : '\\n' + tabSetStr + '}'));\n        context.tabLevel--;\n    }\n\n    if (!output.isEmpty() && !context.compress && this.firstRoot) {\n        output.add('\\n');\n    }\n};\n\nRuleset.prototype.joinSelectors = function (paths, context, selectors) {\n    for (var s = 0; s < selectors.length; s++) {\n        this.joinSelector(paths, context, selectors[s]);\n    }\n};\n\nRuleset.prototype.joinSelector = function (paths, context, selector) {\n\n    function createParenthesis(elementsToPak, originalElement) {\n        var replacementParen, j;\n        if (elementsToPak.length === 0) {\n            replacementParen = new Paren(elementsToPak[0]);\n        } else {\n            var insideParent = new Array(elementsToPak.length);\n            for (j = 0; j < elementsToPak.length; j++) {\n                insideParent[j] = new Element(\n                    null,\n                    elementsToPak[j],\n                    originalElement.isVariable,\n                    originalElement._index,\n                    originalElement._fileInfo\n                );\n            }\n            replacementParen = new Paren(new Selector(insideParent));\n        }\n        return replacementParen;\n    }\n\n    function createSelector(containedElement, originalElement) {\n        var element, selector;\n        element = new Element(null, containedElement, originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n        selector = new Selector([element]);\n        return selector;\n    }\n\n    // joins selector path from `beginningPath` with selector path in `addPath`\n    // `replacedElement` contains element that is being replaced by `addPath`\n    // returns concatenated path\n    function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\n        var newSelectorPath, lastSelector, newJoinedSelector;\n        // our new selector path\n        newSelectorPath = [];\n\n        // construct the joined selector - if & is the first thing this will be empty,\n        // if not newJoinedSelector will be the last set of elements in the selector\n        if (beginningPath.length > 0) {\n            newSelectorPath = utils.copyArray(beginningPath);\n            lastSelector = newSelectorPath.pop();\n            newJoinedSelector = originalSelector.createDerived(utils.copyArray(lastSelector.elements));\n        }\n        else {\n            newJoinedSelector = originalSelector.createDerived([]);\n        }\n\n        if (addPath.length > 0) {\n            // /deep/ is a CSS4 selector - (removed, so should deprecate)\n            // that is valid without anything in front of it\n            // so if the & does not have a combinator that is \"\" or \" \" then\n            // and there is a combinator on the parent, then grab that.\n            // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\n            var combinator = replacedElement.combinator, parentEl = addPath[0].elements[0];\n            if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\n                combinator = parentEl.combinator;\n            }\n            // join the elements so far with the first part of the parent\n            newJoinedSelector.elements.push(new Element(\n                combinator,\n                parentEl.value,\n                replacedElement.isVariable,\n                replacedElement._index,\n                replacedElement._fileInfo\n            ));\n            newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\n        }\n\n        // now add the joined selector - but only if it is not empty\n        if (newJoinedSelector.elements.length !== 0) {\n            newSelectorPath.push(newJoinedSelector);\n        }\n\n        // put together the parent selectors after the join (e.g. the rest of the parent)\n        if (addPath.length > 1) {\n            var restOfPath = addPath.slice(1);\n            restOfPath = restOfPath.map(function (selector) {\n                return selector.createDerived(selector.elements, []);\n            });\n            newSelectorPath = newSelectorPath.concat(restOfPath);\n        }\n        return newSelectorPath;\n    }\n\n    // joins selector path from `beginningPath` with every selector path in `addPaths` array\n    // `replacedElement` contains element that is being replaced by `addPath`\n    // returns array with all concatenated paths\n    function addAllReplacementsIntoPath( beginningPath, addPaths, replacedElement, originalSelector, result) {\n        var j;\n        for (j = 0; j < beginningPath.length; j++) {\n            var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\n            result.push(newSelectorPath);\n        }\n        return result;\n    }\n\n    function mergeElementsOnToSelectors(elements, selectors) {\n        var i, sel;\n\n        if (elements.length === 0) {\n            return ;\n        }\n        if (selectors.length === 0) {\n            selectors.push([ new Selector(elements) ]);\n            return;\n        }\n\n        for (i = 0; (sel = selectors[i]); i++) {\n            // if the previous thing in sel is a parent this needs to join on to it\n            if (sel.length > 0) {\n                sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\n            }\n            else {\n                sel.push(new Selector(elements));\n            }\n        }\n    }\n\n    // replace all parent selectors inside `inSelector` by content of `context` array\n    // resulting selectors are returned inside `paths` array\n    // returns true if `inSelector` contained at least one parent selector\n    function replaceParentSelector(paths, context, inSelector) {\n        // The paths are [[Selector]]\n        // The first list is a list of comma separated selectors\n        // The inner list is a list of inheritance separated selectors\n        // e.g.\n        // .a, .b {\n        //   .c {\n        //   }\n        // }\n        // == [[.a] [.c]] [[.b] [.c]]\n        //\n        var i, j, k, currentElements, newSelectors, selectorsMultiplied, sel, el, hadParentSelector = false, length, lastSelector;\n        function findNestedSelector(element) {\n            var maybeSelector;\n            if (!(element.value instanceof Paren)) {\n                return null;\n            }\n\n            maybeSelector = element.value.value;\n            if (!(maybeSelector instanceof Selector)) {\n                return null;\n            }\n\n            return maybeSelector;\n        }\n\n        // the elements from the current selector so far\n        currentElements = [];\n        // the current list of new selectors to add to the path.\n        // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\n        // by the parents\n        newSelectors = [\n            []\n        ];\n\n        for (i = 0; (el = inSelector.elements[i]); i++) {\n            // non parent reference elements just get added\n            if (el.value !== '&') {\n                var nestedSelector = findNestedSelector(el);\n                if (nestedSelector != null) {\n                    // merge the current list of non parent selector elements\n                    // on to the current list of selectors to add\n                    mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                    var nestedPaths = [], replaced, replacedNewSelectors = [];\n                    replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\n                    hadParentSelector = hadParentSelector || replaced;\n                    // the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\n                    for (k = 0; k < nestedPaths.length; k++) {\n                        var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\n                        addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\n                    }\n                    newSelectors = replacedNewSelectors;\n                    currentElements = [];\n\n                } else {\n                    currentElements.push(el);\n                }\n\n            } else {\n                hadParentSelector = true;\n                // the new list of selectors to add\n                selectorsMultiplied = [];\n\n                // merge the current list of non parent selector elements\n                // on to the current list of selectors to add\n                mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                // loop through our current selectors\n                for (j = 0; j < newSelectors.length; j++) {\n                    sel = newSelectors[j];\n                    // if we don't have any parent paths, the & might be in a mixin so that it can be used\n                    // whether there are parents or not\n                    if (context.length === 0) {\n                        // the combinator used on el should now be applied to the next element instead so that\n                        // it is not lost\n                        if (sel.length > 0) {\n                            sel[0].elements.push(new Element(el.combinator, '', el.isVariable, el._index, el._fileInfo));\n                        }\n                        selectorsMultiplied.push(sel);\n                    }\n                    else {\n                        // and the parent selectors\n                        for (k = 0; k < context.length; k++) {\n                            // We need to put the current selectors\n                            // then join the last selector's elements on to the parents selectors\n                            var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\n                            // add that to our new set of selectors\n                            selectorsMultiplied.push(newSelectorPath);\n                        }\n                    }\n                }\n\n                // our new selectors has been multiplied, so reset the state\n                newSelectors = selectorsMultiplied;\n                currentElements = [];\n            }\n        }\n\n        // if we have any elements left over (e.g. .a& .b == .b)\n        // add them on to all the current selectors\n        mergeElementsOnToSelectors(currentElements, newSelectors);\n\n        for (i = 0; i < newSelectors.length; i++) {\n            length = newSelectors[i].length;\n            if (length > 0) {\n                paths.push(newSelectors[i]);\n                lastSelector = newSelectors[i][length - 1];\n                newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\n            }\n        }\n\n        return hadParentSelector;\n    }\n\n    function deriveSelector(visibilityInfo, deriveFrom) {\n        var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\n        newSelector.copyVisibilityInfo(visibilityInfo);\n        return newSelector;\n    }\n\n    // joinSelector code follows\n    var i, newPaths, hadParentSelector;\n\n    newPaths = [];\n    hadParentSelector = replaceParentSelector(newPaths, context, selector);\n\n    if (!hadParentSelector) {\n        if (context.length > 0) {\n            newPaths = [];\n            for (i = 0; i < context.length; i++) {\n\n                var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\n\n                concatenated.push(selector);\n                newPaths.push(concatenated);\n            }\n        }\n        else {\n            newPaths = [[selector]];\n        }\n    }\n\n    for (i = 0; i < newPaths.length; i++) {\n        paths.push(newPaths[i]);\n    }\n\n};\nmodule.exports = Ruleset;\n\n},{\"../contexts\":13,\"../functions/default\":25,\"../functions/function-registry\":27,\"../utils\":89,\"./anonymous\":50,\"./comment\":57,\"./debug-info\":59,\"./declaration\":60,\"./element\":63,\"./keyword\":70,\"./node\":76,\"./paren\":78,\"./selector\":82}],82:[function(require,module,exports){\nvar Node = require('./node'),\n    Element = require('./element'),\n    LessError = require('../less-error');\n\nvar Selector = function (elements, extendList, condition, index, currentFileInfo, visibilityInfo) {\n    this.extendList = extendList;\n    this.condition = condition;\n    this.evaldCondition = !condition;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.elements = this.getElements(elements);\n    this.mixinElements_ = undefined;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.setParent(this.elements, this);\n};\nSelector.prototype = new Node();\nSelector.prototype.type = 'Selector';\nSelector.prototype.accept = function (visitor) {\n    if (this.elements) {\n        this.elements = visitor.visitArray(this.elements);\n    }\n    if (this.extendList) {\n        this.extendList = visitor.visitArray(this.extendList);\n    }\n    if (this.condition) {\n        this.condition = visitor.visit(this.condition);\n    }\n};\nSelector.prototype.createDerived = function(elements, extendList, evaldCondition) {\n    elements = this.getElements(elements);\n    var newSelector = new Selector(elements, extendList || this.extendList,\n        null, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n    newSelector.evaldCondition = (evaldCondition != null) ? evaldCondition : this.evaldCondition;\n    newSelector.mediaEmpty = this.mediaEmpty;\n    return newSelector;\n};\nSelector.prototype.getElements = function(els) {\n    if (!els) {\n        return [new Element('', '&', false, this._index, this._fileInfo)];\n    }\n    if (typeof els === 'string') {\n        this.parse.parseNode(\n            els, \n            ['selector'],\n            this._index, \n            this._fileInfo, \n            function(err, result) {\n                if (err) {\n                    throw new LessError({\n                        index: err.index,\n                        message: err.message\n                    }, this.parse.imports, this._fileInfo.filename);\n                }\n                els = result[0].elements;\n            });\n    }\n    return els;\n};\nSelector.prototype.createEmptySelectors = function() {\n    var el = new Element('', '&', false, this._index, this._fileInfo),\n        sels = [new Selector([el], null, null, this._index, this._fileInfo)];\n    sels[0].mediaEmpty = true;\n    return sels;\n};\nSelector.prototype.match = function (other) {\n    var elements = this.elements,\n        len = elements.length,\n        olen, i;\n\n    other = other.mixinElements();\n    olen = other.length;\n    if (olen === 0 || len < olen) {\n        return 0;\n    } else {\n        for (i = 0; i < olen; i++) {\n            if (elements[i].value !== other[i]) {\n                return 0;\n            }\n        }\n    }\n\n    return olen; // return number of matched elements\n};\nSelector.prototype.mixinElements = function() {\n    if (this.mixinElements_) {\n        return this.mixinElements_;\n    }\n\n    var elements = this.elements.map( function(v) {\n        return v.combinator.value + (v.value.value || v.value);\n    }).join('').match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g);\n\n    if (elements) {\n        if (elements[0] === '&') {\n            elements.shift();\n        }\n    } else {\n        elements = [];\n    }\n\n    return (this.mixinElements_ = elements);\n};\nSelector.prototype.isJustParentSelector = function() {\n    return !this.mediaEmpty &&\n        this.elements.length === 1 &&\n        this.elements[0].value === '&' &&\n        (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');\n};\nSelector.prototype.eval = function (context) {\n    var evaldCondition = this.condition && this.condition.eval(context),\n        elements = this.elements, extendList = this.extendList;\n\n    elements = elements && elements.map(function (e) { return e.eval(context); });\n    extendList = extendList && extendList.map(function(extend) { return extend.eval(context); });\n\n    return this.createDerived(elements, extendList, evaldCondition);\n};\nSelector.prototype.genCSS = function (context, output) {\n    var i, element;\n    if ((!context || !context.firstSelector) && this.elements[0].combinator.value === '') {\n        output.add(' ', this.fileInfo(), this.getIndex());\n    }\n    for (i = 0; i < this.elements.length; i++) {\n        element = this.elements[i];\n        element.genCSS(context, output);\n    }\n};\nSelector.prototype.getIsOutput = function() {\n    return this.evaldCondition;\n};\nmodule.exports = Selector;\n\n},{\"../less-error\":38,\"./element\":63,\"./node\":76}],83:[function(require,module,exports){\nvar Node = require('./node');\n\nvar UnicodeDescriptor = function (value) {\n    this.value = value;\n};\nUnicodeDescriptor.prototype = new Node();\nUnicodeDescriptor.prototype.type = 'UnicodeDescriptor';\n\nmodule.exports = UnicodeDescriptor;\n\n},{\"./node\":76}],84:[function(require,module,exports){\nvar Node = require('./node'),\n    unitConversions = require('../data/unit-conversions'),\n    utils = require('../utils');\n\nvar Unit = function (numerator, denominator, backupUnit) {\n    this.numerator = numerator ? utils.copyArray(numerator).sort() : [];\n    this.denominator = denominator ? utils.copyArray(denominator).sort() : [];\n    if (backupUnit) {\n        this.backupUnit = backupUnit;\n    } else if (numerator && numerator.length) {\n        this.backupUnit = numerator[0];\n    }\n};\n\nUnit.prototype = new Node();\nUnit.prototype.type = 'Unit';\nUnit.prototype.clone = function () {\n    return new Unit(utils.copyArray(this.numerator), utils.copyArray(this.denominator), this.backupUnit);\n};\nUnit.prototype.genCSS = function (context, output) {\n    // Dimension checks the unit is singular and throws an error if in strict math mode.\n    var strictUnits = context && context.strictUnits;\n    if (this.numerator.length === 1) {\n        output.add(this.numerator[0]); // the ideal situation\n    } else if (!strictUnits && this.backupUnit) {\n        output.add(this.backupUnit);\n    } else if (!strictUnits && this.denominator.length) {\n        output.add(this.denominator[0]);\n    }\n};\nUnit.prototype.toString = function () {\n    var i, returnStr = this.numerator.join('*');\n    for (i = 0; i < this.denominator.length; i++) {\n        returnStr += '/' + this.denominator[i];\n    }\n    return returnStr;\n};\nUnit.prototype.compare = function (other) {\n    return this.is(other.toString()) ? 0 : undefined;\n};\nUnit.prototype.is = function (unitString) {\n    return this.toString().toUpperCase() === unitString.toUpperCase();\n};\nUnit.prototype.isLength = function () {\n    return RegExp('^(px|em|ex|ch|rem|in|cm|mm|pc|pt|ex|vw|vh|vmin|vmax)$', 'gi').test(this.toCSS());\n};\nUnit.prototype.isEmpty = function () {\n    return this.numerator.length === 0 && this.denominator.length === 0;\n};\nUnit.prototype.isSingular = function() {\n    return this.numerator.length <= 1 && this.denominator.length === 0;\n};\nUnit.prototype.map = function(callback) {\n    var i;\n\n    for (i = 0; i < this.numerator.length; i++) {\n        this.numerator[i] = callback(this.numerator[i], false);\n    }\n\n    for (i = 0; i < this.denominator.length; i++) {\n        this.denominator[i] = callback(this.denominator[i], true);\n    }\n};\nUnit.prototype.usedUnits = function() {\n    var group, result = {}, mapUnit, groupName;\n\n    mapUnit = function (atomicUnit) {\n        /* jshint loopfunc:true */\n        if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\n            result[groupName] = atomicUnit;\n        }\n\n        return atomicUnit;\n    };\n\n    for (groupName in unitConversions) {\n        if (unitConversions.hasOwnProperty(groupName)) {\n            group = unitConversions[groupName];\n\n            this.map(mapUnit);\n        }\n    }\n\n    return result;\n};\nUnit.prototype.cancel = function () {\n    var counter = {}, atomicUnit, i;\n\n    for (i = 0; i < this.numerator.length; i++) {\n        atomicUnit = this.numerator[i];\n        counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;\n    }\n\n    for (i = 0; i < this.denominator.length; i++) {\n        atomicUnit = this.denominator[i];\n        counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;\n    }\n\n    this.numerator = [];\n    this.denominator = [];\n\n    for (atomicUnit in counter) {\n        if (counter.hasOwnProperty(atomicUnit)) {\n            var count = counter[atomicUnit];\n\n            if (count > 0) {\n                for (i = 0; i < count; i++) {\n                    this.numerator.push(atomicUnit);\n                }\n            } else if (count < 0) {\n                for (i = 0; i < -count; i++) {\n                    this.denominator.push(atomicUnit);\n                }\n            }\n        }\n    }\n\n    this.numerator.sort();\n    this.denominator.sort();\n};\nmodule.exports = Unit;\n\n},{\"../data/unit-conversions\":16,\"../utils\":89,\"./node\":76}],85:[function(require,module,exports){\nvar Node = require('./node');\n\nvar URL = function (val, index, currentFileInfo, isEvald) {\n    this.value = val;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.isEvald = isEvald;\n};\nURL.prototype = new Node();\nURL.prototype.type = 'Url';\nURL.prototype.accept = function (visitor) {\n    this.value = visitor.visit(this.value);\n};\nURL.prototype.genCSS = function (context, output) {\n    output.add('url(');\n    this.value.genCSS(context, output);\n    output.add(')');\n};\nURL.prototype.eval = function (context) {\n    var val = this.value.eval(context),\n        rootpath;\n\n    if (!this.isEvald) {\n        // Add the rootpath if the URL requires a rewrite\n        rootpath = this.fileInfo() && this.fileInfo().rootpath;\n        if (typeof rootpath === 'string' &&\n            typeof val.value === 'string' &&\n            context.pathRequiresRewrite(val.value)) {\n            if (!val.quote) {\n                rootpath = escapePath(rootpath);\n            }\n            val.value = context.rewritePath(val.value, rootpath);\n        } else {\n            val.value = context.normalizePath(val.value);\n        }\n\n        // Add url args if enabled\n        if (context.urlArgs) {\n            if (!val.value.match(/^\\s*data:/)) {\n                var delimiter = val.value.indexOf('?') === -1 ? '?' : '&';\n                var urlArgs = delimiter + context.urlArgs;\n                if (val.value.indexOf('#') !== -1) {\n                    val.value = val.value.replace('#', urlArgs + '#');\n                } else {\n                    val.value += urlArgs;\n                }\n            }\n        }\n    }\n\n    return new URL(val, this.getIndex(), this.fileInfo(), true);\n};\n\nfunction escapePath(path) {\n    return path.replace(/[\\(\\)'\"\\s]/g, function(match) { return '\\\\' + match; });\n}\n\nmodule.exports = URL;\n\n},{\"./node\":76}],86:[function(require,module,exports){\nvar Node = require('./node');\n\nvar Value = function (value) {\n    if (!value) {\n        throw new Error('Value requires an array argument');\n    }\n    if (!Array.isArray(value)) {\n        this.value = [ value ];\n    }\n    else {\n        this.value = value;\n    }\n};\nValue.prototype = new Node();\nValue.prototype.type = 'Value';\nValue.prototype.accept = function (visitor) {\n    if (this.value) {\n        this.value = visitor.visitArray(this.value);\n    }\n};\nValue.prototype.eval = function (context) {\n    if (this.value.length === 1) {\n        return this.value[0].eval(context);\n    } else {\n        return new Value(this.value.map(function (v) {\n            return v.eval(context);\n        }));\n    }\n};\nValue.prototype.genCSS = function (context, output) {\n    var i;\n    for (i = 0; i < this.value.length; i++) {\n        this.value[i].genCSS(context, output);\n        if (i + 1 < this.value.length) {\n            output.add((context && context.compress) ? ',' : ', ');\n        }\n    }\n};\nmodule.exports = Value;\n\n},{\"./node\":76}],87:[function(require,module,exports){\nvar Node = require('./node'),\n    Variable = require('./variable'),\n    Ruleset = require('./ruleset'),\n    DetachedRuleset = require('./detached-ruleset'),\n    LessError = require('../less-error');\n\nvar VariableCall = function (variable, index, currentFileInfo) {\n    this.variable = variable;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.allowRoot = true;\n};\nVariableCall.prototype = new Node();\nVariableCall.prototype.type = 'VariableCall';\nVariableCall.prototype.eval = function (context) {\n    var rules, detachedRuleset = new Variable(this.variable, this.getIndex(), this.fileInfo()).eval(context),\n        error = new LessError({message: 'Could not evaluate variable call ' + this.variable});\n\n    if (!detachedRuleset.ruleset) {\n        if (detachedRuleset.rules) {\n            rules = detachedRuleset;\n        }\n        else if (Array.isArray(detachedRuleset)) {\n            rules = new Ruleset('', detachedRuleset);\n        }\n        else if (Array.isArray(detachedRuleset.value)) {\n            rules = new Ruleset('', detachedRuleset.value);\n        }\n        else {\n            throw error;\n        }\n        detachedRuleset = new DetachedRuleset(rules);\n    }\n    if (detachedRuleset.ruleset) {\n        return detachedRuleset.callEval(context);\n    }\n    throw error;\n};\nmodule.exports = VariableCall;\n\n},{\"../less-error\":38,\"./detached-ruleset\":61,\"./node\":76,\"./ruleset\":81,\"./variable\":88}],88:[function(require,module,exports){\nvar Node = require('./node'),\n    Call = require('./call');\n\nvar Variable = function (name, index, currentFileInfo) {\n    this.name = name;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n};\nVariable.prototype = new Node();\nVariable.prototype.type = 'Variable';\nVariable.prototype.eval = function (context) {\n    var variable, name = this.name;\n\n    if (name.indexOf('@@') === 0) {\n        name = '@' + new Variable(name.slice(1), this.getIndex(), this.fileInfo()).eval(context).value;\n    }\n\n    if (this.evaluating) {\n        throw { type: 'Name',\n            message: 'Recursive variable definition for ' + name,\n            filename: this.fileInfo().filename,\n            index: this.getIndex() };\n    }\n\n    this.evaluating = true;\n\n    variable = this.find(context.frames, function (frame) {\n        var v = frame.variable(name);\n        if (v) {\n            if (v.important) {\n                var importantScope = context.importantScope[context.importantScope.length - 1];\n                importantScope.important = v.important;\n            }\n            // If in calc, wrap vars in a function call to cascade evaluate args first\n            if (context.inCalc) {\n                return (new Call('_SELF', [v.value])).eval(context);\n            }\n            else {\n                return v.value.eval(context);\n            }\n        }\n    });\n    if (variable) {\n        this.evaluating = false;\n        return variable;\n    } else {\n        throw { type: 'Name',\n            message: 'variable ' + name + ' is undefined',\n            filename: this.fileInfo().filename,\n            index: this.getIndex() };\n    }\n};\nVariable.prototype.find = function (obj, fun) {\n    for (var i = 0, r; i < obj.length; i++) {\n        r = fun.call(obj, obj[i]);\n        if (r) { return r; }\n    }\n    return null;\n};\nmodule.exports = Variable;\n\n},{\"./call\":54,\"./node\":76}],89:[function(require,module,exports){\n/* jshint proto: true */\nvar Constants = require('./constants');\nvar clone = require('clone');\n\nvar utils = {\n    getLocation: function(index, inputStream) {\n        var n = index + 1,\n            line = null,\n            column = -1;\n\n        while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\n            column++;\n        }\n\n        if (typeof index === 'number') {\n            line = (inputStream.slice(0, index).match(/\\n/g) || '').length;\n        }\n\n        return {\n            line: line,\n            column: column\n        };\n    },\n    copyArray: function(arr) {\n        var i, length = arr.length,\n            copy = new Array(length);\n        \n        for (i = 0; i < length; i++) {\n            copy[i] = arr[i];\n        }\n        return copy;\n    },\n    clone: function (obj) {\n        var cloned = {};\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                cloned[prop] = obj[prop];\n            }\n        }\n        return cloned;\n    },\n    copyOptions: function(obj1, obj2) {\n        if (obj2 && obj2._defaults) {\n            return obj2;\n        }\n        var opts = utils.defaults(obj1, obj2);\n        if (opts.strictMath) {\n            opts.math = Constants.Math.STRICT_LEGACY;\n        }\n        // Back compat with changed relativeUrls option\n        if (opts.relativeUrls) {\n            opts.rewriteUrls = Constants.RewriteUrls.ALL;\n        }\n        if (typeof opts.math === 'string') {\n            switch (opts.math.toLowerCase()) {\n                case 'always':\n                    opts.math = Constants.Math.ALWAYS;\n                    break;\n                case 'parens-division':\n                    opts.math = Constants.Math.PARENS_DIVISION;\n                    break;\n                case 'strict':\n                case 'parens':\n                    opts.math = Constants.Math.PARENS;\n                    break;\n                case 'strict-legacy':\n                    opts.math = Constants.Math.STRICT_LEGACY;\n            }\n        }\n        if (typeof opts.rewriteUrls === 'string') {\n            switch (opts.rewriteUrls.toLowerCase()) {\n                case 'off':\n                    opts.rewriteUrls = Constants.RewriteUrls.OFF;\n                    break;\n                case 'local':\n                    opts.rewriteUrls = Constants.RewriteUrls.LOCAL;\n                    break;\n                case 'all':\n                    opts.rewriteUrls = Constants.RewriteUrls.ALL;\n                    break;\n            }\n        }\n        return opts;\n    },\n    defaults: function(obj1, obj2) {\n        var newObj = obj2 || {};\n        if (!obj2._defaults) {\n            newObj = {};\n            var defaults = clone(obj1);\n            newObj._defaults = defaults;\n            var cloned = obj2 ? clone(obj2) : {};\n            Object.assign(newObj, defaults, cloned);\n        }\n        return newObj;\n    },\n    merge: function(obj1, obj2) {\n        for (var prop in obj2) {\n            if (obj2.hasOwnProperty(prop)) {\n                obj1[prop] = obj2[prop];\n            }\n        }\n        return obj1;\n    },\n    flattenArray: function(arr, result) {\n        result = result || [];\n        for (var i = 0, length = arr.length; i < length; i++) {\n            var value = arr[i];\n            if (Array.isArray(value)) {\n                utils.flattenArray(value, result);\n            } else {\n                if (value !== undefined) {\n                    result.push(value);\n                }\n            }\n        }\n        return result;\n    }\n};\n\nmodule.exports = utils;\n},{\"./constants\":12,\"clone\":100}],90:[function(require,module,exports){\nvar tree = require('../tree'),\n    Visitor = require('./visitor'),\n    logger = require('../logger'),\n    utils = require('../utils');\n\n/* jshint loopfunc:true */\n\nvar ExtendFinderVisitor = function() {\n    this._visitor = new Visitor(this);\n    this.contexts = [];\n    this.allExtendsStack = [[]];\n};\n\nExtendFinderVisitor.prototype = {\n    run: function (root) {\n        root = this._visitor.visit(root);\n        root.allExtends = this.allExtendsStack[0];\n        return root;\n    },\n    visitDeclaration: function (declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n\n        var i, j, extend, allSelectorsExtendList = [], extendList;\n\n        // get &:extend(.a); rules which apply to all selectors in this ruleset\n        var rules = rulesetNode.rules, ruleCnt = rules ? rules.length : 0;\n        for (i = 0; i < ruleCnt; i++) {\n            if (rulesetNode.rules[i] instanceof tree.Extend) {\n                allSelectorsExtendList.push(rules[i]);\n                rulesetNode.extendOnEveryPath = true;\n            }\n        }\n\n        // now find every selector and apply the extends that apply to all extends\n        // and the ones which apply to an individual extend\n        var paths = rulesetNode.paths;\n        for (i = 0; i < paths.length; i++) {\n            var selectorPath = paths[i],\n                selector = selectorPath[selectorPath.length - 1],\n                selExtendList = selector.extendList;\n\n            extendList = selExtendList ? utils.copyArray(selExtendList).concat(allSelectorsExtendList)\n                                       : allSelectorsExtendList;\n\n            if (extendList) {\n                extendList = extendList.map(function(allSelectorsExtend) {\n                    return allSelectorsExtend.clone();\n                });\n            }\n\n            for (j = 0; j < extendList.length; j++) {\n                this.foundExtends = true;\n                extend = extendList[j];\n                extend.findSelfSelectors(selectorPath);\n                extend.ruleset = rulesetNode;\n                if (j === 0) { extend.firstExtendOnThisSelectorPath = true; }\n                this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\n            }\n        }\n\n        this.contexts.push(rulesetNode.selectors);\n    },\n    visitRulesetOut: function (rulesetNode) {\n        if (!rulesetNode.root) {\n            this.contexts.length = this.contexts.length - 1;\n        }\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        mediaNode.allExtends = [];\n        this.allExtendsStack.push(mediaNode.allExtends);\n    },\n    visitMediaOut: function (mediaNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    },\n    visitAtRule: function (atRuleNode, visitArgs) {\n        atRuleNode.allExtends = [];\n        this.allExtendsStack.push(atRuleNode.allExtends);\n    },\n    visitAtRuleOut: function (atRuleNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n};\n\nvar ProcessExtendsVisitor = function() {\n    this._visitor = new Visitor(this);\n};\n\nProcessExtendsVisitor.prototype = {\n    run: function(root) {\n        var extendFinder = new ExtendFinderVisitor();\n        this.extendIndices = {};\n        extendFinder.run(root);\n        if (!extendFinder.foundExtends) { return root; }\n        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\n        this.allExtendsStack = [root.allExtends];\n        var newRoot = this._visitor.visit(root);\n        this.checkExtendsForNonMatched(root.allExtends);\n        return newRoot;\n    },\n    checkExtendsForNonMatched: function(extendList) {\n        var indices = this.extendIndices;\n        extendList.filter(function(extend) {\n            return !extend.hasFoundMatches && extend.parent_ids.length == 1;\n        }).forEach(function(extend) {\n            var selector = '_unknown_';\n            try {\n                selector = extend.selector.toCSS({});\n            }\n            catch (_) {}\n\n            if (!indices[extend.index + ' ' + selector]) {\n                indices[extend.index + ' ' + selector] = true;\n                logger.warn('extend \\'' + selector + '\\' has no matches');\n            }\n        });\n    },\n    doExtendChaining: function (extendsList, extendsListTarget, iterationCount) {\n        //\n        // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\n        // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\n        // this means this new extend can then go and alter other extends\n        //\n        // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\n        // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\n        // processed if we look at each selector at a time, as is done in visitRuleset\n\n        var extendIndex, targetExtendIndex, matches, extendsToAdd = [], newSelector, extendVisitor = this, selectorPath,\n            extend, targetExtend, newExtend;\n\n        iterationCount = iterationCount || 0;\n\n        // loop through comparing every extend with every target extend.\n        // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\n        // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\n        // and the second is the target.\n        // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\n        // case when processing media queries\n        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n            for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\n\n                extend = extendsList[extendIndex];\n                targetExtend = extendsListTarget[targetExtendIndex];\n\n                // look for circular references\n                if ( extend.parent_ids.indexOf( targetExtend.object_id ) >= 0 ) { continue; }\n\n                // find a match in the target extends self selector (the bit before :extend)\n                selectorPath = [targetExtend.selfSelectors[0]];\n                matches = extendVisitor.findMatch(extend, selectorPath);\n\n                if (matches.length) {\n                    extend.hasFoundMatches = true;\n\n                    // we found a match, so for each self selector..\n                    extend.selfSelectors.forEach(function(selfSelector) {\n                        var info = targetExtend.visibilityInfo();\n\n                        // process the extend as usual\n                        newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\n\n                        // but now we create a new extend from it\n                        newExtend = new(tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\n                        newExtend.selfSelectors = newSelector;\n\n                        // add the extend onto the list of extends for that selector\n                        newSelector[newSelector.length - 1].extendList = [newExtend];\n\n                        // record that we need to add it.\n                        extendsToAdd.push(newExtend);\n                        newExtend.ruleset = targetExtend.ruleset;\n\n                        // remember its parents for circular references\n                        newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\n\n                        // only process the selector once.. if we have :extend(.a,.b) then multiple\n                        // extends will look at the same selector path, so when extending\n                        // we know that any others will be duplicates in terms of what is added to the css\n                        if (targetExtend.firstExtendOnThisSelectorPath) {\n                            newExtend.firstExtendOnThisSelectorPath = true;\n                            targetExtend.ruleset.paths.push(newSelector);\n                        }\n                    });\n                }\n            }\n        }\n\n        if (extendsToAdd.length) {\n            // try to detect circular references to stop a stack overflow.\n            // may no longer be needed.\n            this.extendChainCount++;\n            if (iterationCount > 100) {\n                var selectorOne = '{unable to calculate}';\n                var selectorTwo = '{unable to calculate}';\n                try {\n                    selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\n                    selectorTwo = extendsToAdd[0].selector.toCSS();\n                }\n                catch (e) {}\n                throw { message: 'extend circular reference detected. One of the circular extends is currently:' +\n                    selectorOne + ':extend(' + selectorTwo + ')'};\n            }\n\n            // now process the new extends on the existing rules so that we can handle a extending b extending c extending\n            // d extending e...\n            return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\n        } else {\n            return extendsToAdd;\n        }\n    },\n    visitDeclaration: function (ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitSelector: function (selectorNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n        var matches, pathIndex, extendIndex, allExtends = this.allExtendsStack[this.allExtendsStack.length - 1],\n            selectorsToAdd = [], extendVisitor = this, selectorPath;\n\n        // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\n\n        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n            for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n                selectorPath = rulesetNode.paths[pathIndex];\n\n                // extending extends happens initially, before the main pass\n                if (rulesetNode.extendOnEveryPath) { continue; }\n                var extendList = selectorPath[selectorPath.length - 1].extendList;\n                if (extendList && extendList.length) { continue; }\n\n                matches = this.findMatch(allExtends[extendIndex], selectorPath);\n\n                if (matches.length) {\n                    allExtends[extendIndex].hasFoundMatches = true;\n\n                    allExtends[extendIndex].selfSelectors.forEach(function(selfSelector) {\n                        var extendedSelectors;\n                        extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\n                        selectorsToAdd.push(extendedSelectors);\n                    });\n                }\n            }\n        }\n        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\n    },\n    findMatch: function (extend, haystackSelectorPath) {\n        //\n        // look through the haystack selector path to try and find the needle - extend.selector\n        // returns an array of selector matches that can then be replaced\n        //\n        var haystackSelectorIndex, hackstackSelector, hackstackElementIndex, haystackElement,\n            targetCombinator, i,\n            extendVisitor = this,\n            needleElements = extend.selector.elements,\n            potentialMatches = [], potentialMatch, matches = [];\n\n        // loop through the haystack elements\n        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\n            hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\n\n            for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\n\n                haystackElement = hackstackSelector.elements[hackstackElementIndex];\n\n                // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\n                if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {\n                    potentialMatches.push({pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,\n                        initialCombinator: haystackElement.combinator});\n                }\n\n                for (i = 0; i < potentialMatches.length; i++) {\n                    potentialMatch = potentialMatches[i];\n\n                    // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\n                    // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\n                    // work out what the resulting combinator will be\n                    targetCombinator = haystackElement.combinator.value;\n                    if (targetCombinator === '' && hackstackElementIndex === 0) {\n                        targetCombinator = ' ';\n                    }\n\n                    // if we don't match, null our match to indicate failure\n                    if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||\n                        (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {\n                        potentialMatch = null;\n                    } else {\n                        potentialMatch.matched++;\n                    }\n\n                    // if we are still valid and have finished, test whether we have elements after and whether these are allowed\n                    if (potentialMatch) {\n                        potentialMatch.finished = potentialMatch.matched === needleElements.length;\n                        if (potentialMatch.finished &&\n                            (!extend.allowAfter &&\n                                (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\n                            potentialMatch = null;\n                        }\n                    }\n                    // if null we remove, if not, we are still valid, so either push as a valid match or continue\n                    if (potentialMatch) {\n                        if (potentialMatch.finished) {\n                            potentialMatch.length = needleElements.length;\n                            potentialMatch.endPathIndex = haystackSelectorIndex;\n                            potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\n                            potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\n                            matches.push(potentialMatch);\n                        }\n                    } else {\n                        potentialMatches.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        return matches;\n    },\n    isElementValuesEqual: function(elementValue1, elementValue2) {\n        if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\n            return elementValue1 === elementValue2;\n        }\n        if (elementValue1 instanceof tree.Attribute) {\n            if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\n                return false;\n            }\n            if (!elementValue1.value || !elementValue2.value) {\n                if (elementValue1.value || elementValue2.value) {\n                    return false;\n                }\n                return true;\n            }\n            elementValue1 = elementValue1.value.value || elementValue1.value;\n            elementValue2 = elementValue2.value.value || elementValue2.value;\n            return elementValue1 === elementValue2;\n        }\n        elementValue1 = elementValue1.value;\n        elementValue2 = elementValue2.value;\n        if (elementValue1 instanceof tree.Selector) {\n            if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\n                return false;\n            }\n            for (var i = 0; i  < elementValue1.elements.length; i++) {\n                if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\n                    if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\n                        return false;\n                    }\n                }\n                if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    },\n    extendSelector:function (matches, selectorPath, replacementSelector, isVisible) {\n\n        // for a set of matches, replace each match with the replacement selector\n\n        var currentSelectorPathIndex = 0,\n            currentSelectorPathElementIndex = 0,\n            path = [],\n            matchIndex,\n            selector,\n            firstElement,\n            match,\n            newElements;\n\n        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n            match = matches[matchIndex];\n            selector = selectorPath[match.pathIndex];\n            firstElement = new tree.Element(\n                match.initialCombinator,\n                replacementSelector.elements[0].value,\n                replacementSelector.elements[0].isVariable,\n                replacementSelector.elements[0].getIndex(),\n                replacementSelector.elements[0].fileInfo()\n            );\n\n            if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\n                path[path.length - 1].elements = path[path.length - 1]\n                    .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n\n            newElements = selector.elements\n                .slice(currentSelectorPathElementIndex, match.index)\n                .concat([firstElement])\n                .concat(replacementSelector.elements.slice(1));\n\n            if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n                path[path.length - 1].elements =\n                    path[path.length - 1].elements.concat(newElements);\n            } else {\n                path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\n\n                path.push(new tree.Selector(\n                    newElements\n                ));\n            }\n            currentSelectorPathIndex = match.endPathIndex;\n            currentSelectorPathElementIndex = match.endPathElementIndex;\n            if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n        }\n\n        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\n            path[path.length - 1].elements = path[path.length - 1]\n                .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n            currentSelectorPathIndex++;\n        }\n\n        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\n        path = path.map(function (currentValue) {\n            // we can re-use elements here, because the visibility property matters only for selectors\n            var derived = currentValue.createDerived(currentValue.elements);\n            if (isVisible) {\n                derived.ensureVisibility();\n            } else {\n                derived.ensureInvisibility();\n            }\n            return derived;\n        });\n        return path;\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    },\n    visitMediaOut: function (mediaNode) {\n        var lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    },\n    visitAtRule: function (atRuleNode, visitArgs) {\n        var newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    },\n    visitAtRuleOut: function (atRuleNode) {\n        var lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n};\n\nmodule.exports = ProcessExtendsVisitor;\n\n},{\"../logger\":39,\"../tree\":67,\"../utils\":89,\"./visitor\":97}],91:[function(require,module,exports){\nfunction ImportSequencer(onSequencerEmpty) {\n    this.imports = [];\n    this.variableImports = [];\n    this._onSequencerEmpty = onSequencerEmpty;\n    this._currentDepth = 0;\n}\n\nImportSequencer.prototype.addImport = function(callback) {\n    var importSequencer = this,\n        importItem = {\n            callback: callback,\n            args: null,\n            isReady: false\n        };\n    this.imports.push(importItem);\n    return function() {\n        importItem.args = Array.prototype.slice.call(arguments, 0);\n        importItem.isReady = true;\n        importSequencer.tryRun();\n    };\n};\n\nImportSequencer.prototype.addVariableImport = function(callback) {\n    this.variableImports.push(callback);\n};\n\nImportSequencer.prototype.tryRun = function() {\n    this._currentDepth++;\n    try {\n        while (true) {\n            while (this.imports.length > 0) {\n                var importItem = this.imports[0];\n                if (!importItem.isReady) {\n                    return;\n                }\n                this.imports = this.imports.slice(1);\n                importItem.callback.apply(null, importItem.args);\n            }\n            if (this.variableImports.length === 0) {\n                break;\n            }\n            var variableImport = this.variableImports[0];\n            this.variableImports = this.variableImports.slice(1);\n            variableImport();\n        }\n    } finally {\n        this._currentDepth--;\n    }\n    if (this._currentDepth === 0 && this._onSequencerEmpty) {\n        this._onSequencerEmpty();\n    }\n};\n\nmodule.exports = ImportSequencer;\n\n},{}],92:[function(require,module,exports){\nvar contexts = require('../contexts'),\n    Visitor = require('./visitor'),\n    ImportSequencer = require('./import-sequencer'),\n    utils = require('../utils');\n\nvar ImportVisitor = function(importer, finish) {\n\n    this._visitor = new Visitor(this);\n    this._importer = importer;\n    this._finish = finish;\n    this.context = new contexts.Eval();\n    this.importCount = 0;\n    this.onceFileDetectionMap = {};\n    this.recursionDetector = {};\n    this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));\n};\n\nImportVisitor.prototype = {\n    isReplacing: false,\n    run: function (root) {\n        try {\n            // process the contents\n            this._visitor.visit(root);\n        }\n        catch (e) {\n            this.error = e;\n        }\n\n        this.isFinished = true;\n        this._sequencer.tryRun();\n    },\n    _onSequencerEmpty: function() {\n        if (!this.isFinished) {\n            return;\n        }\n        this._finish(this.error);\n    },\n    visitImport: function (importNode, visitArgs) {\n        var inlineCSS = importNode.options.inline;\n\n        if (!importNode.css || inlineCSS) {\n\n            var context = new contexts.Eval(this.context, utils.copyArray(this.context.frames));\n            var importParent = context.frames[0];\n\n            this.importCount++;\n            if (importNode.isVariableImport()) {\n                this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));\n            } else {\n                this.processImportNode(importNode, context, importParent);\n            }\n        }\n        visitArgs.visitDeeper = false;\n    },\n    processImportNode: function(importNode, context, importParent) {\n        var evaldImportNode,\n            inlineCSS = importNode.options.inline;\n\n        try {\n            evaldImportNode = importNode.evalForImport(context);\n        } catch (e) {\n            if (!e.filename) { e.index = importNode.getIndex(); e.filename = importNode.fileInfo().filename; }\n            // attempt to eval properly and treat as css\n            importNode.css = true;\n            // if that fails, this error will be thrown\n            importNode.error = e;\n        }\n\n        if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\n\n            if (evaldImportNode.options.multiple) {\n                context.importMultiple = true;\n            }\n\n            // try appending if we haven't determined if it is css or not\n            var tryAppendLessExtension = evaldImportNode.css === undefined;\n\n            for (var i = 0; i < importParent.rules.length; i++) {\n                if (importParent.rules[i] === importNode) {\n                    importParent.rules[i] = evaldImportNode;\n                    break;\n                }\n            }\n\n            var onImported = this.onImported.bind(this, evaldImportNode, context),\n                sequencedOnImported = this._sequencer.addImport(onImported);\n\n            this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.fileInfo(),\n                evaldImportNode.options, sequencedOnImported);\n        } else {\n            this.importCount--;\n            if (this.isFinished) {\n                this._sequencer.tryRun();\n            }\n        }\n    },\n    onImported: function (importNode, context, e, root, importedAtRoot, fullPath) {\n        if (e) {\n            if (!e.filename) {\n                e.index = importNode.getIndex(); e.filename = importNode.fileInfo().filename;\n            }\n            this.error = e;\n        }\n\n        var importVisitor = this,\n            inlineCSS = importNode.options.inline,\n            isPlugin = importNode.options.isPlugin,\n            isOptional = importNode.options.optional,\n            duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;\n\n        if (!context.importMultiple) {\n            if (duplicateImport) {\n                importNode.skip = true;\n            } else {\n                importNode.skip = function() {\n                    if (fullPath in importVisitor.onceFileDetectionMap) {\n                        return true;\n                    }\n                    importVisitor.onceFileDetectionMap[fullPath] = true;\n                    return false;\n                };\n            }\n        }\n\n        if (!fullPath && isOptional) {\n            importNode.skip = true;\n        }\n\n        if (root) {\n            importNode.root = root;\n            importNode.importedFilename = fullPath;\n\n            if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {\n                importVisitor.recursionDetector[fullPath] = true;\n\n                var oldContext = this.context;\n                this.context = context;\n                try {\n                    this._visitor.visit(root);\n                } catch (e) {\n                    this.error = e;\n                }\n                this.context = oldContext;\n            }\n        }\n\n        importVisitor.importCount--;\n\n        if (importVisitor.isFinished) {\n            importVisitor._sequencer.tryRun();\n        }\n    },\n    visitDeclaration: function (declNode, visitArgs) {\n        if (declNode.value.type === 'DetachedRuleset') {\n            this.context.frames.unshift(declNode);\n        } else {\n            visitArgs.visitDeeper = false;\n        }\n    },\n    visitDeclarationOut: function(declNode) {\n        if (declNode.value.type === 'DetachedRuleset') {\n            this.context.frames.shift();\n        }\n    },\n    visitAtRule: function (atRuleNode, visitArgs) {\n        this.context.frames.unshift(atRuleNode);\n    },\n    visitAtRuleOut: function (atRuleNode) {\n        this.context.frames.shift();\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        this.context.frames.unshift(mixinDefinitionNode);\n    },\n    visitMixinDefinitionOut: function (mixinDefinitionNode) {\n        this.context.frames.shift();\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        this.context.frames.unshift(rulesetNode);\n    },\n    visitRulesetOut: function (rulesetNode) {\n        this.context.frames.shift();\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        this.context.frames.unshift(mediaNode.rules[0]);\n    },\n    visitMediaOut: function (mediaNode) {\n        this.context.frames.shift();\n    }\n};\nmodule.exports = ImportVisitor;\n\n},{\"../contexts\":13,\"../utils\":89,\"./import-sequencer\":91,\"./visitor\":97}],93:[function(require,module,exports){\nvar visitors = {\n    Visitor: require('./visitor'),\n    ImportVisitor: require('./import-visitor'),\n    MarkVisibleSelectorsVisitor: require('./set-tree-visibility-visitor'),\n    ExtendVisitor: require('./extend-visitor'),\n    JoinSelectorVisitor: require('./join-selector-visitor'),\n    ToCSSVisitor: require('./to-css-visitor')\n};\n\nmodule.exports = visitors;\n\n},{\"./extend-visitor\":90,\"./import-visitor\":92,\"./join-selector-visitor\":94,\"./set-tree-visibility-visitor\":95,\"./to-css-visitor\":96,\"./visitor\":97}],94:[function(require,module,exports){\nvar Visitor = require('./visitor');\n\nvar JoinSelectorVisitor = function() {\n    this.contexts = [[]];\n    this._visitor = new Visitor(this);\n};\n\nJoinSelectorVisitor.prototype = {\n    run: function (root) {\n        return this._visitor.visit(root);\n    },\n    visitDeclaration: function (declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n\n    visitRuleset: function (rulesetNode, visitArgs) {\n        var context = this.contexts[this.contexts.length - 1],\n            paths = [], selectors;\n\n        this.contexts.push(paths);\n\n        if (!rulesetNode.root) {\n            selectors = rulesetNode.selectors;\n            if (selectors) {\n                selectors = selectors.filter(function(selector) { return selector.getIsOutput(); });\n                rulesetNode.selectors = selectors.length ? selectors : (selectors = null);\n                if (selectors) { rulesetNode.joinSelectors(paths, context, selectors); }\n            }\n            if (!selectors) { rulesetNode.rules = null; }\n            rulesetNode.paths = paths;\n        }\n    },\n    visitRulesetOut: function (rulesetNode) {\n        this.contexts.length = this.contexts.length - 1;\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        var context = this.contexts[this.contexts.length - 1];\n        mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);\n    },\n    visitAtRule: function (atRuleNode, visitArgs) {\n        var context = this.contexts[this.contexts.length - 1];\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n            atRuleNode.rules[0].root = (atRuleNode.isRooted || context.length === 0 || null);\n        }\n    }\n};\n\nmodule.exports = JoinSelectorVisitor;\n\n},{\"./visitor\":97}],95:[function(require,module,exports){\nvar SetTreeVisibilityVisitor = function(visible) {\n    this.visible = visible;\n};\nSetTreeVisibilityVisitor.prototype.run = function(root) {\n    this.visit(root);\n};\nSetTreeVisibilityVisitor.prototype.visitArray = function(nodes) {\n    if (!nodes) {\n        return nodes;\n    }\n\n    var cnt = nodes.length, i;\n    for (i = 0; i < cnt; i++) {\n        this.visit(nodes[i]);\n    }\n    return nodes;\n};\nSetTreeVisibilityVisitor.prototype.visit = function(node) {\n    if (!node) {\n        return node;\n    }\n    if (node.constructor === Array) {\n        return this.visitArray(node);\n    }\n\n    if (!node.blocksVisibility || node.blocksVisibility()) {\n        return node;\n    }\n    if (this.visible) {\n        node.ensureVisibility();\n    } else {\n        node.ensureInvisibility();\n    }\n\n    node.accept(this);\n    return node;\n};\nmodule.exports = SetTreeVisibilityVisitor;\n},{}],96:[function(require,module,exports){\nvar tree = require('../tree'),\n    Visitor = require('./visitor');\n\nvar CSSVisitorUtils = function(context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n};\n\nCSSVisitorUtils.prototype = {\n    containsSilentNonBlockedChild: function(bodyRules) {\n        var rule;\n        if (!bodyRules) {\n            return false;\n        }\n        for (var r = 0; r < bodyRules.length; r++) {\n            rule = bodyRules[r];\n            if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\n                // the atrule contains something that was referenced (likely by extend)\n                // therefore it needs to be shown in output too\n                return true;\n            }\n        }\n        return false;\n    },\n\n    keepOnlyVisibleChilds: function(owner) {\n        if (owner && owner.rules) {\n            owner.rules = owner.rules.filter(function(thing) {\n                return thing.isVisible();\n            });\n        }\n    },\n\n    isEmpty: function(owner) {\n        return (owner && owner.rules) \n            ? (owner.rules.length === 0) : true;\n    },\n\n    hasVisibleSelector: function(rulesetNode) {\n        return (rulesetNode && rulesetNode.paths)\n            ? (rulesetNode.paths.length > 0) : false;\n    },\n\n    resolveVisibility: function (node, originalRules) {\n        if (!node.blocksVisibility()) {\n            if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\n                return ;\n            }\n\n            return node;\n        }\n\n        var compiledRulesBody = node.rules[0];\n        this.keepOnlyVisibleChilds(compiledRulesBody);\n\n        if (this.isEmpty(compiledRulesBody)) {\n            return ;\n        }\n\n        node.ensureVisibility();\n        node.removeVisibilityBlock();\n\n        return node;\n    },\n\n    isVisibleRuleset: function(rulesetNode) {\n        if (rulesetNode.firstRoot) {\n            return true;\n        }\n\n        if (this.isEmpty(rulesetNode)) {\n            return false;\n        }\n\n        if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n            return false;\n        }\n\n        return true;\n    }\n\n};\n\nvar ToCSSVisitor = function(context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n    this.utils = new CSSVisitorUtils(context);\n};\n\nToCSSVisitor.prototype = {\n    isReplacing: true,\n    run: function (root) {\n        return this._visitor.visit(root);\n    },\n\n    visitDeclaration: function (declNode, visitArgs) {\n        if (declNode.blocksVisibility() || declNode.variable) {\n            return;\n        }\n        return declNode;\n    },\n\n    visitMixinDefinition: function (mixinNode, visitArgs) {\n        // mixin definitions do not get eval'd - this means they keep state\n        // so we have to clear that state here so it isn't used if toCSS is called twice\n        mixinNode.frames = [];\n    },\n\n    visitExtend: function (extendNode, visitArgs) {\n    },\n\n    visitComment: function (commentNode, visitArgs) {\n        if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n            return;\n        }\n        return commentNode;\n    },\n\n    visitMedia: function(mediaNode, visitArgs) {\n        var originalRules = mediaNode.rules[0].rules;\n        mediaNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        return this.utils.resolveVisibility(mediaNode, originalRules);\n    },\n\n    visitImport: function (importNode, visitArgs) {\n        if (importNode.blocksVisibility()) {\n            return ;\n        }\n        return importNode;\n    },\n\n    visitAtRule: function(atRuleNode, visitArgs) {\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n            return this.visitAtRuleWithBody(atRuleNode, visitArgs);\n        } else {\n            return this.visitAtRuleWithoutBody(atRuleNode, visitArgs);\n        }\n    },\n\n    visitAnonymous: function(anonymousNode, visitArgs) {\n        if (!anonymousNode.blocksVisibility()) {\n            anonymousNode.accept(this._visitor);\n            return anonymousNode;\n        }\n    },\n\n    visitAtRuleWithBody: function(atRuleNode, visitArgs) {\n        // if there is only one nested ruleset and that one has no path, then it is\n        // just fake ruleset\n        function hasFakeRuleset(atRuleNode) {\n            var bodyRules = atRuleNode.rules;\n            return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\n        }\n        function getBodyRules(atRuleNode) {\n            var nodeRules = atRuleNode.rules;\n            if (hasFakeRuleset(atRuleNode)) {\n                return nodeRules[0].rules;\n            }\n\n            return nodeRules;\n        }\n        // it is still true that it is only one ruleset in array\n        // this is last such moment\n        // process childs\n        var originalRules = getBodyRules(atRuleNode);\n        atRuleNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        if (!this.utils.isEmpty(atRuleNode)) {\n            this._mergeRules(atRuleNode.rules[0].rules);\n        }\n\n        return this.utils.resolveVisibility(atRuleNode, originalRules);\n    },\n\n    visitAtRuleWithoutBody: function(atRuleNode, visitArgs) {\n        if (atRuleNode.blocksVisibility()) {\n            return;\n        }\n\n        if (atRuleNode.name === '@charset') {\n            // Only output the debug info together with subsequent @charset definitions\n            // a comment (or @media statement) before the actual @charset atrule would\n            // be considered illegal css as it has to be on the first line\n            if (this.charset) {\n                if (atRuleNode.debugInfo) {\n                    var comment = new tree.Comment('/* ' + atRuleNode.toCSS(this._context).replace(/\\n/g, '') + ' */\\n');\n                    comment.debugInfo = atRuleNode.debugInfo;\n                    return this._visitor.visit(comment);\n                }\n                return;\n            }\n            this.charset = true;\n        }\n\n        return atRuleNode;\n    },\n\n    checkValidNodes: function(rules, isRoot) {\n        if (!rules) {\n            return;\n        }\n\n        for (var i = 0; i < rules.length; i++) {\n            var ruleNode = rules[i];\n            if (isRoot && ruleNode instanceof tree.Declaration && !ruleNode.variable) {\n                throw { message: 'Properties must be inside selector blocks. They cannot be in the root',\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n            if (ruleNode instanceof tree.Call) {\n                throw { message: 'Function \\'' + ruleNode.name + '\\' is undefined',\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n            if (ruleNode.type && !ruleNode.allowRoot) {\n                throw { message: ruleNode.type + ' node returned by a function is not valid here',\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n        }\n    },\n\n    visitRuleset: function (rulesetNode, visitArgs) {\n        // at this point rulesets are nested into each other\n        var rule, rulesets = [];\n\n        this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\n\n        if (!rulesetNode.root) {\n            // remove invisible paths\n            this._compileRulesetPaths(rulesetNode);\n\n            // remove rulesets from this ruleset body and compile them separately\n            var nodeRules = rulesetNode.rules, nodeRuleCnt = nodeRules ? nodeRules.length : 0;\n            for (var i = 0; i < nodeRuleCnt; ) {\n                rule = nodeRules[i];\n                if (rule && rule.rules) {\n                    // visit because we are moving them out from being a child\n                    rulesets.push(this._visitor.visit(rule));\n                    nodeRules.splice(i, 1);\n                    nodeRuleCnt--;\n                    continue;\n                }\n                i++;\n            }\n            // accept the visitor to remove rules and refactor itself\n            // then we can decide nogw whether we want it or not\n            // compile body\n            if (nodeRuleCnt > 0) {\n                rulesetNode.accept(this._visitor);\n            } else {\n                rulesetNode.rules = null;\n            }\n            visitArgs.visitDeeper = false;\n\n        } else { // if (! rulesetNode.root) {\n            rulesetNode.accept(this._visitor);\n            visitArgs.visitDeeper = false;\n        }\n\n        if (rulesetNode.rules) {\n            this._mergeRules(rulesetNode.rules);\n            this._removeDuplicateRules(rulesetNode.rules);\n        }\n\n        // now decide whether we keep the ruleset\n        if (this.utils.isVisibleRuleset(rulesetNode)) {\n            rulesetNode.ensureVisibility();\n            rulesets.splice(0, 0, rulesetNode);\n        }\n\n        if (rulesets.length === 1) {\n            return rulesets[0];\n        }\n        return rulesets;\n    },\n\n    _compileRulesetPaths: function(rulesetNode) {\n        if (rulesetNode.paths) {\n            rulesetNode.paths = rulesetNode.paths\n                .filter(function(p) {\n                    var i;\n                    if (p[0].elements[0].combinator.value === ' ') {\n                        p[0].elements[0].combinator = new(tree.Combinator)('');\n                    }\n                    for (i = 0; i < p.length; i++) {\n                        if (p[i].isVisible() && p[i].getIsOutput()) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n        }\n    },\n\n    _removeDuplicateRules: function(rules) {\n        if (!rules) { return; }\n\n        // remove duplicates\n        var ruleCache = {},\n            ruleList, rule, i;\n\n        for (i = rules.length - 1; i >= 0 ; i--) {\n            rule = rules[i];\n            if (rule instanceof tree.Declaration) {\n                if (!ruleCache[rule.name]) {\n                    ruleCache[rule.name] = rule;\n                } else {\n                    ruleList = ruleCache[rule.name];\n                    if (ruleList instanceof tree.Declaration) {\n                        ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\n                    }\n                    var ruleCSS = rule.toCSS(this._context);\n                    if (ruleList.indexOf(ruleCSS) !== -1) {\n                        rules.splice(i, 1);\n                    } else {\n                        ruleList.push(ruleCSS);\n                    }\n                }\n            }\n        }\n    },\n\n    _mergeRules: function(rules) {\n        if (!rules) {\n            return; \n        }\n\n        var groups    = {},\n            groupsArr = [];\n        \n        for (var i = 0; i < rules.length; i++) {\n            var rule = rules[i];\n            if (rule.merge) {\n                var key = rule.name;\n                groups[key] ? rules.splice(i--, 1) : \n                    groupsArr.push(groups[key] = []);\n                groups[key].push(rule);\n            }\n        }\n\n        groupsArr.forEach(function(group) {\n            if (group.length > 0) {\n                var result = group[0],\n                    space  = [],\n                    comma  = [new tree.Expression(space)];\n                group.forEach(function(rule) {\n                    if ((rule.merge === '+') && (space.length > 0)) {\n                        comma.push(new tree.Expression(space = []));\n                    }\n                    space.push(rule.value);\n                    result.important = result.important || rule.important;\n                });\n                result.value = new tree.Value(comma);\n            }\n        });\n    }\n};\n\nmodule.exports = ToCSSVisitor;\n\n},{\"../tree\":67,\"./visitor\":97}],97:[function(require,module,exports){\nvar tree = require('../tree');\n\nvar _visitArgs = { visitDeeper: true },\n    _hasIndexed = false;\n\nfunction _noop(node) {\n    return node;\n}\n\nfunction indexNodeTypes(parent, ticker) {\n    // add .typeIndex to tree node types for lookup table\n    var key, child;\n    for (key in parent) { \n        /* eslint guard-for-in: 0 */\n        child = parent[key];\n        switch (typeof child) {\n            case 'function':\n                // ignore bound functions directly on tree which do not have a prototype\n                // or aren't nodes\n                if (child.prototype && child.prototype.type) {\n                    child.prototype.typeIndex = ticker++;\n                }\n                break;\n            case 'object':\n                ticker = indexNodeTypes(child, ticker);\n                break;\n        \n        }\n    }\n    return ticker;\n}\n\nvar Visitor = function(implementation) {\n    this._implementation = implementation;\n    this._visitInCache = {};\n    this._visitOutCache = {};\n\n    if (!_hasIndexed) {\n        indexNodeTypes(tree, 1);\n        _hasIndexed = true;\n    }\n};\n\nVisitor.prototype = {\n    visit: function(node) {\n        if (!node) {\n            return node;\n        }\n\n        var nodeTypeIndex = node.typeIndex;\n        if (!nodeTypeIndex) {\n            // MixinCall args aren't a node type?\n            if (node.value && node.value.typeIndex) {\n                this.visit(node.value);\n            }\n            return node;\n        }\n\n        var impl = this._implementation,\n            func = this._visitInCache[nodeTypeIndex],\n            funcOut = this._visitOutCache[nodeTypeIndex],\n            visitArgs = _visitArgs,\n            fnName;\n\n        visitArgs.visitDeeper = true;\n\n        if (!func) {\n            fnName = 'visit' + node.type;\n            func = impl[fnName] || _noop;\n            funcOut = impl[fnName + 'Out'] || _noop;\n            this._visitInCache[nodeTypeIndex] = func;\n            this._visitOutCache[nodeTypeIndex] = funcOut;\n        }\n\n        if (func !== _noop) {\n            var newNode = func.call(impl, node, visitArgs);\n            if (node && impl.isReplacing) {\n                node = newNode;\n            }\n        }\n\n        if (visitArgs.visitDeeper && node && node.accept) {\n            node.accept(this);\n        }\n\n        if (funcOut != _noop) {\n            funcOut.call(impl, node);\n        }\n\n        return node;\n    },\n    visitArray: function(nodes, nonReplacing) {\n        if (!nodes) {\n            return nodes;\n        }\n\n        var cnt = nodes.length, i;\n\n        // Non-replacing\n        if (nonReplacing || !this._implementation.isReplacing) {\n            for (i = 0; i < cnt; i++) {\n                this.visit(nodes[i]);\n            }\n            return nodes;\n        }\n\n        // Replacing\n        var out = [];\n        for (i = 0; i < cnt; i++) {\n            var evald = this.visit(nodes[i]);\n            if (evald === undefined) { continue; }\n            if (!evald.splice) {\n                out.push(evald);\n            } else if (evald.length) {\n                this.flatten(evald, out);\n            }\n        }\n        return out;\n    },\n    flatten: function(arr, out) {\n        if (!out) {\n            out = [];\n        }\n\n        var cnt, i, item,\n            nestedCnt, j, nestedItem;\n\n        for (i = 0, cnt = arr.length; i < cnt; i++) {\n            item = arr[i];\n            if (item === undefined) {\n                continue;\n            }\n            if (!item.splice) {\n                out.push(item);\n                continue;\n            }\n\n            for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n                nestedItem = item[j];\n                if (nestedItem === undefined) {\n                    continue;\n                }\n                if (!nestedItem.splice) {\n                    out.push(nestedItem);\n                } else if (nestedItem.length) {\n                    this.flatten(nestedItem, out);\n                }\n            }\n        }\n\n        return out;\n    }\n};\nmodule.exports = Visitor;\n\n},{\"../tree\":67}],98:[function(require,module,exports){\n\"use strict\";\n\n// rawAsap provides everything we need except exception management.\nvar rawAsap = require(\"./raw\");\n// RawTasks are recycled to reduce GC churn.\nvar freeTasks = [];\n// We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\nfunction throwFirstError() {\n    if (pendingErrors.length) {\n        throw pendingErrors.shift();\n    }\n}\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawAsap(rawTask);\n}\n\n// We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\nfunction RawTask() {\n    this.task = null;\n}\n\n// The sole purpose of wrapping the task is to catch the exception and recycle\n// the task object after its single use.\nRawTask.prototype.call = function () {\n    try {\n        this.task.call();\n    } catch (error) {\n        if (asap.onerror) {\n            // This hook exists purely for testing purposes.\n            // Its name will be periodically randomized to break any code that\n            // depends on its existence.\n            asap.onerror(error);\n        } else {\n            // In a web browser, exceptions are not fatal. However, to avoid\n            // slowing down the queue of pending tasks, we rethrow the error in a\n            // lower priority turn.\n            pendingErrors.push(error);\n            requestErrorThrow();\n        }\n    } finally {\n        this.task = null;\n        freeTasks[freeTasks.length] = this;\n    }\n};\n\n},{\"./raw\":99}],99:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\n// Use the fastest means possible to execute a task in its own turn, with\n// priority over other events including IO, animation, reflow, and redraw\n// events in browsers.\n//\n// An exception thrown by a task will permanently interrupt the processing of\n// subsequent tasks. The higher level `asap` function ensures that if an\n// exception is thrown by a task, that the task queue will continue flushing as\n// soon as possible, but if you use `rawAsap` directly, you are responsible to\n// either ensure that no exceptions are thrown from your task, or to manually\n// call `rawAsap.requestFlush` if an exception is thrown.\nmodule.exports = rawAsap;\nfunction rawAsap(task) {\n    if (!queue.length) {\n        requestFlush();\n        flushing = true;\n    }\n    // Equivalent to push, but avoids a function call.\n    queue[queue.length] = task;\n}\n\nvar queue = [];\n// Once a flush has been requested, no further calls to `requestFlush` are\n// necessary until the next `flush` completes.\nvar flushing = false;\n// `requestFlush` is an implementation-specific method that attempts to kick\n// off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n// the event queue before yielding to the browser's own event loop.\nvar requestFlush;\n// The position of the next task to execute in the task queue. This is\n// preserved between calls to `flush` so that it can be resumed if\n// a task throws an exception.\nvar index = 0;\n// If a task schedules additional tasks recursively, the task queue can grow\n// unbounded. To prevent memory exhaustion, the task queue will periodically\n// truncate already-completed tasks.\nvar capacity = 1024;\n\n// The flush function processes all tasks that have been scheduled with\n// `rawAsap` unless and until one of those tasks throws an exception.\n// If a task throws an exception, `flush` ensures that its state will remain\n// consistent and will resume where it left off when called again.\n// However, `flush` does not make any arrangements to be called again if an\n// exception is thrown.\nfunction flush() {\n    while (index < queue.length) {\n        var currentIndex = index;\n        // Advance the index before calling the task. This ensures that we will\n        // begin flushing on the next task the task throws an error.\n        index = index + 1;\n        queue[currentIndex].call();\n        // Prevent leaking memory for long chains of recursive calls to `asap`.\n        // If we call `asap` within tasks scheduled by `asap`, the queue will\n        // grow, but to avoid an O(n) walk for every task we execute, we don't\n        // shift tasks off the queue after they have been executed.\n        // Instead, we periodically shift 1024 tasks off the queue.\n        if (index > capacity) {\n            // Manually shift all values starting at the index back to the\n            // beginning of the queue.\n            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n                queue[scan] = queue[scan + index];\n            }\n            queue.length -= index;\n            index = 0;\n        }\n    }\n    queue.length = 0;\n    index = 0;\n    flushing = false;\n}\n\n// `requestFlush` is implemented using a strategy based on data collected from\n// every available SauceLabs Selenium web driver worker at time of writing.\n// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n\n// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that\n// have WebKitMutationObserver but not un-prefixed MutationObserver.\n// Must use `global` or `self` instead of `window` to work in both frames and web\n// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.\n\n/* globals self */\nvar scope = typeof global !== \"undefined\" ? global : self;\nvar BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;\n\n// MutationObservers are desirable because they have high priority and work\n// reliably everywhere they are implemented.\n// They are implemented in all modern browsers.\n//\n// - Android 4-4.3\n// - Chrome 26-34\n// - Firefox 14-29\n// - Internet Explorer 11\n// - iPad Safari 6-7.1\n// - iPhone Safari 7-7.1\n// - Safari 6-7\nif (typeof BrowserMutationObserver === \"function\") {\n    requestFlush = makeRequestCallFromMutationObserver(flush);\n\n// MessageChannels are desirable because they give direct access to the HTML\n// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera\n// 11-12, and in web workers in many engines.\n// Although message channels yield to any queued rendering and IO tasks, they\n// would be better than imposing the 4ms delay of timers.\n// However, they do not work reliably in Internet Explorer or Safari.\n\n// Internet Explorer 10 is the only browser that has setImmediate but does\n// not have MutationObservers.\n// Although setImmediate yields to the browser's renderer, it would be\n// preferrable to falling back to setTimeout since it does not have\n// the minimum 4ms penalty.\n// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and\n// Desktop to a lesser extent) that renders both setImmediate and\n// MessageChannel useless for the purposes of ASAP.\n// https://github.com/kriskowal/q/issues/396\n\n// Timers are implemented universally.\n// We fall back to timers in workers in most engines, and in foreground\n// contexts in the following browsers.\n// However, note that even this simple case requires nuances to operate in a\n// broad spectrum of browsers.\n//\n// - Firefox 3-13\n// - Internet Explorer 6-9\n// - iPad Safari 4.3\n// - Lynx 2.8.7\n} else {\n    requestFlush = makeRequestCallFromTimer(flush);\n}\n\n// `requestFlush` requests that the high priority event queue be flushed as\n// soon as possible.\n// This is useful to prevent an error thrown in a task from stalling the event\n// queue if the exception handled by Node.js’s\n// `process.on(\"uncaughtException\")` or by a domain.\nrawAsap.requestFlush = requestFlush;\n\n// To request a high priority event, we induce a mutation observer by toggling\n// the text of a text node between \"1\" and \"-1\".\nfunction makeRequestCallFromMutationObserver(callback) {\n    var toggle = 1;\n    var observer = new BrowserMutationObserver(callback);\n    var node = document.createTextNode(\"\");\n    observer.observe(node, {characterData: true});\n    return function requestCall() {\n        toggle = -toggle;\n        node.data = toggle;\n    };\n}\n\n// The message channel technique was discovered by Malte Ubl and was the\n// original foundation for this library.\n// http://www.nonblocking.io/2011/06/windownexttick.html\n\n// Safari 6.0.5 (at least) intermittently fails to create message ports on a\n// page's first load. Thankfully, this version of Safari supports\n// MutationObservers, so we don't need to fall back in that case.\n\n// function makeRequestCallFromMessageChannel(callback) {\n//     var channel = new MessageChannel();\n//     channel.port1.onmessage = callback;\n//     return function requestCall() {\n//         channel.port2.postMessage(0);\n//     };\n// }\n\n// For reasons explained above, we are also unable to use `setImmediate`\n// under any circumstances.\n// Even if we were, there is another bug in Internet Explorer 10.\n// It is not sufficient to assign `setImmediate` to `requestFlush` because\n// `setImmediate` must be called *by name* and therefore must be wrapped in a\n// closure.\n// Never forget.\n\n// function makeRequestCallFromSetImmediate(callback) {\n//     return function requestCall() {\n//         setImmediate(callback);\n//     };\n// }\n\n// Safari 6.0 has a problem where timers will get lost while the user is\n// scrolling. This problem does not impact ASAP because Safari 6.0 supports\n// mutation observers, so that implementation is used instead.\n// However, if we ever elect to use timers in Safari, the prevalent work-around\n// is to add a scroll event listener that calls for a flush.\n\n// `setTimeout` does not call the passed callback if the delay is less than\n// approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n// even then.\n\nfunction makeRequestCallFromTimer(callback) {\n    return function requestCall() {\n        // We dispatch a timeout with a specified delay of 0 for engines that\n        // can reliably accommodate that request. This will usually be snapped\n        // to a 4 milisecond delay, but once we're flushing, there's no delay\n        // between events.\n        var timeoutHandle = setTimeout(handleTimer, 0);\n        // However, since this timer gets frequently dropped in Firefox\n        // workers, we enlist an interval handle that will try to fire\n        // an event 20 times per second until it succeeds.\n        var intervalHandle = setInterval(handleTimer, 50);\n\n        function handleTimer() {\n            // Whichever timer succeeds will cancel both timers and\n            // execute the callback.\n            clearTimeout(timeoutHandle);\n            clearInterval(intervalHandle);\n            callback();\n        }\n    };\n}\n\n// This is for `asap.js` only.\n// Its name will be periodically randomized to break any code that depends on\n// its existence.\nrawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;\n\n// ASAP was originally a nextTick shim included in Q. This was factored out\n// into this ASAP package. It was later adapted to RSVP which made further\n// amendments. These decisions, particularly to marginalize MessageChannel and\n// to capture the MutationObserver implementation in a closure, were integrated\n// back into ASAP proper.\n// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],100:[function(require,module,exports){\nvar clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n\n},{}],101:[function(require,module,exports){\n'use strict';\n\nvar asap = require('asap/raw');\n\nfunction noop() {}\n\n// States:\n//\n// 0 - pending\n// 1 - fulfilled with _value\n// 2 - rejected with _value\n// 3 - adopted the state of another promise, _value\n//\n// once the state is no longer pending (0) it is immutable\n\n// All `_` prefixed properties will be reduced to `_{random number}`\n// at build time to obfuscate them and discourage their use.\n// We don't use symbols or Object.defineProperty to fully hide them\n// because the performance isn't good enough.\n\n\n// to avoid using try/catch inside critical functions, we\n// extract them to here.\nvar LAST_ERROR = null;\nvar IS_ERROR = {};\nfunction getThen(obj) {\n  try {\n    return obj.then;\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nfunction tryCallOne(fn, a) {\n  try {\n    return fn(a);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\nfunction tryCallTwo(fn, a, b) {\n  try {\n    fn(a, b);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nmodule.exports = Promise;\n\nfunction Promise(fn) {\n  if (typeof this !== 'object') {\n    throw new TypeError('Promises must be constructed via new');\n  }\n  if (typeof fn !== 'function') {\n    throw new TypeError('Promise constructor\\'s argument is not a function');\n  }\n  this._40 = 0;\n  this._65 = 0;\n  this._55 = null;\n  this._72 = null;\n  if (fn === noop) return;\n  doResolve(fn, this);\n}\nPromise._37 = null;\nPromise._87 = null;\nPromise._61 = noop;\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  if (this.constructor !== Promise) {\n    return safeThen(this, onFulfilled, onRejected);\n  }\n  var res = new Promise(noop);\n  handle(this, new Handler(onFulfilled, onRejected, res));\n  return res;\n};\n\nfunction safeThen(self, onFulfilled, onRejected) {\n  return new self.constructor(function (resolve, reject) {\n    var res = new Promise(noop);\n    res.then(resolve, reject);\n    handle(self, new Handler(onFulfilled, onRejected, res));\n  });\n}\nfunction handle(self, deferred) {\n  while (self._65 === 3) {\n    self = self._55;\n  }\n  if (Promise._37) {\n    Promise._37(self);\n  }\n  if (self._65 === 0) {\n    if (self._40 === 0) {\n      self._40 = 1;\n      self._72 = deferred;\n      return;\n    }\n    if (self._40 === 1) {\n      self._40 = 2;\n      self._72 = [self._72, deferred];\n      return;\n    }\n    self._72.push(deferred);\n    return;\n  }\n  handleResolved(self, deferred);\n}\n\nfunction handleResolved(self, deferred) {\n  asap(function() {\n    var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      if (self._65 === 1) {\n        resolve(deferred.promise, self._55);\n      } else {\n        reject(deferred.promise, self._55);\n      }\n      return;\n    }\n    var ret = tryCallOne(cb, self._55);\n    if (ret === IS_ERROR) {\n      reject(deferred.promise, LAST_ERROR);\n    } else {\n      resolve(deferred.promise, ret);\n    }\n  });\n}\nfunction resolve(self, newValue) {\n  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n  if (newValue === self) {\n    return reject(\n      self,\n      new TypeError('A promise cannot be resolved with itself.')\n    );\n  }\n  if (\n    newValue &&\n    (typeof newValue === 'object' || typeof newValue === 'function')\n  ) {\n    var then = getThen(newValue);\n    if (then === IS_ERROR) {\n      return reject(self, LAST_ERROR);\n    }\n    if (\n      then === self.then &&\n      newValue instanceof Promise\n    ) {\n      self._65 = 3;\n      self._55 = newValue;\n      finale(self);\n      return;\n    } else if (typeof then === 'function') {\n      doResolve(then.bind(newValue), self);\n      return;\n    }\n  }\n  self._65 = 1;\n  self._55 = newValue;\n  finale(self);\n}\n\nfunction reject(self, newValue) {\n  self._65 = 2;\n  self._55 = newValue;\n  if (Promise._87) {\n    Promise._87(self, newValue);\n  }\n  finale(self);\n}\nfunction finale(self) {\n  if (self._40 === 1) {\n    handle(self, self._72);\n    self._72 = null;\n  }\n  if (self._40 === 2) {\n    for (var i = 0; i < self._72.length; i++) {\n      handle(self, self._72[i]);\n    }\n    self._72 = null;\n  }\n}\n\nfunction Handler(onFulfilled, onRejected, promise){\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, promise) {\n  var done = false;\n  var res = tryCallTwo(fn, function (value) {\n    if (done) return;\n    done = true;\n    resolve(promise, value);\n  }, function (reason) {\n    if (done) return;\n    done = true;\n    reject(promise, reason);\n  });\n  if (!done && res === IS_ERROR) {\n    done = true;\n    reject(promise, LAST_ERROR);\n  }\n}\n\n},{\"asap/raw\":99}],102:[function(require,module,exports){\n'use strict';\n\n//This file contains the ES6 extensions to the core Promises/A+ API\n\nvar Promise = require('./core.js');\n\nmodule.exports = Promise;\n\n/* Static Functions */\n\nvar TRUE = valuePromise(true);\nvar FALSE = valuePromise(false);\nvar NULL = valuePromise(null);\nvar UNDEFINED = valuePromise(undefined);\nvar ZERO = valuePromise(0);\nvar EMPTYSTRING = valuePromise('');\n\nfunction valuePromise(value) {\n  var p = new Promise(Promise._61);\n  p._65 = 1;\n  p._55 = value;\n  return p;\n}\nPromise.resolve = function (value) {\n  if (value instanceof Promise) return value;\n\n  if (value === null) return NULL;\n  if (value === undefined) return UNDEFINED;\n  if (value === true) return TRUE;\n  if (value === false) return FALSE;\n  if (value === 0) return ZERO;\n  if (value === '') return EMPTYSTRING;\n\n  if (typeof value === 'object' || typeof value === 'function') {\n    try {\n      var then = value.then;\n      if (typeof then === 'function') {\n        return new Promise(then.bind(value));\n      }\n    } catch (ex) {\n      return new Promise(function (resolve, reject) {\n        reject(ex);\n      });\n    }\n  }\n  return valuePromise(value);\n};\n\nPromise.all = function (arr) {\n  var args = Array.prototype.slice.call(arr);\n\n  return new Promise(function (resolve, reject) {\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n    function res(i, val) {\n      if (val && (typeof val === 'object' || typeof val === 'function')) {\n        if (val instanceof Promise && val.then === Promise.prototype.then) {\n          while (val._65 === 3) {\n            val = val._55;\n          }\n          if (val._65 === 1) return res(i, val._55);\n          if (val._65 === 2) reject(val._55);\n          val.then(function (val) {\n            res(i, val);\n          }, reject);\n          return;\n        } else {\n          var then = val.then;\n          if (typeof then === 'function') {\n            var p = new Promise(then.bind(val));\n            p.then(function (val) {\n              res(i, val);\n            }, reject);\n            return;\n          }\n        }\n      }\n      args[i] = val;\n      if (--remaining === 0) {\n        resolve(args);\n      }\n    }\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.reject = function (value) {\n  return new Promise(function (resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function (values) {\n  return new Promise(function (resolve, reject) {\n    values.forEach(function(value){\n      Promise.resolve(value).then(resolve, reject);\n    });\n  });\n};\n\n/* Prototype Methods */\n\nPromise.prototype['catch'] = function (onRejected) {\n  return this.then(null, onRejected);\n};\n\n},{\"./core.js\":101}],103:[function(require,module,exports){\n// should work in any browser without browserify\n\nif (typeof Promise.prototype.done !== 'function') {\n  Promise.prototype.done = function (onFulfilled, onRejected) {\n    var self = arguments.length ? this.then.apply(this, arguments) : this\n    self.then(null, function (err) {\n      setTimeout(function () {\n        throw err\n      }, 0)\n    })\n  }\n}\n},{}],104:[function(require,module,exports){\n// not \"use strict\" so we can declare global \"Promise\"\n\nvar asap = require('asap');\n\nif (typeof Promise === 'undefined') {\n  Promise = require('./lib/core.js')\n  require('./lib/es6-extensions.js')\n}\n\nrequire('./polyfill-done.js');\n\n},{\"./lib/core.js\":101,\"./lib/es6-extensions.js\":102,\"./polyfill-done.js\":103,\"asap\":98}]},{},[2])(2)\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../webpack/buildin/global.js */ 1), __webpack_require__(/*! ./../../buffer/index.js */ 6).Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzPzEwYWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcz9iYTM3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcz9iMGU0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/*!********************************************************!*\
  !*** ./src/components/raw-textarea/raw-js-textarea.js ***!
  \********************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_base64__ = __webpack_require__(/*! js-base64 */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_base64___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_js_base64__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(/*! classnames */ 5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_uglifyjs_browser__ = __webpack_require__(/*! uglifyjs-browser */ 18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_uglifyjs_browser___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_uglifyjs_browser__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Import Base64\n\n// Import classnames\n\n// Import Uglify\n\n\nvar _wp$element = wp.element,\n    Component = _wp$element.Component,\n    Fragment = _wp$element.Fragment;\nvar _wp$components = wp.components,\n    TextareaControl = _wp$components.TextareaControl,\n    ButtonGroup = _wp$components.ButtonGroup,\n    Button = _wp$components.Button;\n\nvar RawJSTextareaControl = function (_Component) {\n  _inherits(RawJSTextareaControl, _Component);\n\n  function RawJSTextareaControl() {\n    _classCallCheck(this, RawJSTextareaControl);\n\n    var _this = _possibleConstructorReturn(this, (RawJSTextareaControl.__proto__ || Object.getPrototypeOf(RawJSTextareaControl)).apply(this, arguments));\n\n    _this.state = {\n      err: false\n    };\n    return _this;\n  }\n\n  _createClass(RawJSTextareaControl, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var jsStyleTypes = {\n        js: 'JS',\n        babel: 'Babel'\n      };\n\n      var setError = function setError(err) {\n        return _this2.setState({ err: err });\n      };\n\n      var minify = function minify(js) {\n        if (!js) return js;\n\n        var result = __WEBPACK_IMPORTED_MODULE_2_uglifyjs_browser___default.a.minify(js);\n\n        if (result.error) {\n          setError(true);\n          // console.error( 'uglify error', result.error );\n          return js;\n        }\n\n        return result.code;\n      };\n\n      var onParamUpdate = function onParamUpdate(js) {\n        _this2.props.params.min = __WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].encode(_this2.props.params.minEnabled ? minify(js) : js);\n\n        _this2.props.onParamsChange(_this2.props.params);\n      };\n\n      var onParamChange = function onParamChange(js) {\n        if (!js) {\n          onParamUpdate(js);\n          return;\n        }\n\n        if (_this2.props.params.type === 'babel') {\n          try {\n            setError(false);\n            onParamUpdate(Babel.transform(js, { presets: [['es2015', { modules: false }]] }).code);\n          } catch (ex) {\n            // console.error('babel error: ' + ex.message);\n            setError(true);\n            onParamUpdate(js);\n          }\n        } else {\n          setError(false);\n          onParamUpdate(js);\n        }\n      };\n\n      var onJSChange = function onJSChange(js) {\n        _this2.props.onJSChange(__WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].encode(js));\n\n        onParamChange(js);\n      };\n\n      var onMinifyToggle = function onMinifyToggle() {\n        _this2.props.params.minEnabled = !_this2.props.params.minEnabled;\n        onParamChange(__WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].decode(_this2.props.js));\n      };\n\n      var onTypeChange = function onTypeChange(type) {\n        _this2.props.params.type = type;\n        onParamChange(__WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].decode(_this2.props.js));\n      };\n\n      var styleType = Object.keys(jsStyleTypes).indexOf(this.props.params.type) > -1 ? this.props.params.type : 'js';\n\n      return wp.element.createElement(\n        Fragment,\n        null,\n        wp.element.createElement(\n          'div',\n          { className: 'components-base-control mcw-textarea-comp' },\n          wp.element.createElement(\n            'label',\n            null,\n            this.props.label\n          ),\n          wp.element.createElement(\n            ButtonGroup,\n            { className: 'mcw-textarea-button-group' },\n            wp.element.createElement(\n              Button,\n              {\n                className: 'mcw-textarea-btn mcw-textarea-btn-margright',\n                isSmall: true,\n                isPrimary: this.props.params.minEnabled,\n                'aria-pressed': this.props.params.minEnabled,\n                onClick: function onClick() {\n                  return onMinifyToggle();\n                }\n              },\n              this.props.minifyLabel\n            ),\n            Object.keys(jsStyleTypes).map(function (key) {\n              return wp.element.createElement(\n                Button,\n                {\n                  key: key,\n                  className: 'mcw-textarea-btn',\n                  isSmall: true,\n                  isPrimary: styleType === key,\n                  'aria-pressed': styleType === key,\n                  onClick: function onClick() {\n                    return onTypeChange(key);\n                  }\n                },\n                jsStyleTypes[key]\n              );\n            })\n          ),\n          wp.element.createElement(\n            'div',\n            { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('mcw-textarea-comp-inner', { 'mcw-textarea-comp-error': this.state.err }) },\n            wp.element.createElement(\n              'p',\n              { className: 'mcw-textarea-def' },\n              '<script type=\"text/javascript\">'\n            ),\n            wp.element.createElement(TextareaControl, {\n              rows: 12,\n              value: __WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].decode(this.props.js),\n              onChange: function onChange(value) {\n                return onJSChange(value);\n              }\n            }),\n            wp.element.createElement(\n              'p',\n              { className: 'mcw-textarea-def' },\n              '</script>'\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return RawJSTextareaControl;\n}(Component);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RawJSTextareaControl);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/*!************************************************!*\
  !*** ./node_modules/uglifyjs-browser/build.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer, global) {!function(h){\"use strict\";function e(e){return e.split(\"\")}function te(e,n){return 0<=n.indexOf(e)}function V(e,n){for(var t=0,i=n.length;t<i;++t)if(e(n[t]))return n[t]}function n(e){Object.defineProperty(e.prototype,\"stack\",{get:function(){var e=new Error(this.message);e.name=this.name;try{throw e}catch(e){return e.stack}}})}function o(e,n){this.message=e,this.defs=n}function Y(e,n,t){!0===e&&(e={});var i=e||{};if(t)for(var r in i)ae(i,r)&&!ae(n,r)&&o.croak(\"`\"+r+\"` is not a supported option\",n);for(var r in n)ae(n,r)&&(i[r]=e&&ae(e,r)?e[r]:n[r]);return i}function t(e,n){var t=0;for(var i in n)ae(n,i)&&(e[i]=n[i],t++);return t}function L(){}function ie(){return!1}function J(){return!0}function C(){return this}function B(){return null}((o.prototype=Object.create(Error.prototype)).constructor=o).prototype.name=\"DefaultsError\",n(o),o.croak=function(e,n){throw new o(e,n)};var re=function(){function e(t,i,r){var o,a=[],s=[];function e(){var e=i(t[o],o),n=e instanceof l;return n&&(e=e.v),e instanceof c?(e=e.v)instanceof f?s.push.apply(s,r?e.v.slice().reverse():e.v):s.push(e):e!==u&&(e instanceof f?a.push.apply(a,r?e.v.slice().reverse():e.v):a.push(e)),n}if(t instanceof Array)if(r){for(o=t.length;0<=--o&&!e(););a.reverse(),s.reverse()}else for(o=0;o<t.length&&!e();++o);else for(o in t)if(ae(t,o)&&e())break;return s.concat(a)}e.at_top=function(e){return new c(e)},e.splice=function(e){return new f(e)},e.last=function(e){return new l(e)};var u=e.skip={};function c(e){this.v=e}function f(e){this.v=e}function l(e){this.v=e}return e}();function v(e,n){e.indexOf(n)<0&&e.push(n)}function S(e,t){return e.replace(/\\{(.+?)\\}/g,function(e,n){return t&&t[n]})}function T(e,n){for(var t=e.length;0<=--t;)e[t]===n&&e.splice(t,1)}function s(e,a){if(e.length<2)return e.slice();return function e(n){if(n.length<=1)return n;var t=Math.floor(n.length/2),i=n.slice(0,t),r=n.slice(t);return function(e,n){for(var t=[],i=0,r=0,o=0;i<e.length&&r<n.length;)a(e[i],n[r])<=0?t[o++]=e[i++]:t[o++]=n[r++];return i<e.length&&t.push.apply(t,e.slice(i)),r<n.length&&t.push.apply(t,n.slice(r)),t}(i=e(i),r=e(r))}(e)}function W(e){e instanceof Array||(e=e.split(\" \"));var t=\"\",n=[];e:for(var i=0;i<e.length;++i){for(var r=0;r<n.length;++r)if(n[r][0].length==e[i].length){n[r].push(e[i]);continue e}n.push([e[i]])}function o(e){return JSON.stringify(e).replace(/[\\u2028\\u2029]/g,function(e){switch(e){case\"\\u2028\":return\"\\\\u2028\";case\"\\u2029\":return\"\\\\u2029\"}return e})}function a(e){if(1==e.length)return t+=\"return str === \"+o(e[0])+\";\";t+=\"switch(str){\";for(var n=0;n<e.length;++n)t+=\"case \"+o(e[n])+\":\";t+=\"return true}return false;\"}if(3<n.length){n.sort(function(e,n){return n.length-e.length}),t+=\"switch(str.length){\";for(i=0;i<n.length;++i){var s=n[i];t+=\"case \"+s[0].length+\":\",a(s)}t+=\"}\"}else a(e);return new Function(\"str\",t)}function oe(e,n){for(var t=e.length;0<=--t;)if(!n(e[t]))return!1;return!0}function O(){this._values=Object.create(null),this._size=0}function ae(e,n){return Object.prototype.hasOwnProperty.call(e,n)}function $(e){for(var n,t=e.parent(-1),i=0;n=e.parent(i);i++){if(n instanceof ue&&n.body===t)return!0;if(!(n instanceof We&&n.expressions[0]===t||\"Call\"==n.TYPE&&n.expression===t||n instanceof Xe&&n.expression===t||n instanceof Ze&&n.expression===t||n instanceof tn&&n.condition===t||n instanceof nn&&n.left===t||n instanceof en&&n.expression===t))return!1;t=n}}function i(e,n,t,i){arguments.length<4&&(i=se);var r=n=n?n.split(/\\s+/):[];i&&i.PROPS&&(n=n.concat(i.PROPS));for(var o=\"return function AST_\"+e+\"(props){ if (props) { \",a=n.length;0<=--a;)o+=\"this.\"+n[a]+\" = props.\"+n[a]+\";\";var s=i&&new i;(s&&s.initialize||t&&t.initialize)&&(o+=\"this.initialize();\"),o+=\"}}\";var u=new Function(o)();if(s&&(u.prototype=s,u.BASE=i),i&&i.SUBCLASSES.push(u),(u.prototype.CTOR=u).PROPS=n||null,u.SELF_PROPS=r,u.SUBCLASSES=[],e&&(u.prototype.TYPE=u.TYPE=e),t)for(a in t)ae(t,a)&&(/^\\$/.test(a)?u[a.substr(1)]=t[a]:u.prototype[a]=t[a]);return u.DEFMETHOD=function(e,n){this.prototype[e]=n},void 0!==h&&(h[\"AST_\"+e]=u),u}O.prototype={set:function(e,n){return this.has(e)||++this._size,this._values[\"$\"+e]=n,this},add:function(e,n){return this.has(e)?this.get(e).push(n):this.set(e,[n]),this},get:function(e){return this._values[\"$\"+e]},del:function(e){return this.has(e)&&(--this._size,delete this._values[\"$\"+e]),this},has:function(e){return\"$\"+e in this._values},each:function(e){for(var n in this._values)e(this._values[n],n.substr(1))},size:function(){return this._size},map:function(e){var n=[];for(var t in this._values)n.push(e(this._values[t],t.substr(1)));return n},clone:function(){var e=new O;for(var n in this._values)e._values[n]=this._values[n];return e._size=this._size,e},toObject:function(){return this._values}},O.fromObject=function(e){var n=new O;return n._size=t(n._values,e),n};var F=i(\"Token\",\"type value line col pos endline endcol endpos nlb comments_before comments_after file raw\",{},null),se=i(\"Node\",\"start end\",{_clone:function(e){if(e){var n=this.clone();return n.transform(new Xn(function(e){if(e!==n)return e.clone(!0)}))}return new this.CTOR(this)},clone:function(e){return this._clone(e)},$documentation:\"Base class of all AST nodes\",$propdoc:{start:\"[AST_Token] The first token of this node\",end:\"[AST_Token] The last token of this node\"},_walk:function(e){return e._visit(this)},walk:function(e){return this._walk(e)}},null);se.warn_function=null,se.warn=function(e,n){se.warn_function&&se.warn_function(S(e,n))};var ue=i(\"Statement\",null,{$documentation:\"Base class of all statements\"}),ce=i(\"Debugger\",null,{$documentation:\"Represents a debugger statement\"},ue),fe=i(\"Directive\",\"value quote\",{$documentation:'Represents a directive, like \"use strict\";',$propdoc:{value:\"[string] The value of this directive as a plain string (it's not an AST_String!)\",quote:\"[string] the original quote character\"}},ue),le=i(\"SimpleStatement\",\"body\",{$documentation:\"A statement consisting of an expression, i.e. a = 1 + 2\",$propdoc:{body:\"[AST_Node] an expression node (should not be instanceof AST_Statement)\"},_walk:function(e){return e._visit(this,function(){this.body._walk(e)})}},ue);function z(e,n){var t=e.body;if(t instanceof ue)t._walk(n);else for(var i=0,r=t.length;i<r;i++)t[i]._walk(n)}var pe=i(\"Block\",\"body\",{$documentation:\"A body of statements (usually braced)\",$propdoc:{body:\"[AST_Statement*] an array of statements\"},_walk:function(e){return e._visit(this,function(){z(this,e)})}},ue),de=i(\"BlockStatement\",null,{$documentation:\"A block statement\"},pe),he=i(\"EmptyStatement\",null,{$documentation:\"The empty statement (empty block or simply a semicolon)\"},ue),_=i(\"StatementWithBody\",\"body\",{$documentation:\"Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`\",$propdoc:{body:\"[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement\"}},ue),ve=i(\"LabeledStatement\",\"label\",{$documentation:\"Statement with a label\",$propdoc:{label:\"[AST_Label] a label definition\"},_walk:function(e){return e._visit(this,function(){this.label._walk(e),this.body._walk(e)})},clone:function(e){var n=this._clone(e);if(e){var t=n.label,i=this.label;n.walk(new Sn(function(e){e instanceof Oe&&e.label&&e.label.thedef===i&&(e.label.thedef=t).references.push(e)}))}return n}},_),_e=i(\"IterationStatement\",null,{$documentation:\"Internal class.  All loops inherit from it.\"},_),me=i(\"DWLoop\",\"condition\",{$documentation:\"Base class for do/while statements\",$propdoc:{condition:\"[AST_Node] the loop condition.  Should not be instanceof AST_Statement\"}},_e),ge=i(\"Do\",null,{$documentation:\"A `do` statement\",_walk:function(e){return e._visit(this,function(){this.body._walk(e),this.condition._walk(e)})}},me),be=i(\"While\",null,{$documentation:\"A `while` statement\",_walk:function(e){return e._visit(this,function(){this.condition._walk(e),this.body._walk(e)})}},me),ye=i(\"For\",\"init condition step\",{$documentation:\"A `for` statement\",$propdoc:{init:\"[AST_Node?] the `for` initialization code, or null if empty\",condition:\"[AST_Node?] the `for` termination clause, or null if empty\",step:\"[AST_Node?] the `for` update clause, or null if empty\"},_walk:function(e){return e._visit(this,function(){this.init&&this.init._walk(e),this.condition&&this.condition._walk(e),this.step&&this.step._walk(e),this.body._walk(e)})}},_e),we=i(\"ForIn\",\"init object\",{$documentation:\"A `for ... in` statement\",$propdoc:{init:\"[AST_Node] the `for/in` initialization code\",object:\"[AST_Node] the object that we're looping through\"},_walk:function(e){return e._visit(this,function(){this.init._walk(e),this.object._walk(e),this.body._walk(e)})}},_e),xe=i(\"With\",\"expression\",{$documentation:\"A `with` statement\",$propdoc:{expression:\"[AST_Node] the `with` expression\"},_walk:function(e){return e._visit(this,function(){this.expression._walk(e),this.body._walk(e)})}},_),Ae=i(\"Scope\",\"variables functions uses_with uses_eval parent_scope enclosed cname\",{$documentation:\"Base class for all statements introducing a lexical scope\",$propdoc:{variables:\"[Object/S] a map of name -> SymbolDef for all variables/functions defined in this scope\",functions:\"[Object/S] like `variables`, but only lists function declarations\",uses_with:\"[boolean/S] tells whether this scope uses the `with` statement\",uses_eval:\"[boolean/S] tells whether this scope contains a direct call to the global `eval`\",parent_scope:\"[AST_Scope?/S] link to the parent scope\",enclosed:\"[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes\",cname:\"[integer/S] current index for mangling variables (used internally by the mangler)\"},clone:function(e){var n=this._clone(e);return this.variables&&(n.variables=this.variables.clone()),this.functions&&(n.functions=this.functions.clone()),this.enclosed&&(n.enclosed=this.enclosed.slice()),n}},pe),Ee=i(\"Toplevel\",\"globals\",{$documentation:\"The toplevel scope\",$propdoc:{globals:\"[Object/S] a map of name -> SymbolDef for all undeclared names\"},wrap_commonjs:function(e){var n=this.body,t=\"(function(exports){'$ORIG';})(typeof \"+e+\"=='undefined'?(\"+e+\"={}):\"+e+\");\";return t=(t=Gn(t)).transform(new Xn(function(e){if(e instanceof fe&&\"$ORIG\"==e.value)return re.splice(n)}))}},Ae),ke=i(\"Lambda\",\"name argnames uses_arguments\",{$documentation:\"Base class for functions\",$propdoc:{name:\"[AST_SymbolDeclaration?] the name of this function\",argnames:\"[AST_SymbolFunarg*] array of function arguments\",uses_arguments:\"[boolean/S] tells whether this function accesses the arguments array\"},_walk:function(i){return i._visit(this,function(){this.name&&this.name._walk(i);for(var e=this.argnames,n=0,t=e.length;n<t;n++)e[n]._walk(i);z(this,i)})}},Ae),De=i(\"Accessor\",null,{$documentation:\"A setter/getter function.  The `name` property is always null.\"},ke),Fe=i(\"Function\",\"inlined\",{$documentation:\"A function expression\"},ke),Ce=i(\"Defun\",\"inlined\",{$documentation:\"A function definition\"},ke),Be=i(\"Jump\",null,{$documentation:\"Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)\"},ue),Se=i(\"Exit\",\"value\",{$documentation:\"Base class for “exits” (`return` and `throw`)\",$propdoc:{value:\"[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return\"},_walk:function(e){return e._visit(this,this.value&&function(){this.value._walk(e)})}},Be),Te=i(\"Return\",null,{$documentation:\"A `return` statement\"},Se),G=i(\"Throw\",null,{$documentation:\"A `throw` statement\"},Se),Oe=i(\"LoopControl\",\"label\",{$documentation:\"Base class for loop control statements (`break` and `continue`)\",$propdoc:{label:\"[AST_LabelRef?] the label, or null if none\"},_walk:function(e){return e._visit(this,this.label&&function(){this.label._walk(e)})}},Be),$e=i(\"Break\",null,{$documentation:\"A `break` statement\"},Oe),ze=i(\"Continue\",null,{$documentation:\"A `continue` statement\"},Oe),Me=i(\"If\",\"condition alternative\",{$documentation:\"A `if` statement\",$propdoc:{condition:\"[AST_Node] the `if` condition\",alternative:\"[AST_Statement?] the `else` part, or null if not present\"},_walk:function(e){return e._visit(this,function(){this.condition._walk(e),this.body._walk(e),this.alternative&&this.alternative._walk(e)})}},_),qe=i(\"Switch\",\"expression\",{$documentation:\"A `switch` statement\",$propdoc:{expression:\"[AST_Node] the `switch` “discriminant”\"},_walk:function(e){return e._visit(this,function(){this.expression._walk(e),z(this,e)})}},pe),je=i(\"SwitchBranch\",null,{$documentation:\"Base class for `switch` branches\"},pe),Ne=i(\"Default\",null,{$documentation:\"A `default` switch branch\"},je),He=i(\"Case\",\"expression\",{$documentation:\"A `case` switch branch\",$propdoc:{expression:\"[AST_Node] the `case` expression\"},_walk:function(e){return e._visit(this,function(){this.expression._walk(e),z(this,e)})}},je),Re=i(\"Try\",\"bcatch bfinally\",{$documentation:\"A `try` statement\",$propdoc:{bcatch:\"[AST_Catch?] the catch block, or null if not present\",bfinally:\"[AST_Finally?] the finally block, or null if not present\"},_walk:function(e){return e._visit(this,function(){z(this,e),this.bcatch&&this.bcatch._walk(e),this.bfinally&&this.bfinally._walk(e)})}},pe),Ie=i(\"Catch\",\"argname\",{$documentation:\"A `catch` node; only makes sense as part of a `try` statement\",$propdoc:{argname:\"[AST_SymbolCatch] symbol for the exception\"},_walk:function(e){return e._visit(this,function(){this.argname._walk(e),z(this,e)})}},pe),Pe=i(\"Finally\",null,{$documentation:\"A `finally` node; only makes sense as part of a `try` statement\"},pe),Ue=i(\"Definitions\",\"definitions\",{$documentation:\"Base class for `var` nodes (variable declarations/initializations)\",$propdoc:{definitions:\"[AST_VarDef*] array of variable definitions\"},_walk:function(i){return i._visit(this,function(){for(var e=this.definitions,n=0,t=e.length;n<t;n++)e[n]._walk(i)})}},ue),Le=i(\"Var\",null,{$documentation:\"A `var` statement\"},Ue),Ve=i(\"VarDef\",\"name value\",{$documentation:\"A variable declaration; only appears in a AST_Definitions node\",$propdoc:{name:\"[AST_SymbolVar] name of the variable\",value:\"[AST_Node?] initializer, or null of there's no initializer\"},_walk:function(e){return e._visit(this,function(){this.name._walk(e),this.value&&this.value._walk(e)})}}),Ye=i(\"Call\",\"expression args\",{$documentation:\"A function call expression\",$propdoc:{expression:\"[AST_Node] expression to invoke as function\",args:\"[AST_Node*] array of arguments\"},_walk:function(i){return i._visit(this,function(){for(var e=this.args,n=0,t=e.length;n<t;n++)e[n]._walk(i);this.expression._walk(i)})}}),Je=i(\"New\",null,{$documentation:\"An object instantiation.  Derives from a function call since it has exactly the same properties\"},Ye),We=i(\"Sequence\",\"expressions\",{$documentation:\"A sequence expression (comma-separated expressions)\",$propdoc:{expressions:\"[AST_Node*] array of expressions (at least two)\"},_walk:function(n){return n._visit(this,function(){this.expressions.forEach(function(e){e._walk(n)})})}}),Ge=i(\"PropAccess\",\"expression property\",{$documentation:'Base class for property access expressions, i.e. `a.foo` or `a[\"foo\"]`',$propdoc:{expression:\"[AST_Node] the “container” expression\",property:\"[AST_Node|string] the property to access.  For AST_Dot this is always a plain string, while for AST_Sub it's an arbitrary AST_Node\"}}),Xe=i(\"Dot\",null,{$documentation:\"A dotted property access expression\",_walk:function(e){return e._visit(this,function(){this.expression._walk(e)})}},Ge),Ze=i(\"Sub\",null,{$documentation:'Index-style property access, i.e. `a[\"foo\"]`',_walk:function(e){return e._visit(this,function(){this.expression._walk(e),this.property._walk(e)})}},Ge),Ke=i(\"Unary\",\"operator expression\",{$documentation:\"Base class for unary expressions\",$propdoc:{operator:\"[string] the operator\",expression:\"[AST_Node] expression that this unary operator applies to\"},_walk:function(e){return e._visit(this,function(){this.expression._walk(e)})}}),Qe=i(\"UnaryPrefix\",null,{$documentation:\"Unary prefix expression, i.e. `typeof i` or `++i`\"},Ke),en=i(\"UnaryPostfix\",null,{$documentation:\"Unary postfix expression, i.e. `i++`\"},Ke),nn=i(\"Binary\",\"operator left right\",{$documentation:\"Binary expression, i.e. `a + b`\",$propdoc:{left:\"[AST_Node] left-hand side expression\",operator:\"[string] the operator\",right:\"[AST_Node] right-hand side expression\"},_walk:function(e){return e._visit(this,function(){this.left._walk(e),this.right._walk(e)})}}),tn=i(\"Conditional\",\"condition consequent alternative\",{$documentation:\"Conditional expression using the ternary operator, i.e. `a ? b : c`\",$propdoc:{condition:\"[AST_Node]\",consequent:\"[AST_Node]\",alternative:\"[AST_Node]\"},_walk:function(e){return e._visit(this,function(){this.condition._walk(e),this.consequent._walk(e),this.alternative._walk(e)})}}),rn=i(\"Assign\",null,{$documentation:\"An assignment expression — `a = b + 5`\"},nn),on=i(\"Array\",\"elements\",{$documentation:\"An array literal\",$propdoc:{elements:\"[AST_Node*] array of elements\"},_walk:function(i){return i._visit(this,function(){for(var e=this.elements,n=0,t=e.length;n<t;n++)e[n]._walk(i)})}}),an=i(\"Object\",\"properties\",{$documentation:\"An object literal\",$propdoc:{properties:\"[AST_ObjectProperty*] array of properties\"},_walk:function(i){return i._visit(this,function(){for(var e=this.properties,n=0,t=e.length;n<t;n++)e[n]._walk(i)})}}),sn=i(\"ObjectProperty\",\"key value\",{$documentation:\"Base class for literal object properties\",$propdoc:{key:\"[string|AST_SymbolAccessor] property name. For ObjectKeyVal this is a string. For getters and setters this is an AST_SymbolAccessor.\",value:\"[AST_Node] property value.  For getters and setters this is an AST_Accessor.\"},_walk:function(e){return e._visit(this,function(){this.value._walk(e)})}}),un=i(\"ObjectKeyVal\",\"quote\",{$documentation:\"A key: value object property\",$propdoc:{quote:\"[string] the original quote character\"}},sn),X=i(\"ObjectSetter\",null,{$documentation:\"An object setter property\"},sn),Z=i(\"ObjectGetter\",null,{$documentation:\"An object getter property\"},sn),cn=i(\"Symbol\",\"scope name thedef\",{$propdoc:{name:\"[string] name of this symbol\",scope:\"[AST_Scope/S] the current scope (not necessarily the definition scope)\",thedef:\"[SymbolDef/S] the definition of this symbol\"},$documentation:\"Base class for all symbols\"}),K=i(\"SymbolAccessor\",null,{$documentation:\"The name of a property accessor (setter/getter function)\"},cn),fn=i(\"SymbolDeclaration\",\"init\",{$documentation:\"A declaration symbol (symbol in var, function name or argument, symbol in catch)\"},cn),ln=i(\"SymbolVar\",null,{$documentation:\"Symbol defining a variable\"},fn),pn=i(\"SymbolFunarg\",null,{$documentation:\"Symbol naming a function argument\"},ln),dn=i(\"SymbolDefun\",null,{$documentation:\"Symbol defining a function\"},fn),hn=i(\"SymbolLambda\",null,{$documentation:\"Symbol naming a function expression\"},fn),vn=i(\"SymbolCatch\",null,{$documentation:\"Symbol naming the exception in catch\"},fn),Q=i(\"Label\",\"references\",{$documentation:\"Symbol naming a label (declaration)\",$propdoc:{references:\"[AST_LoopControl*] a list of nodes referring to this label\"},initialize:function(){this.references=[],this.thedef=this}},cn),_n=i(\"SymbolRef\",null,{$documentation:\"Reference to some symbol (not definition/declaration)\"},cn),ee=i(\"LabelRef\",null,{$documentation:\"Reference to a label symbol\"},cn),mn=i(\"This\",null,{$documentation:\"The `this` symbol\"},cn),gn=i(\"Constant\",null,{$documentation:\"Base class for all constants\",getValue:function(){return this.value}}),bn=i(\"String\",\"value quote\",{$documentation:\"A string literal\",$propdoc:{value:\"[string] the contents of this string\",quote:\"[string] the original quote character\"}},gn),yn=i(\"Number\",\"value literal\",{$documentation:\"A number literal\",$propdoc:{value:\"[number] the numeric value\",literal:\"[string] numeric value as string (optional)\"}},gn),wn=i(\"RegExp\",\"value\",{$documentation:\"A regexp literal\",$propdoc:{value:\"[RegExp] the actual regexp\"}},gn),a=i(\"Atom\",null,{$documentation:\"Base class for atoms\"},gn),xn=i(\"Null\",null,{$documentation:\"The `null` atom\",value:null},a),An=i(\"NaN\",null,{$documentation:\"The impossible value\",value:NaN},a),En=i(\"Undefined\",null,{$documentation:\"The `undefined` value\",value:void 0},a),kn=i(\"Hole\",null,{$documentation:\"A hole in an array\",value:void 0},a),Dn=i(\"Infinity\",null,{$documentation:\"The `Infinity` value\",value:1/0},a),Fn=i(\"Boolean\",null,{$documentation:\"Base class for booleans\"},a),Cn=i(\"False\",null,{$documentation:\"The `false` atom\",value:!1},Fn),Bn=i(\"True\",null,{$documentation:\"The `true` atom\",value:!0},Fn);function Sn(e){this.visit=e,this.stack=[],this.directives=Object.create(null)}Sn.prototype={_visit:function(e,n){this.push(e);var t=this.visit(e,n?function(){n.call(e)}:L);return!t&&n&&n.call(e),this.pop(),t},parent:function(e){return this.stack[this.stack.length-2-(e||0)]},push:function(e){e instanceof ke?this.directives=Object.create(this.directives):e instanceof fe&&!this.directives[e.value]&&(this.directives[e.value]=e),this.stack.push(e)},pop:function(){this.stack.pop()instanceof ke&&(this.directives=Object.getPrototypeOf(this.directives))},self:function(){return this.stack[this.stack.length-1]},find_parent:function(e){for(var n=this.stack,t=n.length;0<=--t;){var i=n[t];if(i instanceof e)return i}},has_directive:function(e){var n=this.directives[e];if(n)return n;var t=this.stack[this.stack.length-1];if(t instanceof Ae)for(var i=0;i<t.body.length;++i){var r=t.body[i];if(!(r instanceof fe))break;if(r.value==e)return r}},loopcontrol_target:function(e){var n=this.stack;if(e.label)for(var t=n.length;0<=--t;){if((i=n[t])instanceof ve&&i.label.name==e.label.name)return i.body}else for(t=n.length;0<=--t;){var i;if((i=n[t])instanceof _e||e instanceof $e&&i instanceof qe)return i}},in_boolean_context:function(){for(var e,n=this.self(),t=0;e=this.parent(t);t++){if(e instanceof le||e instanceof tn&&e.condition===n||e instanceof me&&e.condition===n||e instanceof ye&&e.condition===n||e instanceof Me&&e.condition===n||e instanceof Qe&&\"!\"==e.operator&&e.expression===n)return!0;if(!(e instanceof nn&&(\"&&\"==e.operator||\"||\"==e.operator)||e instanceof tn||e.tail_node()===n))return!1;n=e}}};var ne=\"break case catch const continue debugger default delete do else finally for function if in instanceof new return switch throw try typeof var void while with\",M=\"false null true\",m=\"abstract boolean byte char class double enum export extends final float goto implements import int interface let long native package private protected public short static super synchronized this throws transient volatile yield \"+M+\" \"+ne,q=\"return new delete throw else case\";ne=W(ne),m=W(m),q=W(q),M=W(M);var j=W(e(\"+-*&%=<>!?|~^\")),N=/^0x[0-9a-f]+$/i,H=/^0[0-7]+$/,R=W([\"in\",\"instanceof\",\"typeof\",\"new\",\"void\",\"delete\",\"++\",\"--\",\"+\",\"-\",\"!\",\"~\",\"&\",\"|\",\"^\",\"*\",\"/\",\"%\",\">>\",\"<<\",\">>>\",\"<\",\">\",\"<=\",\">=\",\"==\",\"===\",\"!=\",\"!==\",\"?\",\"=\",\"+=\",\"-=\",\"/=\",\"*=\",\"%=\",\">>=\",\"<<=\",\">>>=\",\"|=\",\"^=\",\"&=\",\"&&\",\"||\"]),I=W(e(\"  \\n\\r\\t\\f\\v​           \\u2028\\u2029  　\\ufeff\")),P=W(e(\"\\n\\r\\u2028\\u2029\")),U=W(e(\"[{(,;:\")),Tn=W(e(\"[]{}(),;:\")),u={letter:new RegExp(\"[\\\\u0041-\\\\u005A\\\\u0061-\\\\u007A\\\\u00AA\\\\u00B5\\\\u00BA\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\"),digit:new RegExp(\"[\\\\u0030-\\\\u0039\\\\u0660-\\\\u0669\\\\u06F0-\\\\u06F9\\\\u07C0-\\\\u07C9\\\\u0966-\\\\u096F\\\\u09E6-\\\\u09EF\\\\u0A66-\\\\u0A6F\\\\u0AE6-\\\\u0AEF\\\\u0B66-\\\\u0B6F\\\\u0BE6-\\\\u0BEF\\\\u0C66-\\\\u0C6F\\\\u0CE6-\\\\u0CEF\\\\u0D66-\\\\u0D6F\\\\u0DE6-\\\\u0DEF\\\\u0E50-\\\\u0E59\\\\u0ED0-\\\\u0ED9\\\\u0F20-\\\\u0F29\\\\u1040-\\\\u1049\\\\u1090-\\\\u1099\\\\u17E0-\\\\u17E9\\\\u1810-\\\\u1819\\\\u1946-\\\\u194F\\\\u19D0-\\\\u19D9\\\\u1A80-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1B50-\\\\u1B59\\\\u1BB0-\\\\u1BB9\\\\u1C40-\\\\u1C49\\\\u1C50-\\\\u1C59\\\\uA620-\\\\uA629\\\\uA8D0-\\\\uA8D9\\\\uA900-\\\\uA909\\\\uA9D0-\\\\uA9D9\\\\uA9F0-\\\\uA9F9\\\\uAA50-\\\\uAA59\\\\uABF0-\\\\uABF9\\\\uFF10-\\\\uFF19]\"),non_spacing_mark:new RegExp(\"[\\\\u0300-\\\\u036F\\\\u0483-\\\\u0487\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u0610-\\\\u061A\\\\u064B-\\\\u065E\\\\u0670\\\\u06D6-\\\\u06DC\\\\u06DF-\\\\u06E4\\\\u06E7\\\\u06E8\\\\u06EA-\\\\u06ED\\\\u0711\\\\u0730-\\\\u074A\\\\u07A6-\\\\u07B0\\\\u07EB-\\\\u07F3\\\\u0816-\\\\u0819\\\\u081B-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082D\\\\u0900-\\\\u0902\\\\u093C\\\\u0941-\\\\u0948\\\\u094D\\\\u0951-\\\\u0955\\\\u0962\\\\u0963\\\\u0981\\\\u09BC\\\\u09C1-\\\\u09C4\\\\u09CD\\\\u09E2\\\\u09E3\\\\u0A01\\\\u0A02\\\\u0A3C\\\\u0A41\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A70\\\\u0A71\\\\u0A75\\\\u0A81\\\\u0A82\\\\u0ABC\\\\u0AC1-\\\\u0AC5\\\\u0AC7\\\\u0AC8\\\\u0ACD\\\\u0AE2\\\\u0AE3\\\\u0B01\\\\u0B3C\\\\u0B3F\\\\u0B41-\\\\u0B44\\\\u0B4D\\\\u0B56\\\\u0B62\\\\u0B63\\\\u0B82\\\\u0BC0\\\\u0BCD\\\\u0C3E-\\\\u0C40\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C62\\\\u0C63\\\\u0CBC\\\\u0CBF\\\\u0CC6\\\\u0CCC\\\\u0CCD\\\\u0CE2\\\\u0CE3\\\\u0D41-\\\\u0D44\\\\u0D4D\\\\u0D62\\\\u0D63\\\\u0DCA\\\\u0DD2-\\\\u0DD4\\\\u0DD6\\\\u0E31\\\\u0E34-\\\\u0E3A\\\\u0E47-\\\\u0E4E\\\\u0EB1\\\\u0EB4-\\\\u0EB9\\\\u0EBB\\\\u0EBC\\\\u0EC8-\\\\u0ECD\\\\u0F18\\\\u0F19\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F71-\\\\u0F7E\\\\u0F80-\\\\u0F84\\\\u0F86\\\\u0F87\\\\u0F90-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u102D-\\\\u1030\\\\u1032-\\\\u1037\\\\u1039\\\\u103A\\\\u103D\\\\u103E\\\\u1058\\\\u1059\\\\u105E-\\\\u1060\\\\u1071-\\\\u1074\\\\u1082\\\\u1085\\\\u1086\\\\u108D\\\\u109D\\\\u135F\\\\u1712-\\\\u1714\\\\u1732-\\\\u1734\\\\u1752\\\\u1753\\\\u1772\\\\u1773\\\\u17B7-\\\\u17BD\\\\u17C6\\\\u17C9-\\\\u17D3\\\\u17DD\\\\u180B-\\\\u180D\\\\u18A9\\\\u1920-\\\\u1922\\\\u1927\\\\u1928\\\\u1932\\\\u1939-\\\\u193B\\\\u1A17\\\\u1A18\\\\u1A56\\\\u1A58-\\\\u1A5E\\\\u1A60\\\\u1A62\\\\u1A65-\\\\u1A6C\\\\u1A73-\\\\u1A7C\\\\u1A7F\\\\u1B00-\\\\u1B03\\\\u1B34\\\\u1B36-\\\\u1B3A\\\\u1B3C\\\\u1B42\\\\u1B6B-\\\\u1B73\\\\u1B80\\\\u1B81\\\\u1BA2-\\\\u1BA5\\\\u1BA8\\\\u1BA9\\\\u1C2C-\\\\u1C33\\\\u1C36\\\\u1C37\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CE0\\\\u1CE2-\\\\u1CE8\\\\u1CED\\\\u1DC0-\\\\u1DE6\\\\u1DFD-\\\\u1DFF\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2CEF-\\\\u2CF1\\\\u2DE0-\\\\u2DFF\\\\u302A-\\\\u302F\\\\u3099\\\\u309A\\\\uA66F\\\\uA67C\\\\uA67D\\\\uA6F0\\\\uA6F1\\\\uA802\\\\uA806\\\\uA80B\\\\uA825\\\\uA826\\\\uA8C4\\\\uA8E0-\\\\uA8F1\\\\uA926-\\\\uA92D\\\\uA947-\\\\uA951\\\\uA980-\\\\uA982\\\\uA9B3\\\\uA9B6-\\\\uA9B9\\\\uA9BC\\\\uAA29-\\\\uAA2E\\\\uAA31\\\\uAA32\\\\uAA35\\\\uAA36\\\\uAA43\\\\uAA4C\\\\uAAB0\\\\uAAB2-\\\\uAAB4\\\\uAAB7\\\\uAAB8\\\\uAABE\\\\uAABF\\\\uAAC1\\\\uABE5\\\\uABE8\\\\uABED\\\\uFB1E\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE26]\"),space_combining_mark:new RegExp(\"[\\\\u0903\\\\u093E-\\\\u0940\\\\u0949-\\\\u094C\\\\u094E\\\\u0982\\\\u0983\\\\u09BE-\\\\u09C0\\\\u09C7\\\\u09C8\\\\u09CB\\\\u09CC\\\\u09D7\\\\u0A03\\\\u0A3E-\\\\u0A40\\\\u0A83\\\\u0ABE-\\\\u0AC0\\\\u0AC9\\\\u0ACB\\\\u0ACC\\\\u0B02\\\\u0B03\\\\u0B3E\\\\u0B40\\\\u0B47\\\\u0B48\\\\u0B4B\\\\u0B4C\\\\u0B57\\\\u0BBE\\\\u0BBF\\\\u0BC1\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCC\\\\u0BD7\\\\u0C01-\\\\u0C03\\\\u0C41-\\\\u0C44\\\\u0C82\\\\u0C83\\\\u0CBE\\\\u0CC0-\\\\u0CC4\\\\u0CC7\\\\u0CC8\\\\u0CCA\\\\u0CCB\\\\u0CD5\\\\u0CD6\\\\u0D02\\\\u0D03\\\\u0D3E-\\\\u0D40\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4C\\\\u0D57\\\\u0D82\\\\u0D83\\\\u0DCF-\\\\u0DD1\\\\u0DD8-\\\\u0DDF\\\\u0DF2\\\\u0DF3\\\\u0F3E\\\\u0F3F\\\\u0F7F\\\\u102B\\\\u102C\\\\u1031\\\\u1038\\\\u103B\\\\u103C\\\\u1056\\\\u1057\\\\u1062-\\\\u1064\\\\u1067-\\\\u106D\\\\u1083\\\\u1084\\\\u1087-\\\\u108C\\\\u108F\\\\u109A-\\\\u109C\\\\u17B6\\\\u17BE-\\\\u17C5\\\\u17C7\\\\u17C8\\\\u1923-\\\\u1926\\\\u1929-\\\\u192B\\\\u1930\\\\u1931\\\\u1933-\\\\u1938\\\\u19B0-\\\\u19C0\\\\u19C8\\\\u19C9\\\\u1A19-\\\\u1A1B\\\\u1A55\\\\u1A57\\\\u1A61\\\\u1A63\\\\u1A64\\\\u1A6D-\\\\u1A72\\\\u1B04\\\\u1B35\\\\u1B3B\\\\u1B3D-\\\\u1B41\\\\u1B43\\\\u1B44\\\\u1B82\\\\u1BA1\\\\u1BA6\\\\u1BA7\\\\u1BAA\\\\u1C24-\\\\u1C2B\\\\u1C34\\\\u1C35\\\\u1CE1\\\\u1CF2\\\\uA823\\\\uA824\\\\uA827\\\\uA880\\\\uA881\\\\uA8B4-\\\\uA8C3\\\\uA952\\\\uA953\\\\uA983\\\\uA9B4\\\\uA9B5\\\\uA9BA\\\\uA9BB\\\\uA9BD-\\\\uA9C0\\\\uAA2F\\\\uAA30\\\\uAA33\\\\uAA34\\\\uAA4D\\\\uAA7B\\\\uABE3\\\\uABE4\\\\uABE6\\\\uABE7\\\\uABE9\\\\uABEA\\\\uABEC]\"),connector_punctuation:new RegExp(\"[\\\\u005F\\\\u203F\\\\u2040\\\\u2054\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFF3F]\")};function On(e){return 97<=e&&e<=122||65<=e&&e<=90||170<=e&&u.letter.test(String.fromCharCode(e))}function $n(e){return\"string\"==typeof e&&(e=e.charCodeAt(0)),55296<=e&&e<=56319}function zn(e){return\"string\"==typeof e&&(e=e.charCodeAt(0)),56320<=e&&e<=57343}function Mn(e){return 48<=e&&e<=57}function l(e){return!m(e)&&/^[a-z_$][a-z0-9_$]*$/i.test(e)}function qn(e){return 36==e||95==e||On(e)}function jn(e){var n,t,i,r=e.charCodeAt(0);return qn(r)||Mn(r)||8204==r||8205==r||(i=e,u.non_spacing_mark.test(i)||u.space_combining_mark.test(i))||(t=e,u.connector_punctuation.test(t))||(n=r,u.digit.test(String.fromCharCode(n)))}function Nn(e){return/^[a-z_$][a-z0-9_$]*$/i.test(e)}function Hn(e,n,t,i,r){this.message=e,this.filename=n,this.line=t,this.col=i,this.pos=r}function Rn(e,n,t,i,r){throw new Hn(e,n,t,i,r)}function In(e,n,t){return e.type==n&&(null==t||e.value==t)}((Hn.prototype=Object.create(Error.prototype)).constructor=Hn).prototype.name=\"SyntaxError\",n(Hn);var Pn={};function Un(r,o,a,s){var u={text:r,filename:o,pos:0,tokpos:0,line:1,tokline:0,col:0,tokcol:0,newline_before:!1,regex_allowed:!1,comments_before:[],directives:{},directive_stack:[]};function c(){return u.text.charAt(u.pos)}function f(e,n){var t=u.text.charAt(u.pos++);if(e&&!t)throw Pn;return P(t)?(u.newline_before=u.newline_before||!n,++u.line,u.col=0,n||\"\\r\"!=t||\"\\n\"!=c()||(++u.pos,t=\"\\n\")):++u.col,t}function l(e){for(;0<e--;)f()}function p(e){return u.text.substr(u.pos,e.length)==e}function d(){u.tokline=u.line,u.tokcol=u.col,u.tokpos=u.pos}var h=!1;function v(e,n,t){u.regex_allowed=\"operator\"==e&&!Vn(n)||\"keyword\"==e&&q(n)||\"punc\"==e&&U(n),\"punc\"==e&&\".\"==n?h=!0:t||(h=!1);var i={type:e,value:n,line:u.tokline,col:u.tokcol,pos:u.tokpos,endline:u.line,endcol:u.col,endpos:u.pos,nlb:u.newline_before,file:o};return/^(?:num|string|regexp)$/i.test(e)&&(i.raw=r.substring(i.pos,i.endpos)),t||(i.comments_before=u.comments_before,i.comments_after=u.comments_before=[]),u.newline_before=!1,new F(i)}function _(){for(;I(c());)f()}function m(e){Rn(e,o,u.tokline,u.tokcol,u.tokpos)}function g(r){var o=!1,a=!1,s=!1,u=\".\"==r,e=function(e){for(var n,t=\"\",i=0;(n=c())&&e(n,i++);)t+=f();return t}(function(e,n){var t,i=e.charCodeAt(0);switch(i){case 120:case 88:return!s&&(s=!0);case 101:case 69:return!!s||!o&&(o=a=!0);case 45:return a||0==n&&!r;case 43:return a;case a=!1,46:return!(u||s||o)&&(u=!0)}return Mn(t=i)||On(t)});r&&(e=r+e),H.test(e)&&D.has_directive(\"use strict\")&&m(\"Legacy octal literals are not allowed in strict mode\");var n=function(e){if(N.test(e))return parseInt(e.substr(2),16);if(H.test(e))return parseInt(e.substr(1),8);var n=parseFloat(e);return n==e?n:void 0}(e);if(!isNaN(n))return v(\"num\",n);m(\"Invalid syntax: \"+e)}function b(e){var n=f(!0,e);switch(n.charCodeAt(0)){case 110:return\"\\n\";case 114:return\"\\r\";case 116:return\"\\t\";case 98:return\"\\b\";case 118:return\"\\v\";case 102:return\"\\f\";case 120:return String.fromCharCode(t(2));case 117:return String.fromCharCode(t(4));case 10:return\"\";case 13:if(\"\\n\"==c())return f(!0,e),\"\"}return\"0\"<=n&&n<=\"7\"?function(e){var n=c();\"0\"<=n&&n<=\"7\"&&(e+=f(!0))[0]<=\"3\"&&\"0\"<=(n=c())&&n<=\"7\"&&(e+=f(!0));if(\"0\"===e)return\"\\0\";0<e.length&&D.has_directive(\"use strict\")&&m(\"Legacy octal escape sequences are not allowed in strict mode\");return String.fromCharCode(parseInt(e,8))}(n):n}function t(e){for(var n=0;0<e;--e){var t=parseInt(f(!0),16);isNaN(t)&&m(\"Invalid hex-character pattern in string\"),n=n<<4|t}return n}var y=n(\"Unterminated string constant\",function(e){for(var n=f(),t=\"\";;){var i=f(!0,!0);if(\"\\\\\"==i)i=b(!0);else if(P(i))m(\"Unterminated string constant\");else if(i==n)break;t+=i}var r=v(\"string\",t);return r.quote=e,r});function w(e){var n,t=u.regex_allowed,i=function(){for(var e=u.text,n=u.pos,t=u.text.length;n<t;++n){var i=e[n];if(P(i))return n}return-1}();return-1==i?(n=u.text.substr(u.pos),u.pos=u.text.length):(n=u.text.substring(u.pos,i),u.pos=i),u.col=u.tokcol+(u.pos-u.tokpos),u.comments_before.push(v(e,n,!0)),u.regex_allowed=t,D}var e=n(\"Unterminated multiline comment\",function(){var e=u.regex_allowed,n=function(e,n){var t=u.text.indexOf(e,u.pos);if(n&&-1==t)throw Pn;return t}(\"*/\",!0),t=u.text.substring(u.pos,n).replace(/\\r\\n|\\r|\\u2028|\\u2029/g,\"\\n\");return l(t.length+2),u.comments_before.push(v(\"comment2\",t,!0)),u.regex_allowed=e,D});function x(){for(var e,n,t=!1,i=\"\",r=!1;null!=(e=c());)if(t)\"u\"!=e&&m(\"Expecting UnicodeEscapeSequence -- uXXXX\"),jn(e=b())||m(\"Unicode char: \"+e.charCodeAt(0)+\" is not valid in identifier\"),i+=e,t=!1;else if(\"\\\\\"==e)r=t=!0,f();else{if(!jn(e))break;i+=f()}return ne(i)&&r&&(n=i.charCodeAt(0).toString(16).toUpperCase(),i=\"\\\\u\"+\"0000\".substr(n.length)+n+i.slice(1)),i}var A=n(\"Unterminated regular expression\",function(e){for(var n,t=!1,i=!1;n=f(!0);)if(P(n))m(\"Unexpected line terminator\");else if(t)e+=\"\\\\\"+n,t=!1;else if(\"[\"==n)i=!0,e+=n;else if(\"]\"==n&&i)i=!1,e+=n;else{if(\"/\"==n&&!i)break;\"\\\\\"==n?t=!0:e+=n}var r=x();try{var o=new RegExp(e,r);return o.raw_source=e,v(\"regexp\",o)}catch(e){m(e.message)}});function E(e){return v(\"operator\",function e(n){if(!c())return n;var t=n+c();return R(t)?(f(),e(t)):n}(e||f()))}function k(){switch(f(),c()){case\"/\":return f(),w(\"comment1\");case\"*\":return f(),e()}return u.regex_allowed?A(\"\"):E(\"/\")}function n(n,t){return function(e){try{return t(e)}catch(e){if(e!==Pn)throw e;m(n)}}}function D(e){if(null!=e)return A(e);for(s&&0==u.pos&&p(\"#!\")&&(d(),l(2),w(\"comment5\"));;){if(_(),d(),a){if(p(\"\\x3c!--\")){l(4),w(\"comment3\");continue}if(p(\"--\\x3e\")&&u.newline_before){l(3),w(\"comment4\");continue}}var n=c();if(!n)return v(\"eof\");var t=n.charCodeAt(0);switch(t){case 34:case 39:return y(n);case 46:return f(),Mn(c().charCodeAt(0))?g(\".\"):v(\"punc\",\".\");case 47:var i=k();if(i===D)continue;return i}if(Mn(t))return g();if(Tn(n))return v(\"punc\",f());if(j(n))return E();if(92==t||qn(t))return void 0,r=x(),h?v(\"name\",r):M(r)?v(\"atom\",r):ne(r)?R(r)?v(\"operator\",r):v(\"keyword\",r):v(\"name\",r);break}var r;m(\"Unexpected character '\"+n+\"'\")}return D.context=function(e){return e&&(u=e),u},D.add_directive=function(e){u.directive_stack[u.directive_stack.length-1].push(e),void 0===u.directives[e]?u.directives[e]=1:u.directives[e]++},D.push_directives_stack=function(){u.directive_stack.push([])},D.pop_directives_stack=function(){for(var e=u.directive_stack[u.directive_stack.length-1],n=0;n<e.length;n++)u.directives[e[n]]--;u.directive_stack.pop()},D.has_directive=function(e){return 0<u.directives[e]},D}var Ln=W([\"typeof\",\"void\",\"delete\",\"--\",\"++\",\"!\",\"~\",\"-\",\"+\"]),Vn=W([\"--\",\"++\"]),Yn=W([\"=\",\"+=\",\"-=\",\"/=\",\"*=\",\"%=\",\">>=\",\"<<=\",\">>>=\",\"|=\",\"^=\",\"&=\"]),Jn=function(e,n){for(var t=0;t<e.length;++t)for(var i=e[t],r=0;r<i.length;++r)n[i[r]]=t+1;return n}([[\"||\"],[\"&&\"],[\"|\"],[\"^\"],[\"&\"],[\"==\",\"===\",\"!=\",\"!==\"],[\"<\",\">\",\"<=\",\">=\",\"in\",\"instanceof\"],[\">>\",\"<<\",\">>>\"],[\"+\",\"-\"],[\"*\",\"/\",\"%\"]],{}),Wn=W([\"atom\",\"num\",\"string\",\"regexp\",\"name\"]);function Gn(e,u){u=Y(u,{bare_returns:!1,expression:!1,filename:null,html5_comments:!0,shebang:!0,strict:!1,toplevel:null},!0);var c={input:\"string\"==typeof e?Un(e,u.filename,u.html5_comments,u.shebang):e,token:null,prev:null,peeked:null,in_function:0,in_directives:!0,in_loop:0,labels:[]};function f(e,n){return In(c.token,e,n)}function l(){return c.peeked||(c.peeked=c.input())}function p(){return c.prev=c.token,c.peeked?(c.token=c.peeked,c.peeked=null):c.token=c.input(),c.in_directives=c.in_directives&&(\"string\"==c.token.type||f(\"punc\",\";\")),c.token}function d(){return c.prev}function h(e,n,t,i){var r=c.input.context();Rn(e,r.filename,null!=n?n:r.tokline,null!=t?t:r.tokcol,null!=i?i:r.tokpos)}function t(e,n){h(n,e.line,e.col)}function v(e){null==e&&(e=c.token),t(e,\"Unexpected token: \"+e.type+\" (\"+e.value+\")\")}function _(e,n){if(f(e,n))return p();t(c.token,\"Unexpected token \"+c.token.type+\" «\"+c.token.value+\"», expected \"+e+\" «\"+n+\"»\")}function m(e){return _(\"punc\",e)}function g(e){return e.nlb||!oe(e.comments_before,function(e){return!e.nlb})}function b(){return!u.strict&&(f(\"eof\")||f(\"punc\",\"}\")||g(c.token))}function y(e){f(\"punc\",\";\")?p():e||b()||v()}function w(){m(\"(\");var e=U(!0);return m(\")\"),e}function n(i){return function(){var e=c.token,n=i.apply(null,arguments),t=d();return n.start=e,n.end=t,n}}function x(){(f(\"operator\",\"/\")||f(\"operator\",\"/=\"))&&(c.peeked=null,c.token=c.input(c.token.value.substr(1)))}c.token=p();var A=n(function(e){switch(x(),c.token.type){case\"string\":if(c.in_directives){var n=l();-1==c.token.raw.indexOf(\"\\\\\")&&(In(n,\"punc\",\";\")||In(n,\"punc\",\"}\")||g(n)||In(n,\"eof\"))?c.input.add_directive(c.token.value):c.in_directives=!1}var t=c.in_directives,i=E();return t?new fe(i.body):i;case\"num\":case\"regexp\":case\"operator\":case\"atom\":return E();case\"name\":return In(l(),\"punc\",\":\")?function(){var n=q(Q);V(function(e){return e.name==n.name},c.labels)&&h(\"Label \"+n.name+\" defined twice\");m(\":\"),c.labels.push(n);var e=A();c.labels.pop(),e instanceof _e||n.references.forEach(function(e){e instanceof ze&&(e=e.label.start,h(\"Continue label `\"+n.name+\"` refers to non-IterationStatement.\",e.line,e.col,e.pos))});return new ve({body:e,label:n})}():E();case\"punc\":switch(c.token.value){case\"{\":return new de({start:c.token,body:F(),end:d()});case\"[\":case\"(\":return E();case\";\":return c.in_directives=!1,p(),new he;default:v()}case\"keyword\":switch(c.token.value){case\"break\":return p(),k($e);case\"continue\":return p(),k(ze);case\"debugger\":return p(),y(),new ce;case\"do\":p();var r=L(A);_(\"keyword\",\"while\");var o=w();return y(!0),new ge({body:r,condition:o});case\"while\":return p(),new be({condition:w(),body:L(A)});case\"for\":return p(),function(){m(\"(\");var e=null;if(!f(\"punc\",\";\")&&(e=f(\"keyword\",\"var\")?(p(),B(!0)):U(!0,!0),f(\"operator\",\"in\")))return e instanceof Le?1<e.definitions.length&&h(\"Only one variable declaration allowed in for..in loop\",e.start.line,e.start.col,e.start.pos):I(e)||h(\"Invalid left-hand side in for..in loop\",e.start.line,e.start.col,e.start.pos),p(),n=e,t=U(!0),m(\")\"),new we({init:n,object:t,body:L(A)});var n,t;return function(e){m(\";\");var n=f(\"punc\",\";\")?null:U(!0);m(\";\");var t=f(\"punc\",\")\")?null:U(!0);return m(\")\"),new ye({init:e,condition:n,step:t,body:L(A)})}(e)}();case\"function\":return!e&&c.input.has_directive(\"use strict\")&&h(\"In strict mode code, functions can only be declared at top level or immediately within another function.\"),p(),D(Ce);case\"if\":return p(),function(){var e=w(),n=A(),t=null;f(\"keyword\",\"else\")&&(p(),t=A());return new Me({condition:e,body:n,alternative:t})}();case\"return\":0!=c.in_function||u.bare_returns||h(\"'return' outside of function\"),p();var a=null;return f(\"punc\",\";\")?p():b()||(a=U(!0),y()),new Te({value:a});case\"switch\":return p(),new qe({expression:w(),body:L(C)});case\"throw\":p(),g(c.token)&&h(\"Illegal newline after 'throw'\");a=U(!0);return y(),new G({value:a});case\"try\":return p(),function(){var e=F(),n=null,t=null;if(f(\"keyword\",\"catch\")){var i=c.token;p(),m(\"(\");var r=q(vn);m(\")\"),n=new Ie({start:i,argname:r,body:F(),end:d()})}if(f(\"keyword\",\"finally\")){var i=c.token;p(),t=new Pe({start:i,body:F(),end:d()})}n||t||h(\"Missing catch/finally blocks\");return new Re({body:e,bcatch:n,bfinally:t})}();case\"var\":p();var s=B();return y(),s;case\"with\":return c.input.has_directive(\"use strict\")&&h(\"Strict mode may not include a with statement\"),p(),new xe({expression:w(),body:A()})}}v()});function E(e){return new le({body:(e=U(!0),y(),e)})}function k(e){var n,t=null;b()||(t=q(ee,!0)),null!=t?((n=V(function(e){return e.name==t.name},c.labels))||h(\"Undefined label \"+t.name),t.thedef=n):0==c.in_loop&&h(e.TYPE+\" not inside a loop or switch\"),y();var i=new e({label:t});return n&&n.references.push(i),i}var D=function(e){var n=e===Ce,t=f(\"name\")?q(n?dn:hn):null;n&&!t&&v(),!t||e===De||t instanceof fn||v(d()),m(\"(\");for(var i=[],r=!0;!f(\"punc\",\")\");)r?r=!1:m(\",\"),i.push(q(pn));p();var o=c.in_loop,a=c.labels;++c.in_function,c.in_directives=!0,c.input.push_directives_stack(),c.in_loop=0,c.labels=[];var s=F(!0);return c.input.has_directive(\"use strict\")&&(t&&M(t),i.forEach(M)),c.input.pop_directives_stack(),--c.in_function,c.in_loop=o,c.labels=a,new e({name:t,argnames:i,body:s})};function F(e){m(\"{\");for(var n=[];!f(\"punc\",\"}\");)f(\"eof\")&&v(),n.push(A(e));return p(),n}function C(){m(\"{\");for(var e,n=[],t=null,i=null;!f(\"punc\",\"}\");)f(\"eof\")&&v(),f(\"keyword\",\"case\")?(i&&(i.end=d()),t=[],i=new He({start:(e=c.token,p(),e),expression:U(!0),body:t}),n.push(i),m(\":\")):f(\"keyword\",\"default\")?(i&&(i.end=d()),t=[],i=new Ne({start:(e=c.token,p(),m(\":\"),e),body:t}),n.push(i)):(t||v(),t.push(A()));return i&&(i.end=d()),p(),n}var B=function(e){return new Le({start:d(),definitions:function(e){for(var n=[];n.push(new Ve({start:c.token,name:q(ln),value:f(\"operator\",\"=\")?(p(),U(!1,e)):null,end:d()})),f(\"punc\",\",\");)p();return n}(e),end:d()})};var s=function(e){if(f(\"operator\",\"new\"))return function(e){var n=c.token;_(\"operator\",\"new\");var t,i=s(!1);f(\"punc\",\"(\")?(p(),t=S(\")\")):t=[];var r=new Je({start:n,expression:i,args:t,end:d()});return j(r),N(r,e)}(e);var n=c.token;if(f(\"punc\")){switch(n.value){case\"(\":p();var t=U(!0),i=n.comments_before.length;if([].unshift.apply(t.start.comments_before,n.comments_before),n.comments_before=t.start.comments_before,0==(n.comments_before_length=i)&&0<n.comments_before.length){var r=n.comments_before[0];r.nlb||(r.nlb=n.nlb,n.nlb=!1)}n.comments_after=t.start.comments_after,t.start=n,m(\")\");var o=d();return o.comments_before=t.end.comments_before,[].push.apply(t.end.comments_after,o.comments_after),o.comments_after=t.end.comments_after,t.end=o,t instanceof Ye&&j(t),N(t,e);case\"[\":return N(T(),e);case\"{\":return N(O(),e)}v()}if(f(\"keyword\",\"function\")){p();var a=D(Fe);return a.start=n,a.end=d(),N(a,e)}if(Wn(c.token.type))return N(function(){var e,n=c.token;switch(n.type){case\"name\":e=z(_n);break;case\"num\":e=new yn({start:n,end:n,value:n.value});break;case\"string\":e=new bn({start:n,end:n,value:n.value,quote:n.quote});break;case\"regexp\":e=new wn({start:n,end:n,value:n.value});break;case\"atom\":switch(n.value){case\"false\":e=new Cn({start:n,end:n});break;case\"true\":e=new Bn({start:n,end:n});break;case\"null\":e=new xn({start:n,end:n})}}return p(),e}(),e);v()};function S(e,n,t){for(var i=!0,r=[];!f(\"punc\",e)&&(i?i=!1:m(\",\"),!n||!f(\"punc\",e));)f(\"punc\",\",\")&&t?r.push(new kn({start:c.token,end:c.token})):r.push(U(!1));return p(),r}var T=n(function(){return m(\"[\"),new on({elements:S(\"]\",!u.strict,!0)})}),a=n(function(){return D(De)}),O=n(function(){m(\"{\");for(var e=!0,n=[];!f(\"punc\",\"}\")&&(e?e=!1:m(\",\"),u.strict||!f(\"punc\",\"}\"));){var t=c.token,i=t.type,r=$();if(\"name\"==i&&!f(\"punc\",\":\")){var o=new K({start:c.token,name:\"\"+$(),end:d()});if(\"get\"==r){n.push(new Z({start:t,key:o,value:a(),end:d()}));continue}if(\"set\"==r){n.push(new X({start:t,key:o,value:a(),end:d()}));continue}}m(\":\"),n.push(new un({start:t,quote:t.quote,key:\"\"+r,value:U(!1),end:d()}))}return p(),new an({properties:n})});function $(){var e=c.token;switch(e.type){case\"operator\":ne(e.value)||v();case\"num\":case\"string\":case\"name\":case\"keyword\":case\"atom\":return p(),e.value;default:v()}}function z(e){var n=c.token.value;return new(\"this\"==n?mn:e)({name:String(n),start:c.token,end:c.token})}function M(e){\"arguments\"!=e.name&&\"eval\"!=e.name||h(\"Unexpected \"+e.name+\" in strict mode\",e.start.line,e.start.col,e.start.pos)}function q(e,n){if(!f(\"name\"))return n||h(\"Name expected\"),null;var t=z(e);return c.input.has_directive(\"use strict\")&&t instanceof fn&&M(t),p(),t}function j(e){for(var n=e.start,t=n.comments_before,i=ae(n,\"comments_before_length\")?n.comments_before_length:t.length;0<=--i;){var r=t[i];if(/[@#]__PURE__/.test(r.value)){e.pure=r;break}}}var N=function(e,n){var t,i=e.start;if(f(\"punc\",\".\"))return p(),N(new Xe({start:i,expression:e,property:(t=c.token,\"name\"!=t.type&&v(),p(),t.value),end:d()}),n);if(f(\"punc\",\"[\")){p();var r=U(!0);return m(\"]\"),N(new Ze({start:i,expression:e,property:r,end:d()}),n)}if(n&&f(\"punc\",\"(\")){p();var o=new Ye({start:i,expression:e,args:S(\")\"),end:d()});return j(o),N(o,!0)}return e},H=function(e){var n=c.token;if(f(\"operator\")&&Ln(n.value)){p(),x();var t=r(Qe,n,H(e));return t.start=n,t.end=d(),t}for(var i=s(e);f(\"operator\")&&Vn(c.token.value)&&!g(c.token);)(i=r(en,c.token,i)).start=n,i.end=c.token,p();return i};function r(e,n,t){var i=n.value;switch(i){case\"++\":case\"--\":I(t)||h(\"Invalid use of \"+i+\" operator\",n.line,n.col,n.pos);break;case\"delete\":t instanceof _n&&c.input.has_directive(\"use strict\")&&h(\"Calling delete on expression not allowed in strict mode\",t.start.line,t.start.col,t.start.pos)}return new e({operator:i,expression:t})}var R=function(e,n,t){var i=f(\"operator\")?c.token.value:null;\"in\"==i&&t&&(i=null);var r=null!=i?Jn[i]:null;if(null!=r&&n<r){p();var o=R(H(!0),r,t);return R(new nn({start:e.start,left:e,operator:i,right:o,end:o.end}),n,t)}return e};var o=function(e){var n,t=c.token,i=(n=e,R(H(!0),0,n));if(f(\"operator\",\"?\")){p();var r=U(!1);return m(\":\"),new tn({start:t,condition:i,consequent:r,alternative:U(!1,e),end:d()})}return i};function I(e){return e instanceof Ge||e instanceof _n}var P=function(e){var n=c.token,t=o(e),i=c.token.value;if(f(\"operator\")&&Yn(i)){if(I(t))return p(),new rn({start:n,left:t,operator:i,right:P(e),end:d()});h(\"Invalid assignment\")}return t},U=function(e,n){for(var t=c.token,i=[];i.push(P(n)),e&&f(\"punc\",\",\");)p(),e=!0;return 1==i.length?i[0]:new We({start:t,expressions:i,end:l()})};function L(e){++c.in_loop;var n=e();return--c.in_loop,n}return u.expression?U(!0):function(){var e=c.token,n=[];for(c.input.push_directives_stack();!f(\"eof\");)n.push(A(!0));c.input.pop_directives_stack();var t=d(),i=u.toplevel;return i?(i.body=i.body.concat(n),i.end=t):i=new Ee({start:e,body:n,end:t}),i}()}function Xn(e,n){Sn.call(this),this.before=e,this.after=n}function r(e,n,t){this.name=n.name,this.orig=[n],this.init=t,this.eliminated=0,this.scope=e,this.references=[],this.replaced=0,this.global=!1,this.mangled_name=null,this.undeclared=!1,this.id=r.next_id++}function p(e,n){var t=e.names_in_use;return t||(e.names_in_use=t=Object.create(e.mangled_names||null),e.cname_holes=[],e.enclosed.forEach(function(e){e.unmangleable(n)&&(t[e.name]=!0)})),t}function f(e){return e=Y(e,{eval:!1,ie8:!1,keep_fnames:!1,reserved:[],toplevel:!1}),Array.isArray(e.reserved)||(e.reserved=[]),v(e.reserved,\"arguments\"),e}Xn.prototype=new Sn,function(o){function e(e,r){e.DEFMETHOD(\"transform\",function(e,n){var t,i;return e.push(this),e.before&&(t=e.before(this,r,n)),t===o&&(r(t=this,e),e.after&&(i=e.after(t,n))!==o&&(t=i)),e.pop(),t})}function t(e,n){return re(e,function(e){return e.transform(n,!0)})}e(se,L),e(ve,function(e,n){e.label=e.label.transform(n),e.body=e.body.transform(n)}),e(le,function(e,n){e.body=e.body.transform(n)}),e(pe,function(e,n){e.body=t(e.body,n)}),e(me,function(e,n){e.condition=e.condition.transform(n),e.body=e.body.transform(n)}),e(ye,function(e,n){e.init&&(e.init=e.init.transform(n)),e.condition&&(e.condition=e.condition.transform(n)),e.step&&(e.step=e.step.transform(n)),e.body=e.body.transform(n)}),e(we,function(e,n){e.init=e.init.transform(n),e.object=e.object.transform(n),e.body=e.body.transform(n)}),e(xe,function(e,n){e.expression=e.expression.transform(n),e.body=e.body.transform(n)}),e(Se,function(e,n){e.value&&(e.value=e.value.transform(n))}),e(Oe,function(e,n){e.label&&(e.label=e.label.transform(n))}),e(Me,function(e,n){e.condition=e.condition.transform(n),e.body=e.body.transform(n),e.alternative&&(e.alternative=e.alternative.transform(n))}),e(qe,function(e,n){e.expression=e.expression.transform(n),e.body=t(e.body,n)}),e(He,function(e,n){e.expression=e.expression.transform(n),e.body=t(e.body,n)}),e(Re,function(e,n){e.body=t(e.body,n),e.bcatch&&(e.bcatch=e.bcatch.transform(n)),e.bfinally&&(e.bfinally=e.bfinally.transform(n))}),e(Ie,function(e,n){e.argname=e.argname.transform(n),e.body=t(e.body,n)}),e(Ue,function(e,n){e.definitions=t(e.definitions,n)}),e(Ve,function(e,n){e.name=e.name.transform(n),e.value&&(e.value=e.value.transform(n))}),e(ke,function(e,n){e.name&&(e.name=e.name.transform(n)),e.argnames=t(e.argnames,n),e.body=t(e.body,n)}),e(Ye,function(e,n){e.expression=e.expression.transform(n),e.args=t(e.args,n)}),e(We,function(e,n){e.expressions=t(e.expressions,n)}),e(Xe,function(e,n){e.expression=e.expression.transform(n)}),e(Ze,function(e,n){e.expression=e.expression.transform(n),e.property=e.property.transform(n)}),e(Ke,function(e,n){e.expression=e.expression.transform(n)}),e(nn,function(e,n){e.left=e.left.transform(n),e.right=e.right.transform(n)}),e(tn,function(e,n){e.condition=e.condition.transform(n),e.consequent=e.consequent.transform(n),e.alternative=e.alternative.transform(n)}),e(on,function(e,n){e.elements=t(e.elements,n)}),e(an,function(e,n){e.properties=t(e.properties,n)}),e(sn,function(e,n){e.value=e.value.transform(n)})}(),r.next_id=1,r.prototype={unmangleable:function(e){return e||(e={}),this.global&&!e.toplevel||this.undeclared||!e.eval&&(this.scope.uses_eval||this.scope.uses_with)||e.keep_fnames&&(this.orig[0]instanceof hn||this.orig[0]instanceof dn)},mangle:function(e){var n=e.cache&&e.cache.props;if(this.global&&n&&n.has(this.name))this.mangled_name=n.get(this.name);else if(!this.mangled_name&&!this.unmangleable(e)){var t;(t=this.redefined())?this.mangled_name=t.mangled_name||t.name:this.mangled_name=function(e,i,n){var t=p(e,i),r=e.cname_holes,o=Object.create(null);if(e instanceof Fe&&e.name&&n.orig[0]instanceof pn){var a=e.name.definition();o[a.mangled_name||a.name]=!0}var s,u=[e];n.references.forEach(function(e){var n=e.scope;do{if(!(u.indexOf(n)<0))break;for(var t in p(n,i))o[t]=!0;u.push(n)}while(n=n.parent_scope)});for(var c=0,f=r.length;c<f;c++)if(s=g(r[c]),!o[s])return r.splice(c,1),e.names_in_use[s]=!0,s;for(;;)if(s=g(++e.cname),!t[s]&&l(s)&&!te(s,i.reserved)){if(!o[s])break;r.push(e.cname)}e.names_in_use[s]=!0,i.ie8&&n.orig[0]instanceof hn&&(p(e.parent_scope,i)[s]=!0);return s}(this.scope,e,this),this.global&&n&&n.set(this.name,this.mangled_name)}},redefined:function(){return this.defun&&this.defun.variables.get(this.name)}},Ee.DEFMETHOD(\"figure_out_scope\",function(c){c=Y(c,{cache:null,ie8:!1});var a=this,f=a.parent_scope=null,l=new O,p=null,s=new Sn(function(e,n){if(e instanceof Ie){var t=f;return(f=new Ae(e)).init_scope_vars(t),n(),f=t,!0}if(e instanceof Ae){e.init_scope_vars(f);t=f;var i=p,r=l;return p=f=e,l=new O,n(),f=t,p=i,l=r,!0}if(e instanceof ve){var o=e.label;if(l.has(o.name))throw new Error(S(\"Label {name} defined twice\",o));return l.set(o.name,o),n(),l.del(o.name),!0}if(e instanceof xe)for(var a=f;a;a=a.parent_scope)a.uses_with=!0;else if(e instanceof cn&&(e.scope=f),e instanceof Q&&((e.thedef=e).references=[]),e instanceof hn)p.def_function(e,\"arguments\"==e.name?void 0:p);else if(e instanceof dn)(e.scope=p.parent_scope).def_function(e,p);else if(e instanceof ln){if(p.def_variable(e,\"SymbolVar\"==e.TYPE?null:void 0),p!==f){e.mark_enclosed(c);var s=f.find_variable(e);e.thedef!==s&&(e.thedef=s),e.reference(c)}}else if(e instanceof vn)f.def_variable(e).defun=p;else if(e instanceof ee){var u=l.get(e.name);if(!u)throw new Error(S(\"Undefined label {name} [{line},{col}]\",{name:e.name,line:e.start.line,col:e.start.col}));e.thedef=u}});a.walk(s),a.globals=new O;s=new Sn(function(e,n){if(e instanceof Oe&&e.label)return e.label.thedef.references.push(e),!0;if(e instanceof _n){var t=e.name;if(\"eval\"==t&&s.parent()instanceof Ye)for(var i=e.scope;i&&!i.uses_eval;i=i.parent_scope)i.uses_eval=!0;var r=e.scope.find_variable(t);return r?r.scope instanceof ke&&\"arguments\"==t&&(r.scope.uses_arguments=!0):r=a.def_global(e),e.thedef=r,e.reference(c),!0}var o;if(e instanceof vn&&(o=e.definition().redefined()))for(i=e.scope;i&&(v(i.enclosed,o),i!==o.scope);)i=i.parent_scope});a.walk(s),c.ie8&&a.walk(new Sn(function(e,n){if(e instanceof vn){var t=e.name,i=e.thedef.references,r=e.thedef.defun,o=r.find_variable(t)||a.globals.get(t)||r.def_variable(e);return i.forEach(function(e){e.thedef=o,e.reference(c)}),e.thedef=o,e.reference(c),!0}}))}),Ee.DEFMETHOD(\"def_global\",function(e){var n=this.globals,t=e.name;if(n.has(t))return n.get(t);var i=new r(this,e);return i.undeclared=!0,i.global=!0,n.set(t,i),i}),Ae.DEFMETHOD(\"init_scope_vars\",function(e){this.variables=new O,this.functions=new O,this.uses_with=!1,this.uses_eval=!1,this.parent_scope=e,this.enclosed=[],this.cname=-1}),ke.DEFMETHOD(\"init_scope_vars\",function(){Ae.prototype.init_scope_vars.apply(this,arguments),this.uses_arguments=!1,this.def_variable(new pn({name:\"arguments\",start:this.start,end:this.end}))}),cn.DEFMETHOD(\"mark_enclosed\",function(e){for(var n=this.definition(),t=this.scope;t&&(v(t.enclosed,n),e.keep_fnames&&t.functions.each(function(e){v(n.scope.enclosed,e)}),t!==n.scope);)t=t.parent_scope}),cn.DEFMETHOD(\"reference\",function(e){this.definition().references.push(this),this.mark_enclosed(e)}),Ae.DEFMETHOD(\"find_variable\",function(e){return e instanceof cn&&(e=e.name),this.variables.get(e)||this.parent_scope&&this.parent_scope.find_variable(e)}),Ae.DEFMETHOD(\"def_function\",function(e,n){var t=this.def_variable(e,n);return(!t.init||t.init instanceof Ce)&&(t.init=n),this.functions.set(e.name,t),t}),Ae.DEFMETHOD(\"def_variable\",function(e,n){var t=this.variables.get(e.name);return t?(t.orig.push(e),t.init&&(t.scope!==e.scope||t.init instanceof Fe)&&(t.init=n)):(t=new r(this,e,n),this.variables.set(e.name,t),t.global=!this.parent_scope),e.thedef=t}),cn.DEFMETHOD(\"unmangleable\",function(e){var n=this.definition();return!n||n.unmangleable(e)}),Q.DEFMETHOD(\"unmangleable\",ie),cn.DEFMETHOD(\"unreferenced\",function(){return 0==this.definition().references.length&&!(this.scope.uses_eval||this.scope.uses_with)}),cn.DEFMETHOD(\"definition\",function(){return this.thedef}),cn.DEFMETHOD(\"global\",function(){return this.definition().global}),Ee.DEFMETHOD(\"mangle_names\",function(a){a=f(a);var s=-1;if(a.cache&&a.cache.props){var n=this.mangled_names=Object.create(null);a.cache.props.each(function(e){n[e]=!0})}var u=[],e=new Sn(function(e,n){if(e instanceof ve){var t=s;return n(),s=t,!0}if(e instanceof Ae)return n(),a.cache&&e instanceof Ee&&e.globals.each(c),e.variables.each(c),!0;if(e instanceof Q){for(var i;!l(i=g(++s)););return e.mangled_name=i,!0}if(!a.ie8&&e instanceof Ie){var r=e.argname.definition(),o=r.redefined();return o&&(u.push(r),r.references.forEach(function(e){e.thedef=o,e.reference(a),e.thedef=r})),n(),o||c(r),!0}});function c(e){te(e.name,a.reserved)||e.mangle(a)}this.walk(e),u.forEach(c)}),Ee.DEFMETHOD(\"find_colliding_names\",function(t){var i=t.cache&&t.cache.props,n=Object.create(null);return t.reserved.forEach(r),this.globals.each(o),this.walk(new Sn(function(e){e instanceof Ae&&e.variables.each(o),e instanceof vn&&o(e.definition())})),n;function r(e){n[e]=!0}function o(e){var n=e.name;if(e.global&&i&&i.has(n))n=i.get(n);else if(!e.unmangleable(t))return;r(n)}}),Ee.DEFMETHOD(\"expand_names\",function(t){g.reset(),g.sort(),t=f(t);var i=this.find_colliding_names(t),r=0;function n(n){if(!(n.global&&t.cache||n.unmangleable(t)||te(n.name,t.reserved))){var e=n.redefined();n.name=e?e.name:function(){for(var e;e=g(r++),i[e]||!l(e););return e}(),n.orig.forEach(function(e){e.name=n.name}),n.references.forEach(function(e){e.name=n.name})}}this.globals.each(n),this.walk(new Sn(function(e){e instanceof Ae&&e.variables.each(n),e instanceof vn&&n(e.definition())}))}),se.DEFMETHOD(\"tail_node\",C),We.DEFMETHOD(\"tail_node\",function(){return this.expressions[this.expressions.length-1]}),Ee.DEFMETHOD(\"compute_char_frequency\",function(t){t=f(t),g.reset();try{se.prototype.print=function(e,n){this._print(e,n),this instanceof cn&&!this.unmangleable(t)?g.consider(this.name,-1):t.properties&&(this instanceof Xe?g.consider(this.property,-1):this instanceof Ze&&function e(n){n instanceof bn?g.consider(n.value,-1):n instanceof tn?(e(n.consequent),e(n.alternative)):n instanceof We&&e(n.tail_node())}(this.property))},g.consider(this.print_to_string(),1)}finally{se.prototype.print=se.prototype._print}g.sort()});var g=function(){var i,r,e=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_\".split(\"\"),n=\"0123456789\".split(\"\");function t(){r=Object.create(null),e.forEach(function(e){r[e]=0}),n.forEach(function(e){r[e]=0})}function o(e,n){return r[n]-r[e]}function a(e){var n=\"\",t=54;for(e++;n+=i[--e%t],e=Math.floor(e/t),t=64,0<e;);return n}return a.consider=function(e,n){for(var t=e.length;0<=--t;)r[e[t]]+=n},a.sort=function(){i=s(e,o).concat(s(n,o))},(a.reset=t)(),a}(),Zn=/^$|[;{][\\s\\n]*$/;function Kn(e){return\"comment2\"==e.type&&/@preserve|@license|@cc_on/i.test(e.value)}function Qn(s){var e=!s;s=Y(s,{ascii_only:!1,beautify:!1,braces:!1,comments:!1,ie8:!1,indent_level:4,indent_start:0,inline_script:!0,keep_quoted_props:!1,max_line_len:!1,preamble:null,preserve_line:!1,quote_keys:!1,quote_style:0,semicolons:!0,shebang:!0,source_map:null,webkit:!1,width:80,wrap_iife:!1},!0);var u=ie;if(s.comments){var n=s.comments;if(\"string\"==typeof s.comments&&/^\\/.*\\/[a-zA-Z]*$/.test(s.comments)){var t=s.comments.lastIndexOf(\"/\");n=new RegExp(s.comments.substr(1,t-1),s.comments.substr(t+1))}u=n instanceof RegExp?function(e){return\"comment5\"!=e.type&&n.test(e.value)}:\"function\"==typeof n?function(e){return\"comment5\"!=e.type&&n(this,e)}:\"some\"===n?Kn:J}var r=0,a=0,c=1,f=0,l=\"\",p=s.ascii_only?function(e,t){return e.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g,function(e){var n=e.charCodeAt(0).toString(16);if(n.length<=2&&!t){for(;n.length<2;)n=\"0\"+n;return\"\\\\x\"+n}for(;n.length<4;)n=\"0\"+n;return\"\\\\u\"+n})}:function(e){for(var n=\"\",t=0,i=e.length;t<i;t++)$n(e[t])&&!zn(e[t+1])||zn(e[t])&&!$n(e[t-1])?n+=\"\\\\u\"+e.charCodeAt(t).toString(16):n+=e[t];return n};function o(e,n){var t=function(t,e){var i=0,r=0;function n(){return\"'\"+t.replace(/\\x27/g,\"\\\\'\")+\"'\"}function o(){return'\"'+t.replace(/\\x22/g,'\\\\\"')+'\"'}switch(t=t.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g,function(e,n){switch(e){case'\"':return++i,'\"';case\"'\":return++r,\"'\";case\"\\\\\":return\"\\\\\\\\\";case\"\\n\":return\"\\\\n\";case\"\\r\":return\"\\\\r\";case\"\\t\":return\"\\\\t\";case\"\\b\":return\"\\\\b\";case\"\\f\":return\"\\\\f\";case\"\\v\":return s.ie8?\"\\\\x0B\":\"\\\\v\";case\"\\u2028\":return\"\\\\u2028\";case\"\\u2029\":return\"\\\\u2029\";case\"\\ufeff\":return\"\\\\ufeff\";case\"\\0\":return/[0-9]/.test(t.charAt(n+1))?\"\\\\x00\":\"\\\\0\"}return e}),t=p(t),s.quote_style){case 1:return n();case 2:return o();case 3:return\"'\"==e?n():o();default:return r<i?n():o()}}(e,n);return s.inline_script&&(t=(t=(t=t.replace(/<\\x2f(script)([>\\/\\t\\n\\f\\r ])/gi,\"<\\\\/$1$2\")).replace(/\\x3c!--/g,\"\\\\x3c!--\")).replace(/--\\x3e/g,\"--\\\\x3e\")),t}function i(e){return function e(n,t){if(t<=0)return\"\";if(1==t)return n;var i=e(n,t>>1);return i+=i,1&t&&(i+=n),i}(\" \",s.indent_start+r-e*s.indent_level)}var d,h,v=!1,_=!1,m=0,g=!1,b=!1,y=-1,w=\"\",x=s.source_map&&[],A=x?function(){x.forEach(function(n){try{s.source_map.add(n.token.file,n.line,n.col,n.token.line,n.token.col,n.name||\"name\"!=n.token.type?n.name:n.token.value)}catch(e){se.warn(\"Couldn't figure out mapping for {file}:{line},{col} → {cline},{ccol} [{name}]\",{file:n.token.file,line:n.token.line,col:n.token.col,cline:n.line,ccol:n.col,name:n.name||\"\"})}}),x=[]}:L,E=s.max_line_len?function(){if(a>s.max_line_len){if(m){var e=l.slice(0,m),n=l.slice(m);if(x){var t=n.length-a;x.forEach(function(e){e.line++,e.col+=t})}l=e+\"\\n\"+n,c++,f++,a=n.length}a>s.max_line_len&&se.warn(\"Output exceeds {max_line_len} characters\",s)}m&&(m=0,A())}:L,k=W(\"( [ + * / - , .\");function D(e){var n=(e=String(e)).charAt(0);g&&n&&(g=!1,\"\\n\"!=n&&(D(\"\\n\"),C())),b&&n&&(b=!1,/[\\s;})]/.test(n)||F()),y=-1;var t=w.charAt(w.length-1);if(_&&(_=!1,(\":\"==t&&\"}\"==n||(!n||\";}\".indexOf(n)<0)&&\";\"!=t)&&(s.semicolons||k(n)?(l+=\";\",a++,f++):(E(),l+=\"\\n\",f++,c++,a=0,/^\\s+$/.test(e)&&(_=!0)),s.beautify||(v=!1))),!s.beautify&&s.preserve_line&&q[q.length-1])for(var i=q[q.length-1].start.line;c<i;)E(),l+=\"\\n\",f++,c++,a=0,v=!1;v&&((jn(t)&&(jn(n)||\"\\\\\"==n)||\"/\"==n&&n==t||(\"+\"==n||\"-\"==n)&&n==w)&&(l+=\" \",a++,f++),v=!1),d&&(x.push({token:d,name:h,line:c,col:a}),d=!1,m||A()),l+=e,f+=e.length;var r=e.split(/\\r?\\n/),o=r.length-1;c+=o,a+=r[0].length,0<o&&(E(),a=r[o].length),w=e}var F=s.beautify?function(){D(\" \")}:function(){v=!0},C=s.beautify?function(e){s.beautify&&D(i(e?.5:0))}:L,B=s.beautify?function(e,n){!0===e&&(e=$());var t=r;r=e;var i=n();return r=t,i}:function(e,n){return n()},S=s.beautify?function(){if(y<0)return D(\"\\n\");\"\\n\"!=l[y]&&(l=l.slice(0,y)+\"\\n\"+l.slice(y),f++,c++),y++}:s.max_line_len?function(){E(),m=l.length}:L,T=s.beautify?function(){D(\";\")}:function(){_=!0};function O(){_=!1,D(\";\")}function $(){return r+s.indent_level}function z(){return m&&E(),l}function M(){var e=l.lastIndexOf(\"\\n\");return/^ *$/.test(l.slice(e+1))}var q=[];return{get:z,toString:z,indent:C,indentation:function(){return r},current_width:function(){return a-r},should_break:function(){return s.width&&this.current_width()>=s.width},has_parens:function(){return\"(\"==l.slice(-1)},newline:S,print:D,space:F,comma:function(){D(\",\"),F()},colon:function(){D(\":\"),F()},last:function(){return w},semicolon:T,force_semicolon:O,to_utf8:p,print_name:function(e){var n;D((n=(n=e).toString(),n=p(n,!0)))},print_string:function(e,n,t){var i=o(e,n);!0===t&&-1===i.indexOf(\"\\\\\")&&(Zn.test(l)||O(),O()),D(i)},encode_string:o,next_indent:$,with_indent:B,with_block:function(e){var n;return D(\"{\"),S(),B($(),function(){n=e()}),C(),D(\"}\"),n},with_parens:function(e){D(\"(\");var n=e();return D(\")\"),n},with_square:function(e){D(\"[\");var n=e();return D(\"]\"),n},add_mapping:x?function(e,n){d=e,h=n}:L,option:function(e){return s[e]},prepend_comments:e?L:function(e){var i=this,n=e.start;if(n&&(!n.comments_before||n.comments_before._dumped!==i)){var r=n.comments_before;if(r||(r=n.comments_before=[]),r._dumped=i,e instanceof Se&&e.value){var o=new Sn(function(e){var n=o.parent();if(!(n instanceof Se||n instanceof nn&&n.left===e||\"Call\"==n.TYPE&&n.expression===e||n instanceof tn&&n.condition===e||n instanceof Xe&&n.expression===e||n instanceof We&&n.expressions[0]===e||n instanceof Ze&&n.expression===e||n instanceof en))return!0;var t=e.start.comments_before;t&&t._dumped!==i&&(t._dumped=i,r=r.concat(t))});o.push(e),e.value.walk(o)}if(0==f){0<r.length&&s.shebang&&\"comment5\"==r[0].type&&(D(\"#!\"+r.shift().value+\"\\n\"),C());var t=s.preamble;t&&D(t.replace(/\\r\\n?|[\\n\\u2028\\u2029]|\\s*$/g,\"\\n\"))}if(0!=(r=r.filter(u,e)).length){var a=M();r.forEach(function(e,n){a||(e.nlb?(D(\"\\n\"),C(),a=!0):0<n&&F()),/comment[134]/.test(e.type)?(D(\"//\"+e.value.replace(/[@#]__PURE__/g,\" \")+\"\\n\"),C(),a=!0):\"comment2\"==e.type&&(D(\"/*\"+e.value.replace(/[@#]__PURE__/g,\" \")+\"*/\"),a=!1)}),a||(n.nlb?(D(\"\\n\"),C()):F())}}},append_comments:e||u===ie?L:function(e,t){var n=e.end;if(n){var i=n[t?\"comments_before\":\"comments_after\"];if(i&&i._dumped!==this&&(e instanceof ue||oe(i,function(e){return!/comment[134]/.test(e.type)}))){i._dumped=this;var r=l.length;i.filter(u,e).forEach(function(e,n){b=!1,g?(D(\"\\n\"),C(),g=!1):e.nlb&&(0<n||!M())?(D(\"\\n\"),C()):(0<n||!t)&&F(),/comment[134]/.test(e.type)?(D(\"//\"+e.value.replace(/[@#]__PURE__/g,\" \")),g=!0):\"comment2\"==e.type&&(D(\"/*\"+e.value.replace(/[@#]__PURE__/g,\" \")+\"*/\"),b=!0)}),l.length>r&&(y=r)}}},line:function(){return c},col:function(){return a},pos:function(){return f},push_node:function(e){q.push(e)},pop_node:function(){return q.pop()},parent:function(e){return q[q.length-2-(e||0)]}}}function et(e,n){if(!(this instanceof et))return new et(e,n);Xn.call(this,this.before,this.after),this.options=Y(e,{arguments:!n,booleans:!n,collapse_vars:!n,comparisons:!n,conditionals:!n,dead_code:!n,drop_console:!1,drop_debugger:!n,evaluate:!n,expression:!1,global_defs:{},hoist_funs:!1,hoist_props:!n,hoist_vars:!1,ie8:!1,if_return:!n,inline:!n,join_vars:!n,keep_fargs:!0,keep_fnames:!1,keep_infinity:!1,loops:!n,negate_iife:!n,passes:1,properties:!n,pure_getters:!n&&\"strict\",pure_funcs:null,reduce_funcs:!n,reduce_vars:!n,sequences:!n,side_effects:!n,switches:!n,top_retain:null,toplevel:!(!e||!e.top_retain),typeofs:!n,unsafe:!1,unsafe_comps:!1,unsafe_Function:!1,unsafe_math:!1,unsafe_proto:!1,unsafe_regexp:!1,unsafe_undefined:!1,unused:!n,warnings:!1},!0);var t=this.options.global_defs;if(\"object\"==typeof t)for(var i in t)/^@/.test(i)&&ae(t,i)&&(t[i.slice(1)]=Gn(t[i],{expression:!0}));!0===this.options.inline&&(this.options.inline=3);var r=this.options.pure_funcs;this.pure_funcs=\"function\"==typeof r?r:r?function(e){return r.indexOf(e.expression.print_to_string())<0}:J;var o=this.options.top_retain;o instanceof RegExp?this.top_retain=function(e){return o.test(e.name)}:\"function\"==typeof o?this.top_retain=o:o&&(\"string\"==typeof o&&(o=o.split(/,/)),this.top_retain=function(e){return 0<=o.indexOf(e.name)});var a=this.options.toplevel;this.toplevel=\"string\"==typeof a?{funcs:/funcs/.test(a),vars:/vars/.test(a)}:{funcs:a,vars:a};var s=this.options.sequences;this.sequences_limit=1==s?800:0|s,this.warnings_produced={}}function b(e,n){e.walk(new Sn(function(e){return e instanceof We?b(e.tail_node(),n):e instanceof bn?n(e.value):e instanceof tn&&(b(e.consequent,n),b(e.alternative,n)),!0}))}function d(e,n){var t=(n=Y(n,{builtins:!1,cache:null,debug:!1,keep_quoted:!1,only_cache:!1,regex:null,reserved:null},!0)).reserved;Array.isArray(t)||(t=[]),n.builtins||function(n){function t(e){v(n,e)}[\"null\",\"true\",\"false\",\"Infinity\",\"-Infinity\",\"undefined\"].forEach(t),[Object,Array,Function,Number,String,Boolean,Error,Math,Date,RegExp].forEach(function(e){Object.getOwnPropertyNames(e).map(t),e.prototype&&Object.getOwnPropertyNames(e.prototype).map(t)})}(t);var i,r=-1;n.cache?(i=n.cache.props).each(function(e){v(t,e)}):i=new O;var o,a=n.regex,s=!1!==n.debug;s&&(o=!0===n.debug?\"\":n.debug);var u=[],c=[];return e.walk(new Sn(function(e){e instanceof un?p(e.key):e instanceof sn?p(e.key.name):e instanceof Xe?p(e.property):e instanceof Ze&&b(e.property,p)})),e.transform(new Xn(function(e){e instanceof un?e.key=d(e.key):e instanceof sn?e.key.name=d(e.key.name):e instanceof Xe?e.property=d(e.property):!n.keep_quoted&&e instanceof Ze&&(e.property=function t(e){return e.transform(new Xn(function(e){if(e instanceof We){var n=e.expressions.length-1;e.expressions[n]=t(e.expressions[n])}else e instanceof bn?e.value=d(e.value):e instanceof tn&&(e.consequent=t(e.consequent),e.alternative=t(e.alternative));return e}))}(e.property))}));function f(e){return!(0<=c.indexOf(e))&&(!(0<=t.indexOf(e))&&(n.only_cache?i.has(e):!/^-?[0-9]+(\\.[0-9]+)?(e[+-][0-9]+)?$/.test(e)))}function l(e){return!(a&&!a.test(e))&&(!(0<=t.indexOf(e))&&(i.has(e)||0<=u.indexOf(e)))}function p(e){f(e)&&v(u,e),l(e)||v(c,e)}function d(e){if(!l(e))return e;var n=i.get(e);if(!n){if(s){var t=\"_$\"+e+\"$\"+o+\"_\";f(t)&&(n=t)}if(!n)for(;!f(n=g(++r)););i.set(e,n)}return n}}!function(){function e(e,n){e.DEFMETHOD(\"_codegen\",n)}var o=!1,a=null,s=null;function t(e,n){Array.isArray(e)?e.forEach(function(e){t(e,n)}):e.DEFMETHOD(\"needs_parens\",n)}function i(e,t,i,n){var r=e.length-1;o=n,e.forEach(function(e,n){!0!==o||e instanceof fe||e instanceof he||e instanceof le&&e.body instanceof bn||(o=!1),e instanceof he||(i.indent(),e.print(i),n==r&&t||(i.newline(),t&&i.newline())),!0===o&&e instanceof le&&e.body instanceof bn&&(o=!1)}),o=!1}function r(e,n){n.print(\"{\"),n.with_indent(n.next_indent(),function(){n.append_comments(e,!0)}),n.print(\"}\")}function u(e,n,t){0<e.body.length?n.with_block(function(){i(e.body,!1,n,t)}):r(e,n)}function c(e,n,t){var i=!1;t&&e.walk(new Sn(function(e){return!!(i||e instanceof Ae)||(e instanceof nn&&\"in\"==e.operator?i=!0:void 0)})),e.print(n,i)}function f(e,n,t){t.option(\"quote_keys\")?t.print_string(e):\"\"+ +e==e&&0<=e?t.print(d(e)):(m(e)?!t.option(\"ie8\"):Nn(e))?n&&t.option(\"keep_quoted_props\")?t.print_string(e,n):t.print_name(e):t.print_string(e,n)}function l(e,n){n.option(\"braces\")?h(e,n):!e||e instanceof he?n.force_semicolon():e.print(n)}function p(e,n){return 0<e.args.length||n.option(\"beautify\")}function d(e){var n,t=e.toString(10),i=[t.replace(/^0\\./,\".\").replace(\"e+\",\"e\")];return Math.floor(e)===e?(0<=e?i.push(\"0x\"+e.toString(16).toLowerCase(),\"0\"+e.toString(8)):i.push(\"-0x\"+(-e).toString(16).toLowerCase(),\"-0\"+(-e).toString(8)),(n=/^(.*?)(0+)$/.exec(e))&&i.push(n[1]+\"e\"+n[2].length)):(n=/^0?\\.(0+)(.*)$/.exec(e))&&i.push(n[2]+\"e-\"+(n[1].length+n[2].length),t.substr(t.indexOf(\".\"))),function(e){for(var n=e[0],t=n.length,i=1;i<e.length;++i)e[i].length<t&&(t=(n=e[i]).length);return n}(i)}function h(e,n){!e||e instanceof he?n.print(\"{}\"):e instanceof de?e.print(n):n.with_block(function(){n.indent(),e.print(n),n.newline()})}function n(e,n){e.DEFMETHOD(\"add_source_map\",function(e){n(this,e)})}function v(e,n){n.add_mapping(e.start)}se.DEFMETHOD(\"print\",function(e,n){var t=this,i=t._codegen;function r(){e.prepend_comments(t),t.add_source_map(e),i(t,e),e.append_comments(t)}t instanceof Ae?a=t:!s&&t instanceof fe&&\"use asm\"==t.value&&(s=a),e.push_node(t),n||t.needs_parens(e)?e.with_parens(r):r(),e.pop_node(),t===s&&(s=null)}),se.DEFMETHOD(\"_print\",se.prototype.print),se.DEFMETHOD(\"print_to_string\",function(e){var n=Qn(e);return this.print(n),n.get()}),t(se,ie),t(Fe,function(e){if(!e.has_parens()&&$(e))return!0;var n;if(e.option(\"webkit\")&&((n=e.parent())instanceof Ge&&n.expression===this))return!0;return!!e.option(\"wrap_iife\")&&((n=e.parent())instanceof Ye&&n.expression===this)}),t(an,function(e){return!e.has_parens()&&$(e)}),t(Ke,function(e){var n=e.parent();return n instanceof Ge&&n.expression===this||n instanceof Ye&&n.expression===this}),t(We,function(e){var n=e.parent();return n instanceof Ye||n instanceof Ke||n instanceof nn||n instanceof Ve||n instanceof Ge||n instanceof on||n instanceof sn||n instanceof tn}),t(nn,function(e){var n=e.parent();if(n instanceof Ye&&n.expression===this)return!0;if(n instanceof Ke)return!0;if(n instanceof Ge&&n.expression===this)return!0;if(n instanceof nn){var t=n.operator,i=Jn[t],r=this.operator,o=Jn[r];if(o<i||i==o&&this===n.right)return!0}}),t(Ge,function(e){var n=e.parent();if(n instanceof Je&&n.expression===this){var t=!1;return this.walk(new Sn(function(e){return!!(t||e instanceof Ae)||(e instanceof Ye?t=!0:void 0)})),t}}),t(Ye,function(e){var n,t=e.parent();return t instanceof Je&&t.expression===this||this.expression instanceof Fe&&t instanceof Ge&&t.expression===this&&(n=e.parent(1))instanceof rn&&n.left===t}),t(Je,function(e){var n=e.parent();if(!p(this,e)&&(n instanceof Ge||n instanceof Ye&&n.expression===this))return!0}),t(yn,function(e){var n=e.parent();if(n instanceof Ge&&n.expression===this){var t=this.getValue();if(t<0||/^0/.test(d(t)))return!0}}),t([rn,tn],function(e){var n=e.parent();return n instanceof Ke||(n instanceof nn&&!(n instanceof rn)||(n instanceof Ye&&n.expression===this||(n instanceof tn&&n.condition===this||(n instanceof Ge&&n.expression===this||void 0))))}),e(fe,function(e,n){n.print_string(e.value,e.quote),n.semicolon()}),e(ce,function(e,n){n.print(\"debugger\"),n.semicolon()}),_.DEFMETHOD(\"_do_print_body\",function(e){l(this.body,e)}),e(ue,function(e,n){e.body.print(n),n.semicolon()}),e(Ee,function(e,n){i(e.body,!0,n,!0),n.print(\"\")}),e(ve,function(e,n){e.label.print(n),n.colon(),e.body.print(n)}),e(le,function(e,n){e.body.print(n),n.semicolon()}),e(de,function(e,n){u(e,n)}),e(he,function(e,n){n.semicolon()}),e(ge,function(e,n){n.print(\"do\"),n.space(),h(e.body,n),n.space(),n.print(\"while\"),n.space(),n.with_parens(function(){e.condition.print(n)}),n.semicolon()}),e(be,function(e,n){n.print(\"while\"),n.space(),n.with_parens(function(){e.condition.print(n)}),n.space(),e._do_print_body(n)}),e(ye,function(e,n){n.print(\"for\"),n.space(),n.with_parens(function(){e.init?(e.init instanceof Ue?e.init.print(n):c(e.init,n,!0),n.print(\";\"),n.space()):n.print(\";\"),e.condition?(e.condition.print(n),n.print(\";\"),n.space()):n.print(\";\"),e.step&&e.step.print(n)}),n.space(),e._do_print_body(n)}),e(we,function(e,n){n.print(\"for\"),n.space(),n.with_parens(function(){e.init.print(n),n.space(),n.print(\"in\"),n.space(),e.object.print(n)}),n.space(),e._do_print_body(n)}),e(xe,function(e,n){n.print(\"with\"),n.space(),n.with_parens(function(){e.expression.print(n)}),n.space(),e._do_print_body(n)}),ke.DEFMETHOD(\"_do_print\",function(t,e){var n=this;e||t.print(\"function\"),n.name&&(t.space(),n.name.print(t)),t.with_parens(function(){n.argnames.forEach(function(e,n){n&&t.comma(),e.print(t)})}),t.space(),u(n,t,!0)}),e(ke,function(e,n){e._do_print(n)}),Se.DEFMETHOD(\"_do_print\",function(e,n){e.print(n),this.value&&(e.space(),this.value.print(e)),e.semicolon()}),e(Te,function(e,n){e._do_print(n,\"return\")}),e(G,function(e,n){e._do_print(n,\"throw\")}),Oe.DEFMETHOD(\"_do_print\",function(e,n){e.print(n),this.label&&(e.space(),this.label.print(e)),e.semicolon()}),e($e,function(e,n){e._do_print(n,\"break\")}),e(ze,function(e,n){e._do_print(n,\"continue\")}),e(Me,function(e,n){n.print(\"if\"),n.space(),n.with_parens(function(){e.condition.print(n)}),n.space(),e.alternative?(!function(e,n){var t=e.body;if(n.option(\"braces\")||n.option(\"ie8\")&&t instanceof ge)return h(t,n);if(!t)return n.force_semicolon();for(;;)if(t instanceof Me){if(!t.alternative)return h(e.body,n);t=t.alternative}else{if(!(t instanceof _))break;t=t.body}l(e.body,n)}(e,n),n.space(),n.print(\"else\"),n.space(),e.alternative instanceof Me?e.alternative.print(n):l(e.alternative,n)):e._do_print_body(n)}),e(qe,function(e,t){t.print(\"switch\"),t.space(),t.with_parens(function(){e.expression.print(t)}),t.space();var i=e.body.length-1;i<0?r(e,t):t.with_block(function(){e.body.forEach(function(e,n){t.indent(!0),e.print(t),n<i&&0<e.body.length&&t.newline()})})}),je.DEFMETHOD(\"_do_print_body\",function(n){n.newline(),this.body.forEach(function(e){n.indent(),e.print(n),n.newline()})}),e(Ne,function(e,n){n.print(\"default:\"),e._do_print_body(n)}),e(He,function(e,n){n.print(\"case\"),n.space(),e.expression.print(n),n.print(\":\"),e._do_print_body(n)}),e(Re,function(e,n){n.print(\"try\"),n.space(),u(e,n),e.bcatch&&(n.space(),e.bcatch.print(n)),e.bfinally&&(n.space(),e.bfinally.print(n))}),e(Ie,function(e,n){n.print(\"catch\"),n.space(),n.with_parens(function(){e.argname.print(n)}),n.space(),u(e,n)}),e(Pe,function(e,n){n.print(\"finally\"),n.space(),u(e,n)}),Ue.DEFMETHOD(\"_do_print\",function(t,e){t.print(e),t.space(),this.definitions.forEach(function(e,n){n&&t.comma(),e.print(t)});var n=t.parent();(n instanceof ye||n instanceof we)&&n.init===this||t.semicolon()}),e(Le,function(e,n){e._do_print(n,\"var\")}),e(Ve,function(e,n){if(e.name.print(n),e.value){n.space(),n.print(\"=\"),n.space();var t=n.parent(1),i=t instanceof ye||t instanceof we;c(e.value,n,i)}}),e(Ye,function(e,t){e.expression.print(t),e instanceof Je&&!p(e,t)||((e.expression instanceof Ye||e.expression instanceof ke)&&t.add_mapping(e.start),t.with_parens(function(){e.args.forEach(function(e,n){n&&t.comma(),e.print(t)})}))}),e(Je,function(e,n){n.print(\"new\"),n.space(),Ye.prototype._codegen(e,n)}),We.DEFMETHOD(\"_do_print\",function(t){this.expressions.forEach(function(e,n){0<n&&(t.comma(),t.should_break()&&(t.newline(),t.indent())),e.print(t)})}),e(We,function(e,n){e._do_print(n)}),e(Xe,function(e,n){var t=e.expression;t.print(n);var i=e.property;n.option(\"ie8\")&&m(i)?(n.print(\"[\"),n.add_mapping(e.end),n.print_string(i),n.print(\"]\")):(t instanceof yn&&0<=t.getValue()&&(/[xa-f.)]/i.test(n.last())||n.print(\".\")),n.print(\".\"),n.add_mapping(e.end),n.print_name(i))}),e(Ze,function(e,n){e.expression.print(n),n.print(\"[\"),e.property.print(n),n.print(\"]\")}),e(Qe,function(e,n){var t=e.operator;n.print(t),(/^[a-z]/i.test(t)||/[+-]$/.test(t)&&e.expression instanceof Qe&&/^[+-]/.test(e.expression.operator))&&n.space(),e.expression.print(n)}),e(en,function(e,n){e.expression.print(n),n.print(e.operator)}),e(nn,function(e,n){var t=e.operator;e.left.print(n),\">\"==t[0]&&e.left instanceof en&&\"--\"==e.left.operator?n.print(\" \"):n.space(),n.print(t),(\"<\"==t||\"<<\"==t)&&e.right instanceof Qe&&\"!\"==e.right.operator&&e.right.expression instanceof Qe&&\"--\"==e.right.expression.operator?n.print(\" \"):n.space(),e.right.print(n)}),e(tn,function(e,n){e.condition.print(n),n.space(),n.print(\"?\"),n.space(),e.consequent.print(n),n.space(),n.colon(),e.alternative.print(n)}),e(on,function(n,i){i.with_square(function(){var e=n.elements,t=e.length;0<t&&i.space(),e.forEach(function(e,n){n&&i.comma(),e.print(i),n===t-1&&e instanceof kn&&i.comma()}),0<t&&i.space()})}),e(an,function(e,t){0<e.properties.length?t.with_block(function(){e.properties.forEach(function(e,n){n&&(t.print(\",\"),t.newline()),t.indent(),e.print(t)}),t.newline()}):r(e,t)}),e(un,function(e,n){f(e.key,e.quote,n),n.colon(),e.value.print(n)}),sn.DEFMETHOD(\"_print_getter_setter\",function(e,n){n.print(e),n.space(),f(this.key.name,this.quote,n),this.value._do_print(n,!0)}),e(X,function(e,n){e._print_getter_setter(\"set\",n)}),e(Z,function(e,n){e._print_getter_setter(\"get\",n)}),e(cn,function(e,n){var t=e.definition();n.print_name(t?t.mangled_name||t.name:e.name)}),e(kn,L),e(mn,function(e,n){n.print(\"this\")}),e(gn,function(e,n){n.print(e.getValue())}),e(bn,function(e,n){n.print_string(e.getValue(),e.quote,o)}),e(yn,function(e,n){s&&e.start&&null!=e.start.raw?n.print(e.start.raw):n.print(d(e.getValue()))}),e(wn,function(e,n){var t=e.getValue(),i=t.toString();t.raw_source&&(i=\"/\"+t.raw_source+i.slice(i.lastIndexOf(\"/\"))),i=n.to_utf8(i),n.print(i);var r=n.parent();r instanceof nn&&/^in/.test(r.operator)&&r.left===e&&n.print(\" \")}),n(se,L),n(fe,v),n(ce,v),n(cn,v),n(Be,v),n(_,v),n(ve,L),n(ke,v),n(qe,v),n(je,v),n(de,v),n(Ee,L),n(Je,v),n(Re,v),n(Ie,v),n(Pe,v),n(Ue,v),n(gn,v),n(X,function(e,n){n.add_mapping(e.start,e.key.name)}),n(Z,function(e,n){n.add_mapping(e.start,e.key.name)}),n(sn,function(e,n){n.add_mapping(e.start,e.key)})}(),t(et.prototype=new Xn,{option:function(e){return this.options[e]},exposed:function(e){if(e.global)for(var n=0,t=e.orig.length;n<t;n++)if(!this.toplevel[e.orig[n]instanceof dn?\"funcs\":\"vars\"])return!0;return!1},compress:function(e){this.option(\"expression\")&&e.process_expression(!0);for(var n=+this.options.passes||1,t=1/0,i=!1,r={ie8:this.option(\"ie8\")},o=0;o<n;o++)if(e.figure_out_scope(r),(0<o||this.option(\"reduce_vars\"))&&e.reset_opt_flags(this),e=e.transform(this),1<n){var a=0;if(e.walk(new Sn(function(){a++})),this.info(\"pass \"+o+\": last_count: \"+t+\", count: \"+a),a<t)t=a,i=!1;else{if(i)break;i=!0}}return this.option(\"expression\")&&e.process_expression(!1),e},info:function(){\"verbose\"==this.options.warnings&&se.warn.apply(se,arguments)},warn:function(e,n){if(this.options.warnings){var t=S(e,n);t in this.warnings_produced||(this.warnings_produced[t]=!0,se.warn.apply(se,arguments))}},clear_warnings:function(){this.warnings_produced={}},before:function(e,n,t){if(e._squeezed)return e;var i=!1;e instanceof Ae&&(e=(e=e.hoist_properties(this)).hoist_declarations(this),i=!0),n(e,this),n(e,this);var r=e.optimize(this);return i&&r instanceof Ae&&(r.drop_unused(this),n(r,this)),r===e&&(r._squeezed=!0),r}}),function(){function e(e,t){e.DEFMETHOD(\"optimize\",function(e){if(this._optimized)return this;if(e.has_directive(\"use asm\"))return this;var n=t(this,e);return n._optimized=!0,n})}function G(e){if(e instanceof mn)return!0;if(e instanceof _n)return e.definition().orig[0]instanceof hn;if(e instanceof Ge){if((e=e.expression)instanceof _n){if(e.is_immutable())return!1;e=e.fixed_value()}return!e||(!!e.is_constant()||G(e))}return!1}function o(e,n){for(var t,i=0;(t=e.parent(i++))&&!(t instanceof Ae);)if(t instanceof Ie){t=t.argname.definition().scope;break}return t.find_variable(n)}function X(e,n,t){return t||(t={}),n&&(t.start||(t.start=n.start),t.end||(t.end=n.end)),new e(t)}function M(e,n){return 1==n.length?n[0]:X(We,e,{expressions:n.reduce(l,[])})}function q(e,n){switch(typeof e){case\"string\":return X(bn,n,{value:e});case\"number\":return isNaN(e)?X(An,n):isFinite(e)?1/e<0?X(Qe,n,{operator:\"-\",expression:X(yn,n,{value:-e})}):X(yn,n,{value:e}):e<0?X(Qe,n,{operator:\"-\",expression:X(Dn,n)}):X(Dn,n);case\"boolean\":return X(e?Bn:Cn,n);case\"undefined\":return X(En,n);default:if(null===e)return X(xn,n,{value:null});if(e instanceof RegExp)return X(wn,n,{value:e});throw new Error(S(\"Can't handle constant of type: {type}\",{type:typeof e}))}}function Z(e,n,t){return e instanceof Qe&&\"delete\"==e.operator||e instanceof Ye&&e.expression===n&&(t instanceof Ge||t instanceof _n&&\"eval\"==t.name)?M(n,[X(yn,n,{value:0}),t]):t}function l(e,n){return n instanceof We?e.push.apply(e,n.expressions):e.push(n),e}function b(e){if(null===e)return[];if(e instanceof de)return e.body;if(e instanceof he)return[];if(e instanceof ue)return[e];throw new Error(\"Can't convert thing to statement array\")}function j(e){return null===e||(e instanceof he||e instanceof de&&0==e.body.length)}function y(e){return e instanceof _e&&e.body instanceof de?e.body:e}function K(e){for(;e instanceof Ge;)e=e.expression;return e}function N(e){return\"Call\"==e.TYPE&&(e.expression instanceof Fe||N(e.expression))}function H(e){return e instanceof _n&&e.definition().undeclared}e(se,function(e,n){return e}),se.DEFMETHOD(\"equivalent_to\",function(e){return this.TYPE==e.TYPE&&this.print_to_string()==e.print_to_string()}),Ae.DEFMETHOD(\"process_expression\",function(i,r){var o=this,a=new Xn(function(e){if(i&&e instanceof le)return X(Te,e,{value:e.body});if(!i&&e instanceof Te){if(r){var n=e.value&&e.value.drop_side_effect_free(r,!0);return n?X(le,e,{body:n}):X(he,e)}return X(le,e,{body:e.value||X(Qe,e,{operator:\"void\",expression:X(yn,e,{value:0})})})}if(e instanceof ke&&e!==o)return e;if(e instanceof pe){var t=e.body.length-1;0<=t&&(e.body[t]=e.body[t].transform(a))}else e instanceof Me?(e.body=e.body.transform(a),e.alternative&&(e.alternative=e.alternative.transform(a))):e instanceof xe&&(e.body=e.body.transform(a));return e});o.transform(a)}),function(e){function i(e,n){n.assignments=0,n.chained=!1,n.direct_access=!1,n.escaped=!1,n.scope.uses_eval||n.scope.uses_with?n.fixed=!1:e.exposed(n)?n.fixed=!1:n.fixed=n.init,n.recursive_refs=0,n.references=[],n.should_replace=void 0,n.single_use=void 0}function a(n,t,e){e.variables.each(function(e){i(t,e),null===e.fixed?(e.safe_ids=n.safe_ids,c(n,e,!0)):e.fixed&&(n.loop_ids[e.id]=n.in_loop,c(n,e,!0))})}function s(e){e.safe_ids=Object.create(e.safe_ids)}function u(e){e.safe_ids=Object.getPrototypeOf(e.safe_ids)}function c(e,n,t){e.safe_ids[n.id]=t}function f(e,n){if(e.safe_ids[n.id]){if(null==n.fixed){var t=n.orig[0];if(t instanceof pn||\"arguments\"==t.name)return!1;n.fixed=X(En,t)}return!0}return n.fixed instanceof Ce}function o(e,n,t){return void 0===n.fixed||(null===n.fixed&&n.safe_ids?(n.safe_ids[n.id]=!1,delete n.safe_ids,!0):!!ae(e.safe_ids,n.id)&&(!!f(e,n)&&(!1!==n.fixed&&(!(null!=n.fixed&&(!t||n.references.length>n.assignments))&&oe(n.orig,function(e){return!(e instanceof dn||e instanceof hn)})))))}function l(e,n){if(!((n=p(n))instanceof se)){var t;if(e instanceof on){var i=e.elements;if(\"length\"==n)return q(i.length,e);\"number\"==typeof n&&n in i&&(t=i[n])}else if(e instanceof an){n=\"\"+n;for(var r=e.properties,o=r.length;0<=--o;){if(!(r[o]instanceof un))return;t||r[o].key!==n||(t=r[o].value)}}return t instanceof _n&&t.fixed_value()||t}}e(se,L);var t=new Sn(function(e){if(e instanceof cn){var n=e.definition();n&&(e instanceof _n&&n.references.push(e),n.fixed=!1)}});e(De,function(e,n,t){return s(e),a(e,t,this),n(),u(e),!0}),e(rn,function(e){var n=this;if(n.left instanceof _n){var t=n.left.definition(),i=t.fixed;if((i||\"=\"==n.operator)&&o(e,t,n.right))return t.references.push(n.left),t.assignments++,\"=\"!=n.operator&&(t.chained=!0),t.fixed=\"=\"==n.operator?function(){return n.right}:function(){return X(nn,n,{operator:n.operator.slice(0,-1),left:i instanceof se?i:i(),right:n.right})},c(e,t,!1),n.right.walk(e),c(e,t,!0),!0}}),e(nn,function(e){if(ee(this.operator))return this.left.walk(e),s(e),this.right.walk(e),u(e),!0}),e(He,function(e){return s(e),this.expression.walk(e),u(e),s(e),z(this,e),u(e),!0}),e(tn,function(e){return this.condition.walk(e),s(e),this.consequent.walk(e),u(e),s(e),this.alternative.walk(e),u(e),!0}),e(Ne,function(e,n){return s(e),n(),u(e),!0}),e(Ce,function(e,n,t){this.inlined=!1;var i=e.safe_ids;return e.safe_ids=Object.create(null),a(e,t,this),n(),e.safe_ids=i,!0}),e(ge,function(e){var n=e.in_loop;return e.in_loop=this,s(e),this.body.walk(e),this.condition.walk(e),u(e),e.in_loop=n,!0}),e(ye,function(e){this.init&&this.init.walk(e);var n=e.in_loop;return(e.in_loop=this).condition&&(s(e),this.condition.walk(e),u(e)),s(e),this.body.walk(e),u(e),this.step&&(s(e),this.step.walk(e),u(e)),e.in_loop=n,!0}),e(we,function(e){this.init.walk(t),this.object.walk(e);var n=e.in_loop;return e.in_loop=this,s(e),this.body.walk(e),u(e),e.in_loop=n,!0}),e(Fe,function(i,e,n){var r,o=this;return o.inlined=!1,s(i),a(i,n,o),!o.name&&(r=i.parent())instanceof Ye&&r.expression===o&&o.argnames.forEach(function(e,n){var t=e.definition();o.uses_arguments||void 0!==t.fixed?t.fixed=!1:(t.fixed=function(){return r.args[n]||X(En,r)},i.loop_ids[t.id]=i.in_loop,c(i,t,!0))}),e(),u(i),!0}),e(Me,function(e){return this.condition.walk(e),s(e),this.body.walk(e),u(e),this.alternative&&(s(e),this.alternative.walk(e),u(e)),!0}),e(ve,function(e){return s(e),this.body.walk(e),u(e),!0}),e(vn,function(){this.definition().fixed=!1}),e(_n,function(e,n,t){var i,r,o,a,s=this.definition();s.references.push(this),1==s.references.length&&!s.fixed&&s.orig[0]instanceof dn&&(e.loop_ids[s.id]=e.in_loop),void 0!==s.fixed&&f(e,s)&&\"m\"!=s.single_use?s.fixed&&((i=this.fixed_value())instanceof ke&&P(e,s)?s.recursive_refs++:i&&(o=e,a=s,t.option(\"unused\")&&!a.scope.uses_eval&&!a.scope.uses_with&&a.references.length-a.recursive_refs==1&&o.loop_ids[a.id]===o.in_loop)?s.single_use=i instanceof ke||s.scope===this.scope&&i.is_constant_expression():s.single_use=!1,function e(n,t,i,r,o){var a=n.parent(r);if(ne(t,a)||!o&&a instanceof Ye&&a.expression===t&&(!(i instanceof Fe)||!(a instanceof Je)&&i.contains_this()))return!0;if(a instanceof on)return e(n,a,a,r+1);if(a instanceof un&&t===a.value){var s=n.parent(r+1);return e(n,s,s,r+2)}return a instanceof Ge&&a.expression===t?!o&&e(n,a,l(i,a.property),r+1):void 0}(e,this,i,0,!!(r=i)&&(r.is_constant()||r instanceof ke||r instanceof mn))&&(s.single_use?s.single_use=\"m\":s.fixed=!1)):s.fixed=!1,function e(n,t,i,r,o,a,s){var u=n.parent(a);if(!o||!o.is_constant()){if(u instanceof rn&&\"=\"==u.operator&&r===u.right||u instanceof Ye&&r!==u.expression||u instanceof Se&&r===u.value&&r.scope!==t.scope||u instanceof Ve&&r===u.value)return!(1<s)||o&&o.is_constant_expression(i)||(s=1),void((!t.escaped||t.escaped>s)&&(t.escaped=s));if(u instanceof on||u instanceof nn&&ee(u.operator)||u instanceof tn&&r!==u.condition||u instanceof We&&r===u.tail_node())e(n,t,i,u,u,a+1,s);else if(u instanceof un&&r===u.value){var c=n.parent(a+1);e(n,t,i,c,c,a+2,s)}else if(u instanceof Ge&&r===u.expression&&(e(n,t,i,u,o=l(o,u.property),a+1,s+1),o))return;0==a&&(t.direct_access=!0)}}(e,s,this.scope,this,i,0,1)}),e(Ee,function(e,n,t){this.globals.each(function(e){i(t,e)}),a(e,t,this)}),e(Re,function(e){return s(e),z(this,e),u(e),this.bcatch&&(s(e),this.bcatch.walk(e),u(e)),this.bfinally&&this.bfinally.walk(e),!0}),e(Ke,function(e,n){var t=this;if((\"++\"==t.operator||\"--\"==t.operator)&&t.expression instanceof _n){var i=t.expression.definition(),r=i.fixed;if(r&&o(e,i,!0))return i.references.push(t.expression),i.assignments++,i.chained=!0,i.fixed=function(){return X(nn,t,{operator:t.operator.slice(0,-1),left:X(Qe,t,{operator:\"+\",expression:r instanceof se?r:r()}),right:X(yn,t,{value:1})})},c(e,i,!0),!0}}),e(Ve,function(e,n){var t=this,i=t.name.definition();if(t.value){if(o(e,i,t.value))return i.fixed=function(){return t.value},e.loop_ids[i.id]=e.in_loop,c(e,i,!1),n(),c(e,i,!0),!0;i.fixed=!1}}),e(be,function(e){var n=e.in_loop;return e.in_loop=this,s(e),this.condition.walk(e),this.body.walk(e),u(e),e.in_loop=n,!0})}(function(e,n){e.DEFMETHOD(\"reduce_vars\",n)}),Ee.DEFMETHOD(\"reset_opt_flags\",function(t){var i=t.option(\"reduce_vars\"),r=new Sn(function(e,n){if(e._squeezed=!1,e._optimized=!1,i)return e.reduce_vars(r,n,t)});r.safe_ids=Object.create(null),r.in_loop=null,r.loop_ids=Object.create(null),this.walk(r)}),cn.DEFMETHOD(\"fixed_value\",function(){var e=this.definition().fixed;return!e||e instanceof se?e:e()}),_n.DEFMETHOD(\"is_immutable\",function(){var e=this.definition().orig;return 1==e.length&&e[0]instanceof hn});var n=W(\"Array Boolean clearInterval clearTimeout console Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error escape eval EvalError Function isFinite isNaN JSON Math Number parseFloat parseInt RangeError ReferenceError RegExp Object setInterval setTimeout String SyntaxError TypeError unescape URIError\");_n.DEFMETHOD(\"is_declared\",function(e){return!this.definition().undeclared||e.option(\"unsafe\")&&n(this.name)});var t,i,r,a,s,R=W(\"Infinity NaN undefined\");function Q(e){return e instanceof Dn||e instanceof An||e instanceof En}function u(e,c){var V,Y,J;!function(){var e=c.self(),n=0;do{if(e instanceof Ie||e instanceof Pe)n++;else if(e instanceof _e)V=!0;else{if(e instanceof Ae){J=e;break}e instanceof Re&&(Y=!0)}}while(e=c.parent(n++))}();for(var W,n=10;W=!1,r(e),c.option(\"dead_code\")&&o(e,c),c.option(\"if_return\")&&i(e,c),0<c.sequences_limit&&(a(e,c),s(e,c)),c.option(\"join_vars\")&&u(e),c.option(\"collapse_vars\")&&t(e,c),W&&0<n--;);function t(t,c){if(J.uses_eval||J.uses_with)return t;for(var f,e,n,l=[],o=t.length,a=new Xn(function(e){if(D)return e;if(!k)return e!==s[u]?e:++u<s.length?O(e):(k=!0,(h=function e(n,t,i){var r=a.parent(t);if(r instanceof rn)return i&&!(r.left instanceof Ge||r.left.name in y)?e(r,t+1,i):n;if(r instanceof nn)return!i||ee(r.operator)&&r.left!==n?n:e(r,t+1,i);if(r instanceof Ye)return n;if(r instanceof He)return n;if(r instanceof tn)return i&&r.condition===n?e(r,t+1,i):n;if(r instanceof Ue)return e(r,t+1,!0);if(r instanceof Se)return i?e(r,t+1,i):n;if(r instanceof Me)return i&&r.condition===n?e(r,t+1,i):n;if(r instanceof _e)return n;if(r instanceof We)return e(r,t+1,r.tail_node()!==n);if(r instanceof le)return e(r,t+1,!0);if(r instanceof qe)return n;if(r instanceof Ke)return n;if(r instanceof Ve)return n;return null}(e,0))===e&&(D=!0),e);var n,t,i=a.parent();if(e instanceof rn&&\"=\"!=e.operator&&_.equivalent_to(e.left)||e instanceof Ye&&_ instanceof Ge&&_.equivalent_to(e.expression)||e instanceof ce||e instanceof _e&&!(e instanceof ye)||e instanceof Oe||e instanceof Re||e instanceof xe||i instanceof ye&&e!==i.init||!x&&e instanceof _n&&!e.is_declared(c))return D=!0,e;if(!v&&(i instanceof nn&&ee(i.operator)&&i.left!==e||i instanceof tn&&i.condition!==e||i instanceof Me&&i.condition!==e)&&(v=i),C&&!(e instanceof fn)&&(g&&_.equivalent_to(e)||b&&(n=b(e,this)))){if(v&&(n||!w||!x))return D=!0,e;if(ne(e,i))return d&&F++,e;if(W=D=!0,F++,c.info(\"Collapsing {name} [{file}:{line},{col}]\",{name:e.print_to_string(),file:e.start.file,line:e.start.line,col:e.start.col}),p instanceof en)return X(Qe,p,p);if(p instanceof Ve){if(d)return D=!1,e;var r=p.name.definition(),o=p.value;return r.references.length-r.replaced!=1||c.exposed(r)?X(rn,p,{operator:\"=\",left:X(_n,p.name,p.name),right:o}):(r.replaced++,E&&Q(o)?o.transform(c):Z(i,e,o))}return p.write_only=!1,p}return(e instanceof Ye||e instanceof Se&&(m||_ instanceof Ge||L(_))||e instanceof Ge&&(m||e.expression.may_throw_on_access(c))||e instanceof _n&&(function(e){var n=y[e.name];if(!n)return;if(n!==_)return!0;b=!1}(e)||m&&L(e))||e instanceof Ve&&e.value&&(e.name.name in y||m&&L(e.name))||(t=ne(e.left,e))&&(t instanceof Ge||t.name in y)||A&&(Y?e.has_side_effects(c):function e(n,t){if(n instanceof rn)return e(n.left,!0);if(n instanceof Ke)return e(n.expression,!0);if(n instanceof Ve)return n.value&&e(n.value);if(t){if(n instanceof Xe)return e(n.expression,!0);if(n instanceof Ze)return e(n.expression,!0);if(n instanceof _n)return n.definition().scope!==J}return!1}(e)))&&(h=e)instanceof Ae&&(D=!0),O(e)},function(e){D||(h===e&&(D=!0),v===e&&(v=null))}),i=new Xn(function(e){if(D)return e;if(!k){if(e!==s[u])return e;if(++u<s.length)return;return k=!0,e}return e instanceof _n&&e.name==T.name?(--F||(D=!0),ne(e,i.parent())?e:(T.replaced++,d.replaced--,p.value)):e instanceof Ne||e instanceof Ae?e:void 0});0<=--o;){0==o&&c.option(\"unused\")&&$();var s=[];for(z(t[o]);0<l.length;){s=l.pop();var u=0,p=s[s.length-1],d=null,h=null,v=null,_=M(p),r=q(p),m=_&&_.has_side_effects(c),g=_&&!m&&!G(_),b=r&&j(r);if(g||b){var y=R(p),w=(n=void 0,(n=K(e=_))instanceof _n&&n.definition().scope===J&&!(V&&(n.name in y&&y[n.name]!==e||p instanceof Ke||p instanceof rn&&\"=\"!=p.operator)));m||(m=P(p));var x=U(),A=p.may_throw(c),E=p.name instanceof pn,k=E,D=!1,F=0,C=!f||!k;if(!C){for(var B=c.self().argnames.lastIndexOf(p.name)+1;!D&&B<f.length;B++)f[B].transform(a);C=!0}for(var S=o;!D&&S<t.length;S++)t[S].transform(a);if(d){var T=p.name.definition();if(D&&T.references.length-T.replaced>F)F=!1;else{D=!1,u=0,k=E;for(S=o;!D&&S<t.length;S++)t[S].transform(i);d.single_use=!1}}F&&!I(p)&&t.splice(o,1)}}}function O(e){if(e instanceof Ae)return e;if(e instanceof qe){e.expression=e.expression.transform(a);for(var n=0,t=e.body.length;!D&&n<t;n++){var i=e.body[n];if(i instanceof He){if(!k){if(i!==s[u])continue;u++}if(i.expression=i.expression.transform(a),!x)break}}return D=!0,e}}function $(){var e,t=c.self();if(t instanceof Fe&&!t.name&&!t.uses_arguments&&!t.uses_eval&&(e=c.parent())instanceof Ye&&e.expression===t){var i=c.has_directive(\"use strict\");i&&!te(i,t.body)&&(i=!1);var n=t.argnames.length;f=e.args.slice(n);for(var r=Object.create(null),o=n;0<=--o;){var a=t.argnames[o],s=e.args[o];if(f.unshift(X(Ve,a,{name:a,value:s})),!(a.name in r)){if(r[a.name]=!0,s){var u=new Sn(function(e){if(!s)return!0;if(e instanceof _n&&t.variables.has(e.name)){var n=e.definition().scope;if(n!==J)for(;n=n.parent_scope;)if(n===J)return!0;s=null}return e instanceof mn&&(i||!u.find_parent(Ae))?!(s=null):void 0});s.walk(u)}else s=X(En,a).transform(c);s&&l.unshift([X(Ve,a,{name:a,value:s})])}}}}function z(e){s.push(e),e instanceof rn?(l.push(s.slice()),z(e.right)):e instanceof nn?(z(e.left),z(e.right)):e instanceof Ye?(z(e.expression),e.args.forEach(z)):e instanceof He?z(e.expression):e instanceof tn?(z(e.condition),z(e.consequent),z(e.alternative)):e instanceof Ue?e.definitions.forEach(z):e instanceof me?(z(e.condition),e.body instanceof pe||z(e.body)):e instanceof Se?e.value&&z(e.value):e instanceof ye?(e.init&&z(e.init),e.condition&&z(e.condition),e.step&&z(e.step),e.body instanceof pe||z(e.body)):e instanceof we?(z(e.object),e.body instanceof pe||z(e.body)):e instanceof Me?(z(e.condition),e.body instanceof pe||z(e.body),!e.alternative||e.alternative instanceof pe||z(e.alternative)):e instanceof We?e.expressions.forEach(z):e instanceof le?z(e.body):e instanceof qe?(z(e.expression),e.body.forEach(z)):e instanceof Ke?\"++\"==e.operator||\"--\"==e.operator?l.push(s.slice()):z(e.expression):e instanceof Ve&&e.value&&(l.push(s.slice()),z(e.value)),s.pop()}function M(e){if(!(e instanceof Ve))return e[e instanceof rn?\"left\":\"expression\"];var n=e.name.definition();if(te(e.name,n.orig)){var t=n.orig.length-n.eliminated,i=n.references.length-n.replaced;return 1<t&&!(e.name instanceof pn)||(1<i?function(e){var n=e.value;if(n instanceof _n&&\"arguments\"!=n.name){var t=n.definition();if(!t.undeclared)return d=t}}(e):!c.exposed(n))?X(_n,e.name,e.name):void 0}}function q(e){if(p instanceof rn&&\"=\"==p.operator)return p.right}function j(e){if(e instanceof _n){var n=e.evaluate(c);return n===e?N:H(n,N)}if(e instanceof mn)return N;if(e.is_truthy())return H(!0,ie);if(e.is_constant())return H(e.evaluate(c),N);if(!(_ instanceof _n))return!1;if(e.has_side_effects(c))return!1;var t,i=_.definition();return e.walk(new Sn(function(e){if(t)return!0;e instanceof _n&&e.definition()===i&&(t=!0)})),!t&&N}function N(e){return r.equivalent_to(e)}function H(t,i){return function(e,n){if(n.in_boolean_context()){if(t&&e.is_truthy()&&!e.has_side_effects(c))return!0;if(e.is_constant())return!e.evaluate(c)==!t}return i(e)}}function R(e){var t=Object.create(null);p instanceof Ve&&(t[p.name.name]=_);var i=new Sn(function(e){var n=K(e);(n instanceof _n||n instanceof mn)&&(t[n.name]=t[n.name]||ne(e,i.parent()))});return e.walk(i),t}function I(i){if(i.name instanceof pn){var e=c.self().argnames.indexOf(i.name),n=c.parent().args;return n[e]&&(n[e]=X(yn,n[e],{value:0})),!0}var r=!1;return t[o].transform(new Xn(function(e,n,t){return r?e:e===i||e.body===i?(r=!0,e instanceof Ve?(e.value=null,e):t?re.skip:null):void 0},function(e){if(e instanceof We)switch(e.expressions.length){case 0:return null;case 1:return e.expressions[0]}}))}function P(e){return!(e instanceof Ke)&&(n=e,n[n instanceof rn?\"right\":\"value\"]).has_side_effects(c);var n}function U(){if(m)return!1;if(d)return!0;if(_ instanceof _n){var e=_.definition();if(e.references.length-e.replaced==(p instanceof Ve?1:2))return!0}return!1}function L(e){var n=e.definition();return!(1==n.orig.length&&n.orig[0]instanceof dn)&&(n.scope!==J||!oe(n.references,function(e){var n=e.scope;return\"Scope\"==n.TYPE&&(n=n.parent_scope),n===J}))}}function r(e){for(var n=[],t=0;t<e.length;){var i=e[t];i instanceof de?(W=!0,r(i.body),[].splice.apply(e,[t,1].concat(i.body)),t+=i.body.length):i instanceof he?(W=!0,e.splice(t,1)):i instanceof fe?n.indexOf(i.value)<0?(t++,n.push(i.value)):(W=!0,e.splice(t,1)):t++}}function i(r,i){for(var o=i.self(),e=function(e){for(var n=0,t=e.length;0<=--t;){var i=e[t];if(i instanceof Me&&i.body instanceof Te&&1<++n)return!0}return!1}(r),a=o instanceof ke,n=r.length;0<=--n;){var t=r[n],s=_(n),u=r[s];if(a&&!u&&t instanceof Te){if(!t.value){W=!0,r.splice(n,1);continue}if(t.value instanceof Qe&&\"void\"==t.value.operator){W=!0,r[n]=X(le,t,{body:t.value.expression});continue}}if(t instanceof Me){var c;if(d(c=A(t.body))){c.label&&T(c.label.thedef.references,c),W=!0,(t=t.clone()).condition=t.condition.negate(i);var f=v(t.body,c);t.body=X(de,t,{body:b(t.alternative).concat(h())}),t.alternative=X(de,t,{body:f}),r[n]=t.transform(i);continue}if(d(c=A(t.alternative))){c.label&&T(c.label.thedef.references,c),W=!0,(t=t.clone()).body=X(de,t.body,{body:b(t.body).concat(h())});f=v(t.alternative,c);t.alternative=X(de,t.alternative,{body:f}),r[n]=t.transform(i);continue}}if(t instanceof Me&&t.body instanceof Te){var l=t.body.value;if(!l&&!t.alternative&&(a&&!u||u instanceof Te&&!u.value)){W=!0,r[n]=X(le,t.condition,{body:t.condition});continue}if(l&&!t.alternative&&u instanceof Te&&u.value){W=!0,(t=t.clone()).alternative=u,r.splice(n,1,t.transform(i)),r.splice(s,1);continue}if(l&&!t.alternative&&(!u&&a&&e||u instanceof Te)){W=!0,(t=t.clone()).alternative=u||X(Te,t,{value:null}),r.splice(n,1,t.transform(i)),u&&r.splice(s,1);continue}var p=r[m(n)];if(i.option(\"sequences\")&&a&&!t.alternative&&p instanceof Me&&p.body instanceof Te&&_(s)==r.length&&u instanceof le){W=!0,(t=t.clone()).alternative=X(de,u,{body:[u,X(Te,u,{value:null})]}),r.splice(n,1,t.transform(i)),r.splice(s,1);continue}}}function d(e){if(!e)return!1;var n,t=e instanceof Oe?i.loopcontrol_target(e):null;return e instanceof Te&&a&&(!(n=e.value)||n instanceof Qe&&\"void\"==n.operator)||e instanceof ze&&o===y(t)||e instanceof $e&&t instanceof de&&o===t}function h(){var e=r.slice(n+1);return r.length=n+1,e.filter(function(e){return!(e instanceof Ce)||(r.push(e),!1)})}function v(e,n){var t=b(e).slice(0,-1);return n.value&&t.push(X(le,n.value,{body:n.value.expression})),t}function _(e){for(var n=e+1,t=r.length;n<t;n++){var i=r[n];if(!(i instanceof Le&&g(i)))break}return n}function m(e){for(var n=e;0<=--n;){var t=r[n];if(!(t instanceof Le&&g(t)))break}return n}}function o(n,t){for(var e,i=t.self(),r=0,o=0,a=n.length;r<a;r++){var s=n[r];if(s instanceof Oe){var u=t.loopcontrol_target(s);s instanceof $e&&!(u instanceof _e)&&y(u)===i||s instanceof ze&&y(u)===i?s.label&&T(s.label.thedef.references,s):n[o++]=s}else n[o++]=s;if(A(s)){e=n.slice(r+1);break}}n.length=o,W=o!=a,e&&e.forEach(function(e){w(t,e,n)})}function g(e){return oe(e.definitions,function(e){return!e.value})}function a(n,e){if(!(n.length<2)){for(var t=[],i=0,r=0,o=n.length;r<o;r++){var a=n[r];if(a instanceof le){t.length>=e.sequences_limit&&u();var s=a.body;0<t.length&&(s=s.drop_side_effect_free(e)),s&&l(t,s)}else a instanceof Ue&&g(a)||a instanceof Ce||u(),n[i++]=a}u(),(n.length=i)!=o&&(W=!0)}function u(){if(t.length){var e=M(t[0],t);n[i++]=X(le,e,{body:e}),t=[]}}}function p(e,n){if(!(e instanceof de))return e;for(var t=null,i=0,r=e.body.length;i<r;i++){var o=e.body[i];if(o instanceof Le&&g(o))n.push(o);else{if(t)return!1;t=o}}return t}function s(e,t){function n(e){r--,W=!0;var n=i.body;return M(n,[n,e]).transform(t)}for(var i,r=0,o=0;o<e.length;o++){var a=e[o];if(i)if(a instanceof Se)a.value=n(a.value||X(En,a).transform(t));else if(a instanceof ye){if(!(a.init instanceof Ue)){var s=!1;i.body.walk(new Sn(function(e){return!!(s||e instanceof Ae)||(e instanceof nn&&\"in\"==e.operator?s=!0:void 0)})),s||(a.init?a.init=n(a.init):(a.init=i.body,r--,W=!0))}}else a instanceof we?a.object=n(a.object):a instanceof Me?a.condition=n(a.condition):a instanceof qe?a.expression=n(a.expression):a instanceof xe&&(a.expression=n(a.expression));if(t.option(\"conditionals\")&&a instanceof Me){var u=[],c=p(a.body,u),f=p(a.alternative,u);if(!1!==c&&!1!==f&&0<u.length){var l=u.length;u.push(X(Me,a,{condition:a.condition,body:c||X(he,a.body),alternative:f})),u.unshift(r,1),[].splice.apply(e,u),o+=l,r+=l+1,W=!(i=null);continue}}e[r++]=a,i=a instanceof le?a:null}e.length=r}function f(e,n){if(e instanceof Ue){var t,i=e.definitions[e.definitions.length-1];if(i.value instanceof an)if(n instanceof rn?t=[n]:n instanceof We&&(t=n.expressions.slice()),t){var r=!1;do{var o=t[0];if(!(o instanceof rn))break;if(\"=\"!=o.operator)break;if(!(o.left instanceof Ge))break;var a=o.left.expression;if(!(a instanceof _n))break;if(i.name.name!=a.name)break;if(!o.right.is_constant_expression(J))break;var s=o.left.property;if(s instanceof se&&(s=s.evaluate(c)),s instanceof se)break;s=\"\"+s;var u=c.has_directive(\"use strict\")?function(e){return e.key!=s&&e.key.name!=s}:function(e){return e.key.name!=s};if(!oe(i.value.properties,u))break;i.value.properties.push(X(un,o,{key:s,value:o.right})),t.shift(),r=!0}while(t.length);return r&&t}}}function u(t){for(var e,n=0,i=-1,r=t.length;n<r;n++){var o=t[n],a=t[i];if(o instanceof Ue)a&&a.TYPE==o.TYPE?(a.definitions=a.definitions.concat(o.definitions),W=!0):e&&e.TYPE==o.TYPE&&g(o)?(e.definitions=e.definitions.concat(o.definitions),W=!0):e=t[++i]=o;else if(o instanceof Se)o.value=u(o.value);else if(o instanceof ye){(s=f(a,o.init))?(W=!0,o.init=s.length?M(o.init,s):null,t[++i]=o):a instanceof Le&&(!o.init||o.init.TYPE==a.TYPE)?(o.init&&(a.definitions=a.definitions.concat(o.init.definitions)),o.init=a,t[i]=o,W=!0):e&&o.init&&e.TYPE==o.init.TYPE&&g(o.init)?(e.definitions=e.definitions.concat(o.init.definitions),o.init=null,t[++i]=o,W=!0):t[++i]=o}else if(o instanceof we)o.object=u(o.object);else if(o instanceof Me)o.condition=u(o.condition);else if(o instanceof le){var s;if(s=f(a,o.body)){if(W=!0,!s.length)continue;o.body=M(o.body,s)}t[++i]=o}else o instanceof qe?o.expression=u(o.expression):o instanceof xe?o.expression=u(o.expression):t[++i]=o}function u(e){t[++i]=o;var n=f(a,e);return n?(W=!0,n.length?M(e,n):e instanceof We?e.tail_node().left:e.left):e}t.length=i+1}}function w(n,e,t){e instanceof Ce||n.warn(\"Dropping unreachable code [{file}:{line},{col}]\",e.start),e.walk(new Sn(function(e){return e instanceof Ue?(n.warn(\"Declarations in unreachable code! [{file}:{line},{col}]\",e.start),e.remove_initializers(),t.push(e),!0):e instanceof Ce?(t.push(e),!0):e instanceof Ae||void 0}))}function p(e){return e instanceof gn?e.getValue():e instanceof Qe&&\"void\"==e.operator&&e.expression instanceof gn?void 0:e}function g(e,n){return e.is_undefined||e instanceof En||e instanceof Qe&&\"void\"==e.operator&&!e.expression.has_side_effects(n)}(t=function(e,n){e.DEFMETHOD(\"is_truthy\",n)})(se,ie),t(on,J),t(rn,function(){return\"=\"==this.operator&&this.right.is_truthy()}),t(ke,J),t(an,J),t(wn,J),t(We,function(){return this.tail_node().is_truthy()}),t(_n,function(){var e=this.fixed_value();return e&&e.is_truthy()}),function(e){function t(e){return/strict/.test(e.option(\"pure_getters\"))}se.DEFMETHOD(\"may_throw_on_access\",function(e){return!e.option(\"pure_getters\")||this._dot_throw(e)}),e(se,t),e(xn,J),e(En,J),e(gn,ie),e(on,ie),e(an,function(e){if(!t(e))return!1;for(var n=this.properties.length;0<=--n;)if(this.properties[n].value instanceof De)return!0;return!1}),e(ke,ie),e(en,ie),e(Qe,function(){return\"void\"==this.operator}),e(nn,function(e){return(\"&&\"==this.operator||\"||\"==this.operator)&&(this.left._dot_throw(e)||this.right._dot_throw(e))}),e(rn,function(e){return\"=\"==this.operator&&this.right._dot_throw(e)}),e(tn,function(e){return this.consequent._dot_throw(e)||this.alternative._dot_throw(e)}),e(Xe,function(e){if(!t(e))return!1;var n=this.expression;return n instanceof _n&&(n=n.fixed_value()),!(n instanceof ke&&\"prototype\"==this.property)}),e(We,function(e){return this.tail_node()._dot_throw(e)}),e(_n,function(e){if(this.is_undefined)return!0;if(!t(e))return!1;if(H(this)&&this.is_declared(e))return!1;if(this.is_immutable())return!1;var n=this.fixed_value();return!n||n._dot_throw(e)})}(function(e,n){e.DEFMETHOD(\"_dot_throw\",n)}),r=[\"!\",\"delete\"],a=[\"in\",\"instanceof\",\"==\",\"!=\",\"===\",\"!==\",\"<\",\"<=\",\">=\",\">\"],(i=function(e,n){e.DEFMETHOD(\"is_boolean\",n)})(se,ie),i(Qe,function(){return te(this.operator,r)}),i(nn,function(){return te(this.operator,a)||ee(this.operator)&&this.left.is_boolean()&&this.right.is_boolean()}),i(tn,function(){return this.consequent.is_boolean()&&this.alternative.is_boolean()}),i(rn,function(){return\"=\"==this.operator&&this.right.is_boolean()}),i(We,function(){return this.tail_node().is_boolean()}),i(Bn,J),i(Cn,J),function(e){e(se,ie),e(yn,J);var n=W(\"+ - ~ ++ --\");e(Ke,function(){return n(this.operator)});var t=W(\"- * / % & | ^ << >> >>>\");e(nn,function(e){return t(this.operator)||\"+\"==this.operator&&this.left.is_number(e)&&this.right.is_number(e)}),e(rn,function(e){return t(this.operator.slice(0,-1))||\"=\"==this.operator&&this.right.is_number(e)}),e(We,function(e){return this.tail_node().is_number(e)}),e(tn,function(e){return this.consequent.is_number(e)&&this.alternative.is_number(e)})}(function(e,n){e.DEFMETHOD(\"is_number\",n)}),(s=function(e,n){e.DEFMETHOD(\"is_string\",n)})(se,ie),s(bn,J),s(Qe,function(){return\"typeof\"==this.operator}),s(nn,function(e){return\"+\"==this.operator&&(this.left.is_string(e)||this.right.is_string(e))}),s(rn,function(e){return(\"=\"==this.operator||\"+=\"==this.operator)&&this.right.is_string(e)}),s(We,function(e){return this.tail_node().is_string(e)}),s(tn,function(e){return this.consequent.is_string(e)&&this.alternative.is_string(e)});var c,ee=W(\"&& ||\"),f=W(\"delete ++ --\");function ne(e,n){return n instanceof Ke&&f(n.operator)?n.expression:n instanceof rn&&n.left===e?e:void 0}function x(e,n){return e.print_to_string().length>n.print_to_string().length?n:e}function I(e,n,t){return($(e)?function(e,n){return x(X(le,e,{body:e}),X(le,n,{body:n})).body}:x)(n,t)}function d(e){for(var n in e)e[n]=W(e[n])}c=function(e,n){e.DEFMETHOD(\"_find_defs\",n)},se.DEFMETHOD(\"resolve_defines\",function(e){if(e.option(\"global_defs\")){var n=this._find_defs(e,\"\");if(n){for(var t,i=this,r=0;t=i,(i=e.parent(r++))instanceof Ge&&i.expression===t;);if(!ne(t,i))return n;e.warn(\"global_defs \"+this.print_to_string()+\" redefined [{file}:{line},{col}]\",this.start)}}}),c(se,L),c(Xe,function(e,n){return this.expression._find_defs(e,\".\"+this.property+n)}),c(_n,function(e,n){if(this.global()){var t,i=e.option(\"global_defs\");if(i&&ae(i,t=this.name+n)){var r=function n(e,t){if(e instanceof se)return X(e.CTOR,t,e);if(Array.isArray(e))return X(on,t,{elements:e.map(function(e){return n(e,t)})});if(e&&\"object\"==typeof e){var i=[];for(var r in e)ae(e,r)&&i.push(X(un,t,{key:r,value:n(e[r],t)}));return X(an,t,{properties:i})}return q(e,t)}(i[t],this),o=e.find_parent(Ee);return r.walk(new Sn(function(e){e instanceof _n&&(e.scope=o,e.thedef=o.def_global(e))})),r}}});var h=[\"constructor\",\"toString\",\"valueOf\"],v={Array:[\"indexOf\",\"join\",\"lastIndexOf\",\"slice\"].concat(h),Boolean:h,Function:h,Number:[\"toExponential\",\"toFixed\",\"toPrecision\"].concat(h),Object:h,RegExp:[\"test\"].concat(h),String:[\"charAt\",\"charCodeAt\",\"concat\",\"indexOf\",\"italics\",\"lastIndexOf\",\"match\",\"replace\",\"search\",\"slice\",\"split\",\"substr\",\"substring\",\"toLowerCase\",\"toUpperCase\",\"trim\"].concat(h)};d(v);var _={Array:[\"isArray\"],Math:[\"abs\",\"acos\",\"asin\",\"atan\",\"ceil\",\"cos\",\"exp\",\"floor\",\"log\",\"round\",\"sin\",\"sqrt\",\"tan\",\"atan2\",\"pow\",\"max\",\"min\"],Number:[\"isFinite\",\"isNaN\"],Object:[\"create\",\"getOwnPropertyDescriptor\",\"getOwnPropertyNames\",\"getPrototypeOf\",\"isExtensible\",\"isFrozen\",\"isSealed\",\"keys\"],String:[\"fromCharCode\"]};d(_),function(e){se.DEFMETHOD(\"evaluate\",function(e){if(!e.option(\"evaluate\"))return this;var n=[],t=this._eval(e,n,1);return n.forEach(function(e){delete e._eval}),!t||t instanceof RegExp?t:\"function\"==typeof t||\"object\"==typeof t?this:t});var n=W(\"! ~ - + void\");se.DEFMETHOD(\"is_constant\",function(){return this instanceof gn?!(this instanceof wn):this instanceof Qe&&this.expression instanceof gn&&n(this.operator)}),e(ue,function(){throw new Error(S(\"Cannot evaluate a statement [{file}:{line},{col}]\",this.start))}),e(ke,C),e(se,C),e(gn,function(){return this.getValue()}),e(Fe,function(e){if(e.option(\"unsafe\")){var n=function(){};return n.node=this,n.toString=function(){return\"function(){}\"},n}return this}),e(on,function(e,n,t){if(e.option(\"unsafe\")){for(var i=[],r=0,o=this.elements.length;r<o;r++){var a=this.elements[r],s=a._eval(e,n,t);if(a===s)return this;i.push(s)}return i}return this}),e(an,function(e,n,t){if(e.option(\"unsafe\")){for(var i={},r=0,o=this.properties.length;r<o;r++){var a=this.properties[r],s=a.key;if(s instanceof cn)s=s.name;else if(s instanceof se&&(s=s._eval(e,n,t))===a.key)return this;if(\"function\"==typeof Object.prototype[s])return this;if(!(a.value instanceof Fe)&&(i[s]=a.value._eval(e,n,t),i[s]===a.value))return this}return i}return this});var r=W(\"! typeof void\");e(Qe,function(e,n,t){var i=this.expression;if(e.option(\"typeofs\")&&\"typeof\"==this.operator&&(i instanceof ke||i instanceof _n&&i.fixed_value()instanceof ke))return\"function\";if(r(this.operator)||t++,(i=i._eval(e,n,t))===this.expression)return this;switch(this.operator){case\"!\":return!i;case\"typeof\":return i instanceof RegExp?this:typeof i;case\"void\":return;case\"~\":return~i;case\"-\":return-i;case\"+\":return+i}return this});var a=W(\"&& || === !==\");e(nn,function(e,n,t){a(this.operator)||t++;var i=this.left._eval(e,n,t);if(i===this.left)return this;var r,o=this.right._eval(e,n,t);if(o===this.right)return this;switch(this.operator){case\"&&\":r=i&&o;break;case\"||\":r=i||o;break;case\"|\":r=i|o;break;case\"&\":r=i&o;break;case\"^\":r=i^o;break;case\"+\":r=i+o;break;case\"*\":r=i*o;break;case\"/\":r=i/o;break;case\"%\":r=i%o;break;case\"-\":r=i-o;break;case\"<<\":r=i<<o;break;case\">>\":r=i>>o;break;case\">>>\":r=i>>>o;break;case\"==\":r=i==o;break;case\"===\":r=i===o;break;case\"!=\":r=i!=o;break;case\"!==\":r=i!==o;break;case\"<\":r=i<o;break;case\"<=\":r=i<=o;break;case\">\":r=o<i;break;case\">=\":r=o<=i;break;default:return this}return isNaN(r)&&e.find_parent(xe)?this:r}),e(tn,function(e,n,t){var i=this.condition._eval(e,n,t);if(i===this.condition)return this;var r=i?this.consequent:this.alternative,o=r._eval(e,n,t);return o===r?this:o}),e(_n,function(e,n,t){var i,r=this.fixed_value();if(!r)return this;if(0<=n.indexOf(r))i=r._eval();else{if(this._eval=C,i=r._eval(e,n,t),delete this._eval,i===r)return this;r._eval=function(){return i},n.push(r)}if(i&&\"object\"==typeof i){var o=this.definition().escaped;if(o&&o<t)return this}return i});var p={Array:Array,Math:Math,Number:Number,Object:Object,String:String},s={Math:[\"E\",\"LN10\",\"LN2\",\"LOG2E\",\"LOG10E\",\"PI\",\"SQRT1_2\",\"SQRT2\"],Number:[\"MAX_VALUE\",\"MIN_VALUE\",\"NaN\",\"NEGATIVE_INFINITY\",\"POSITIVE_INFINITY\"]};d(s),e(Ge,function(e,n,t){if(e.option(\"unsafe\")){var i=this.property;if(i instanceof se&&(i=i._eval(e,n,t))===this.property)return this;var r,o=this.expression;if(H(o)){if(!(s[o.name]||ie)(i))return this;r=p[o.name]}else{if(!(r=o._eval(e,n,t+1))||r===o||!ae(r,i))return this;if(\"function\"==typeof r)switch(i){case\"name\":return r.node.name?r.node.name.name:\"\";case\"length\":return r.node.argnames.length;default:return this}}return r[i]}return this}),e(Ye,function(n,e,t){var i=this.expression;if(n.option(\"unsafe\")&&i instanceof Ge){var r,o=i.property;if(o instanceof se&&(o=o._eval(n,e,t))===i.property)return this;var a=i.expression;if(H(a)){if(!(_[a.name]||ie)(o))return this;r=p[a.name]}else if((r=a._eval(n,e,t+1))===a||!(r&&v[r.constructor.name]||ie)(o))return this;for(var s=[],u=0,c=this.args.length;u<c;u++){var f=this.args[u],l=f._eval(n,e,t);if(f===l)return this;s.push(l)}try{return r[o].apply(r,s)}catch(e){n.warn(\"Error evaluating {code} [{file}:{line},{col}]\",{code:this.print_to_string(),file:this.start.file,line:this.start.line,col:this.start.col})}}return this}),e(Je,C)}(function(e,n){e.DEFMETHOD(\"_eval\",n)}),function(e){function o(e){return X(Qe,e,{operator:\"!\",expression:e})}function r(e,n,t){var i=o(e);if(t){var r=X(le,n,{body:n});return x(i,r)===r?n:i}return x(i,n)}e(se,function(){return o(this)}),e(ue,function(){throw new Error(\"Cannot negate a statement\")}),e(Fe,function(){return o(this)}),e(Qe,function(){return\"!\"==this.operator?this.expression:o(this)}),e(We,function(e){var n=this.expressions.slice();return n.push(n.pop().negate(e)),M(this,n)}),e(tn,function(e,n){var t=this.clone();return t.consequent=t.consequent.negate(e),t.alternative=t.alternative.negate(e),r(this,t,n)}),e(nn,function(e,n){var t=this.clone(),i=this.operator;if(e.option(\"unsafe_comps\"))switch(i){case\"<=\":return t.operator=\">\",t;case\"<\":return t.operator=\">=\",t;case\">=\":return t.operator=\"<\",t;case\">\":return t.operator=\"<=\",t}switch(i){case\"==\":return t.operator=\"!=\",t;case\"!=\":return t.operator=\"==\",t;case\"===\":return t.operator=\"!==\",t;case\"!==\":return t.operator=\"===\",t;case\"&&\":return t.operator=\"||\",t.left=t.left.negate(e,n),t.right=t.right.negate(e),r(this,t,n);case\"||\":return t.operator=\"&&\",t.left=t.left.negate(e,n),t.right=t.right.negate(e),r(this,t,n)}return o(this)})}(function(e,t){e.DEFMETHOD(\"negate\",function(e,n){return t.call(this,e,n)})});var m=W(\"Boolean decodeURI decodeURIComponent Date encodeURI encodeURIComponent Error escape EvalError isFinite isNaN Number Object parseFloat parseInt RangeError ReferenceError String SyntaxError TypeError unescape URIError\");function A(e){return e&&e.aborts()}Ye.DEFMETHOD(\"is_expr_pure\",function(e){if(e.option(\"unsafe\")){var n=this.expression;if(H(n)&&m(n.name))return!0;if(n instanceof Xe&&H(n.expression)&&(_[n.expression.name]||ie)(n.property))return!0}return this.pure||!e.pure_funcs(this)}),se.DEFMETHOD(\"is_call_pure\",ie),Xe.DEFMETHOD(\"is_call_pure\",function(e){if(e.option(\"unsafe\")){var n=this.expression,t=ie;return n instanceof on?t=v.Array:n.is_boolean()?t=v.Boolean:n.is_number(e)?t=v.Number:n instanceof wn?t=v.RegExp:n.is_string(e)?t=v.String:this.may_throw_on_access(e)||(t=v.Object),t(this.property)}}),function(e){function n(e,n){for(var t=e.length;0<=--t;)if(e[t].has_side_effects(n))return!0;return!1}e(se,J),e(he,ie),e(gn,ie),e(mn,ie),e(pe,function(e){return n(this.body,e)}),e(Ye,function(e){return!(this.is_expr_pure(e)||this.expression.is_call_pure(e)&&!this.expression.has_side_effects(e))||n(this.args,e)}),e(qe,function(e){return this.expression.has_side_effects(e)||n(this.body,e)}),e(He,function(e){return this.expression.has_side_effects(e)||n(this.body,e)}),e(Re,function(e){return n(this.body,e)||this.bcatch&&this.bcatch.has_side_effects(e)||this.bfinally&&this.bfinally.has_side_effects(e)}),e(Me,function(e){return this.condition.has_side_effects(e)||this.body&&this.body.has_side_effects(e)||this.alternative&&this.alternative.has_side_effects(e)}),e(ve,function(e){return this.body.has_side_effects(e)}),e(le,function(e){return this.body.has_side_effects(e)}),e(ke,ie),e(nn,function(e){return this.left.has_side_effects(e)||this.right.has_side_effects(e)}),e(rn,J),e(tn,function(e){return this.condition.has_side_effects(e)||this.consequent.has_side_effects(e)||this.alternative.has_side_effects(e)}),e(Ke,function(e){return f(this.operator)||this.expression.has_side_effects(e)}),e(_n,function(e){return!this.is_declared(e)}),e(fn,ie),e(an,function(e){return n(this.properties,e)}),e(sn,function(e){return this.value.has_side_effects(e)}),e(on,function(e){return n(this.elements,e)}),e(Xe,function(e){return this.expression.may_throw_on_access(e)||this.expression.has_side_effects(e)}),e(Ze,function(e){return this.expression.may_throw_on_access(e)||this.expression.has_side_effects(e)||this.property.has_side_effects(e)}),e(We,function(e){return n(this.expressions,e)}),e(Ue,function(e){return n(this.definitions,e)}),e(Ve,function(e){return this.value})}(function(e,n){e.DEFMETHOD(\"has_side_effects\",n)}),function(e){function n(e,n){for(var t=e.length;0<=--t;)if(e[t].may_throw(n))return!0;return!1}e(se,J),e(gn,ie),e(he,ie),e(ke,ie),e(fn,ie),e(mn,ie),e(on,function(e){return n(this.elements,e)}),e(rn,function(e){return!!this.right.may_throw(e)||!(!e.has_directive(\"use strict\")&&\"=\"==this.operator&&this.left instanceof _n)&&this.left.may_throw(e)}),e(nn,function(e){return this.left.may_throw(e)||this.right.may_throw(e)}),e(pe,function(e){return n(this.body,e)}),e(Ye,function(e){return!!n(this.args,e)||!this.is_expr_pure(e)&&(!!this.expression.may_throw(e)||(!(this.expression instanceof ke)||n(this.expression.body,e)))}),e(He,function(e){return this.expression.may_throw(e)||n(this.body,e)}),e(tn,function(e){return this.condition.may_throw(e)||this.consequent.may_throw(e)||this.alternative.may_throw(e)}),e(Ue,function(e){return n(this.definitions,e)}),e(Xe,function(e){return this.expression.may_throw_on_access(e)||this.expression.may_throw(e)}),e(Me,function(e){return this.condition.may_throw(e)||this.body&&this.body.may_throw(e)||this.alternative&&this.alternative.may_throw(e)}),e(ve,function(e){return this.body.may_throw(e)}),e(an,function(e){return n(this.properties,e)}),e(sn,function(e){return this.value.may_throw(e)}),e(Te,function(e){return this.value&&this.value.may_throw(e)}),e(We,function(e){return n(this.expressions,e)}),e(le,function(e){return this.body.may_throw(e)}),e(Ze,function(e){return this.expression.may_throw_on_access(e)||this.expression.may_throw(e)||this.property.may_throw(e)}),e(qe,function(e){return this.expression.may_throw(e)||n(this.body,e)}),e(_n,function(e){return!this.is_declared(e)}),e(Re,function(e){return this.bcatch?this.bcatch.may_throw(e):n(this.body,e)||this.bfinally&&this.bfinally.may_throw(e)}),e(Ke,function(e){return!(\"typeof\"==this.operator&&this.expression instanceof _n)&&this.expression.may_throw(e)}),e(Ve,function(e){return!!this.value&&this.value.may_throw(e)})}(function(e,n){e.DEFMETHOD(\"may_throw\",n)}),function(e){function n(e){for(var n=e.length;0<=--n;)if(!e[n].is_constant_expression())return!1;return!0}e(se,ie),e(gn,J),e(ke,function(i){var r=this,o=!0;return r.walk(new Sn(function(e){if(!o)return!0;if(e instanceof _n){if(r.inlined)return!(o=!1);var n=e.definition();if(te(n,r.enclosed)&&!r.variables.has(n.name)){if(i){var t=i.find_variable(e);if(n.undeclared?!t:t===n)return o=\"f\",!0}o=!1}return!0}})),o}),e(Ke,function(){return this.expression.is_constant_expression()}),e(nn,function(){return this.left.is_constant_expression()&&this.right.is_constant_expression()}),e(on,function(){return n(this.elements)}),e(an,function(){return n(this.properties)}),e(sn,function(){return this.value.is_constant_expression()})}(function(e,n){e.DEFMETHOD(\"is_constant_expression\",n)}),function(e){function n(){var e=this.body.length;return 0<e&&A(this.body[e-1])}e(ue,B),e(Be,C),e(de,n),e(je,n),e(Me,function(){return this.alternative&&A(this.body)&&A(this.alternative)&&this})}(function(e,n){e.DEFMETHOD(\"aborts\",n)}),e(fe,function(e,n){return n.has_directive(e.value)!==e?X(he,e):e}),e(ce,function(e,n){return n.option(\"drop_debugger\")?X(he,e):e}),e(ve,function(e,n){return e.body instanceof $e&&n.loopcontrol_target(e.body)===e.body?X(he,e):0==e.label.references.length?e.body:e}),e(pe,function(e,n){return u(e.body,n),e}),e(de,function(e,n){switch(u(e.body,n),e.body.length){case 1:return e.body[0];case 0:return X(he,e)}return e}),e(ke,function(e,n){return u(e.body,n),n.option(\"side_effects\")&&1==e.body.length&&e.body[0]===n.has_directive(\"use strict\")&&(e.body.length=0),e}),Ae.DEFMETHOD(\"drop_unused\",function(b){if(b.option(\"unused\")&&!b.has_directive(\"use asm\")){var y=this;if(!y.uses_eval&&!y.uses_with){var w=!(y instanceof Ee)||b.toplevel.funcs,x=!(y instanceof Ee)||b.toplevel.vars,A=/keep_assign/.test(b.option(\"unused\"))?ie:function(e,n){var t;if(e instanceof rn&&(e.write_only||\"=\"==e.operator)?t=e.left:e instanceof Ke&&e.write_only&&(t=e.expression),/strict/.test(b.option(\"pure_getters\")))for(;t instanceof Ge&&!t.expression.may_throw_on_access(b);)t instanceof Ze&&n.unshift(t.property),t=t.expression;return t},s=[],E=Object.create(null),k=Object.create(null),u=Object.create(null),c=Object.create(null);y instanceof Ee&&b.top_retain&&y.variables.each(function(e){!b.top_retain(e)||e.id in E||(E[e.id]=!0,s.push(e))});var D=new O,i=new O,F=this,f=new Sn(function(e,n){if(e!==y){if(e instanceof Ce){var t=e.name.definition();return w||F!==y||t.id in E||(E[t.id]=!0,s.push(t)),i.add(t.id,e),!0}return e instanceof pn&&F===y&&D.add(e.definition().id,e),e instanceof Ue&&F===y?(e.definitions.forEach(function(e){var n=e.name.definition();e.name instanceof ln&&D.add(n.id,e),x||n.id in E||(E[n.id]=!0,s.push(n)),e.value&&(i.add(n.id,e.value),e.value.has_side_effects(b)&&e.value.walk(f),n.chained||e.name.fixed_value()!==e.value||(k[n.id]=e))}),!0):r(e,n)}});y.walk(f),f=new Sn(r);for(var e=0;e<s.length;e++){var n=i.get(s[e].id);n&&n.forEach(function(e){e.walk(f)})}var C=new Xn(function(a,e,n){var t=C.parent();if(x){var i=[];if((l=A(a,i))instanceof _n){var r=(s=l.definition()).id in E,o=null;if(a instanceof rn?(!r||a.left===l&&s.id in k&&k[s.id]!==a)&&(o=a.right):r||(o=X(yn,a,{value:0})),o)return i.push(o),Z(t,a,M(a,i.map(function(e){return e.transform(C)})))}}if(F===y){var s;if(a instanceof Fe&&a.name&&!b.option(\"keep_fnames\"))(s=a.name.definition()).id in E&&!(1<s.orig.length)||(a.name=null);if(a instanceof ke&&!(a instanceof De))for(var u=!b.option(\"keep_fargs\"),c=a.argnames,f=c.length;0<=--f;){var l;(l=c[f]).definition().id in E?u=!1:(l.__unused=!0,u&&(c.pop(),b[l.unreferenced()?\"warn\":\"info\"](\"Dropping unused function argument {name} [{file}:{line},{col}]\",g(l))))}if(w&&a instanceof Ce&&a!==y)if(!((s=a.name.definition()).id in E))return b[a.name.unreferenced()?\"warn\":\"info\"](\"Dropping unused function {name} [{file}:{line},{col}]\",g(a.name)),s.eliminated++,X(he,a);if(a instanceof Ue&&!(t instanceof we&&t.init===a)){var p=[],d=[],h=[],v=[];switch(a.definitions.forEach(function(e){e.value&&(e.value=e.value.transform(C));var n=e.name.definition();if(!x||n.id in E){if(e.value&&n.id in k&&k[n.id]!==e&&(e.value=e.value.drop_side_effect_free(b)),e.name instanceof ln){var t=D.get(n.id);if(1<t.length&&(!e.value||n.orig.indexOf(e.name)>n.eliminated)){if(b.warn(\"Dropping duplicated definition of variable {name} [{file}:{line},{col}]\",g(e.name)),e.value){var i=X(_n,e.name,e.name);n.references.push(i);var r=X(rn,e,{operator:\"=\",left:i,right:e.value});k[n.id]===e&&(k[n.id]=r),v.push(r.transform(C))}return T(t,e),void n.eliminated++}}e.value?(0<v.length&&(0<h.length?(v.push(e.value),e.value=M(e.value,v)):p.push(X(le,a,{body:M(a,v)})),v=[]),h.push(e)):d.push(e)}else if(n.orig[0]instanceof vn){(o=e.value&&e.value.drop_side_effect_free(b))&&v.push(o),e.value=null,d.push(e)}else{var o;(o=e.value&&e.value.drop_side_effect_free(b))?(b.warn(\"Side effects in initialization of unused variable {name} [{file}:{line},{col}]\",g(e.name)),v.push(o)):b[e.name.unreferenced()?\"warn\":\"info\"](\"Dropping unused variable {name} [{file}:{line},{col}]\",g(e.name)),n.eliminated++}}),(0<d.length||0<h.length)&&(a.definitions=d.concat(h),p.push(a)),0<v.length&&p.push(X(le,a,{body:M(a,v)})),p.length){case 0:return n?re.skip:X(he,a);case 1:return p[0];default:return n?re.splice(p):X(de,a,{body:p})}}if(a instanceof ye)return e(a,this),a.init instanceof de&&(_=a.init,a.init=_.body.pop(),_.body.push(a)),a.init instanceof le?a.init=a.init.body:j(a.init)&&(a.init=null),_?n?re.splice(_.body):_:a;if(a instanceof ve&&a.body instanceof ye){if(e(a,this),a.body instanceof de){var _=a.body;return a.body=_.body.pop(),_.body.push(a),n?re.splice(_.body):_}return a}if(a instanceof Ae){var m=F;return e(F=a,this),F=m,a}}function g(e){return{name:e.name,file:e.start.file,line:e.start.line,col:e.start.col}}});y.transform(C)}}function l(e,n,t){e.id in E||(n&&t?(E[e.id]=!0,s.push(e)):(u[e.id]=n,c[e.id]=t))}function r(e,n){var t,i=[],r=A(e,i);if(r instanceof _n&&y.variables.get(r.name)===(t=r.definition())){if(i.forEach(function(e){e.walk(f)}),e instanceof rn)if(e.right.walk(f),e.left===r)t.chained||r.fixed_value()!==e.right||(k[t.id]=e),e.write_only||l(t,!0,c[t.id]);else{var o=r.fixed_value();o&&o.is_constant()||l(t,u[t.id],!0)}return!0}if(e instanceof _n)return(t=e.definition()).id in E||(E[t.id]=!0,s.push(t)),!0;if(e instanceof Ae){var a=F;return F=e,n(),F=a,!0}}}),Ae.DEFMETHOD(\"hoist_declarations\",function(r){var o=this;if(r.has_directive(\"use asm\"))return o;var a=r.option(\"hoist_funs\"),s=r.option(\"hoist_vars\");if(a||s){var u=[],c=[],f=new O,l=0,n=0;o.walk(new Sn(function(e){return e instanceof Ae&&e!==o||(e instanceof Le?(++n,!0):void 0)})),s=s&&1<n;var p=new Xn(function(e){if(e!==o){if(e instanceof fe)return u.push(e),X(he,e);if(a&&e instanceof Ce&&(p.parent()===o||!r.has_directive(\"use strict\")))return c.push(e),X(he,e);if(s&&e instanceof Le){e.definitions.forEach(function(e){f.set(e.name.name,e),++l});var n=e.to_assignments(r),t=p.parent();if(t instanceof we&&t.init===e){if(null==n){var i=e.definitions[0].name;return X(_n,i,i)}return n}return t instanceof ye&&t.init===e?n:n?X(le,e,{body:n}):X(he,e)}if(e instanceof Ae)return e}});if(o=o.transform(p),0<l){var t=[];if(f.each(function(n,e){o instanceof ke&&V(function(e){return e.name==n.name.name},o.argnames)?f.del(e):((n=n.clone()).value=null,t.push(n),f.set(e,n))}),0<t.length){for(var e=0;e<o.body.length;){if(o.body[e]instanceof le){var i,d,h=o.body[e].body;if(h instanceof rn&&\"=\"==h.operator&&(i=h.left)instanceof cn&&f.has(i.name)){if((v=f.get(i.name)).value)break;v.value=h.right,T(t,v),t.push(v),o.body.splice(e,1);continue}if(h instanceof We&&(d=h.expressions[0])instanceof rn&&\"=\"==d.operator&&(i=d.left)instanceof cn&&f.has(i.name)){var v;if((v=f.get(i.name)).value)break;v.value=d.right,T(t,v),t.push(v),o.body[e].body=M(h,h.expressions.slice(1));continue}}if(o.body[e]instanceof he)o.body.splice(e,1);else{if(!(o.body[e]instanceof de))break;var _=[e,1].concat(o.body[e].body);o.body.splice.apply(o.body,_)}}t=X(Le,o,{definitions:t}),c.push(t)}}o.body=u.concat(c,o.body)}return o}),Ae.DEFMETHOD(\"var_names\",function(){var t=this._var_names;return t||(this._var_names=t=Object.create(null),this.enclosed.forEach(function(e){t[e.name]=!0}),this.variables.each(function(e,n){t[n]=!0})),t}),Ae.DEFMETHOD(\"make_var_name\",function(e){for(var n=this.var_names(),t=e=e.replace(/(?:^[^a-z_$]|[^a-z0-9_$])/gi,\"_\"),i=0;n[t];i++)t=e+\"$\"+i;return n[t]=!0,t}),Ae.DEFMETHOD(\"hoist_properties\",function(e){var u=this;if(!e.option(\"hoist_props\")||e.has_directive(\"use asm\"))return u;var i=u instanceof Ee&&e.top_retain||ie,c=Object.create(null);return u.transform(new Xn(function(r,e){var n;if(r instanceof Ve&&((s=r.name).scope===u&&1!=(t=s.definition()).escaped&&!t.single_use&&!t.direct_access&&!i(t)&&(n=s.fixed_value())===r.value&&n instanceof an)){e(r,this);var o=new O,a=[];return n.properties.forEach(function(e){var n,t,i;a.push(X(Ve,r,{name:(n=e.key,t=X(s.CTOR,s,{name:u.make_var_name(s.name+\"_\"+n),scope:u}),i=u.def_variable(t),o.set(n,i),u.enclosed.push(i),t),value:e.value}))}),c[t.id]=o,re.splice(a)}if(r instanceof Ge&&r.expression instanceof _n&&(o=c[r.expression.definition().id])){var s,t=o.get(p(r.property));return(s=X(_n,r,{name:t.name,scope:r.expression.scope,thedef:t})).reference({}),s}}))}),function(e){function a(e,n,t){var i=e.length;if(!i)return null;for(var r=[],o=!1,a=0;a<i;a++){var s=e[a].drop_side_effect_free(n,t);o|=s!==e[a],s&&(r.push(s),t=!1)}return o?r.length?r:null:e}e(se,C),e(gn,B),e(mn,B),e(Ye,function(n,e){if(!this.is_expr_pure(n)){if(this.expression.is_call_pure(n)){var t=this.args.slice();return t.unshift(this.expression.expression),(t=a(t,n,e))&&M(this,t)}if(this.expression instanceof Fe&&(!this.expression.name||!this.expression.name.definition().references.length)){var i=this.clone(),r=i.expression;return r.process_expression(!1,n),r.walk(new Sn(function(e){return e instanceof Te&&e.value?(e.value=e.value.drop_side_effect_free(n),!0):e instanceof Ae&&e!==r||void 0})),i}return this}this.pure&&n.warn(\"Dropping __PURE__ call [{file}:{line},{col}]\",this.start);var o=a(this.args,n,e);return o&&M(this,o)}),e(De,B),e(Fe,B),e(nn,function(e,n){var t=this.right.drop_side_effect_free(e);if(!t)return this.left.drop_side_effect_free(e,n);if(ee(this.operator)){if(t===this.right)return this;var i=this.clone();return i.right=t,i}var r=this.left.drop_side_effect_free(e,n);return r?M(this,[r,t]):this.right.drop_side_effect_free(e,n)}),e(rn,function(e){var n=this.left;return n.has_side_effects(e)||e.has_directive(\"use strict\")&&n instanceof Ge&&n.expression.is_constant()?this:(this.write_only=!0,K(n).is_constant_expression(e.find_parent(Ae))?this.right.drop_side_effect_free(e):this)}),e(tn,function(e){var n=this.consequent.drop_side_effect_free(e),t=this.alternative.drop_side_effect_free(e);if(n===this.consequent&&t===this.alternative)return this;if(!n)return t?X(nn,this,{operator:\"||\",left:this.condition,right:t}):this.condition.drop_side_effect_free(e);if(!t)return X(nn,this,{operator:\"&&\",left:this.condition,right:n});var i=this.clone();return i.consequent=n,i.alternative=t,i}),e(Ke,function(e,n){if(f(this.operator))return this.write_only=!this.expression.has_side_effects(e),this;if(\"typeof\"==this.operator&&this.expression instanceof _n)return null;var t=this.expression.drop_side_effect_free(e,n);return n&&t&&N(t)?t===this.expression&&\"!\"==this.operator?this:t.negate(e,n):t}),e(_n,function(e){return this.is_declared(e)?null:this}),e(an,function(e,n){var t=a(this.properties,e,n);return t&&M(this,t)}),e(sn,function(e,n){return this.value.drop_side_effect_free(e,n)}),e(on,function(e,n){var t=a(this.elements,e,n);return t&&M(this,t)}),e(Xe,function(e,n){return this.expression.may_throw_on_access(e)?this:this.expression.drop_side_effect_free(e,n)}),e(Ze,function(e,n){if(this.expression.may_throw_on_access(e))return this;var t=this.expression.drop_side_effect_free(e,n);if(!t)return this.property.drop_side_effect_free(e,n);var i=this.property.drop_side_effect_free(e);return i?M(this,[t,i]):t}),e(We,function(e){var n=this.tail_node(),t=n.drop_side_effect_free(e);if(t===n)return this;var i=this.expressions.slice(0,-1);return t&&i.push(t),M(this,i)})}(function(e,n){e.DEFMETHOD(\"drop_side_effect_free\",n)}),e(le,function(e,n){if(n.option(\"side_effects\")){var t=e.body,i=t.drop_side_effect_free(n,!0);if(!i)return n.warn(\"Dropping side-effect-free statement [{file}:{line},{col}]\",e.start),X(he,e);if(i!==t)return X(le,e,{body:i})}return e}),e(be,function(e,n){return n.option(\"loops\")?X(ye,e,e).optimize(n):e}),e(ge,function(n,e){if(!e.option(\"loops\"))return n;var t=n.condition.is_truthy()||n.condition.tail_node().evaluate(e);if(!(t instanceof se)){if(t)return X(ye,n,{body:X(de,n.body,{body:[n.body,X(le,n.condition,{body:n.condition})]})}).optimize(e);var i=!1,r=new Sn(function(e){return!!(e instanceof Ae||i)||(e instanceof Oe&&r.loopcontrol_target(e)===n?i=!0:void 0)}),o=e.parent();if((o instanceof ve?o:n).walk(r),!i)return X(de,n.body,{body:[n.body,X(le,n.condition,{body:n.condition})]}).optimize(e)}return n.body instanceof le?X(ye,n,{condition:M(n.condition,[n.body.body,n.condition]),body:X(he,n)}).optimize(e):n}),e(ye,function(e,n){if(!n.option(\"loops\"))return e;if(n.option(\"side_effects\")&&e.init&&(e.init=e.init.drop_side_effect_free(n)),e.condition){var t=e.condition.evaluate(n);if(!(t instanceof se))if(t)e.condition=null;else if(!n.option(\"dead_code\")){var i=e.condition;e.condition=q(t,e.condition),e.condition=x(e.condition.transform(n),i)}if(t instanceof se&&(t=e.condition.is_truthy()||e.condition.tail_node().evaluate(n)),t)!e.condition||t instanceof se||(e.body=X(de,e.body,{body:[X(le,e.condition,{body:e.condition}),e.body]}),e.condition=null);else if(n.option(\"dead_code\")){var r=[];return w(n,e.body,r),e.init instanceof ue?r.push(e.init):e.init&&r.push(X(le,e.init,{body:e.init})),r.push(X(le,e.condition,{body:e.condition})),X(de,e,{body:r}).optimize(n)}}return function n(t,i){var e=t.body instanceof de?t.body.body[0]:t.body;if(i.option(\"dead_code\")&&o(e)){var r=[];return t.init instanceof ue?r.push(t.init):t.init&&r.push(X(le,t.init,{body:t.init})),t.condition&&r.push(X(le,t.condition,{body:t.condition})),w(i,t.body,r),X(de,t,{body:r})}return e instanceof Me&&(o(e.body)?(t.condition?t.condition=X(nn,t.condition,{left:t.condition,operator:\"&&\",right:e.condition.negate(i)}):t.condition=e.condition.negate(i),a(e.alternative)):o(e.alternative)&&(t.condition?t.condition=X(nn,t.condition,{left:t.condition,operator:\"&&\",right:e.condition}):t.condition=e.condition,a(e.body))),t;function o(e){return e instanceof $e&&i.loopcontrol_target(e)===i.self()}function a(e){e=b(e),t.body instanceof de?(t.body=t.body.clone(),t.body.body=e.concat(t.body.body.slice(1)),t.body=t.body.transform(i)):t.body=X(de,t.body,{body:e}).transform(i),t=n(t,i)}}(e,n)}),e(Me,function(e,n){if(j(e.alternative)&&(e.alternative=null),!n.option(\"conditionals\"))return e;var t=e.condition.evaluate(n);if(!(n.option(\"dead_code\")||t instanceof se)){var i=e.condition;e.condition=q(t,i),e.condition=x(e.condition.transform(n),i)}if(n.option(\"dead_code\")){if(t instanceof se&&(t=e.condition.is_truthy()||e.condition.tail_node().evaluate(n)),!t){n.warn(\"Condition always false [{file}:{line},{col}]\",e.condition.start);var r=[];return w(n,e.body,r),r.push(X(le,e.condition,{body:e.condition})),e.alternative&&r.push(e.alternative),X(de,e,{body:r}).optimize(n)}if(!(t instanceof se)){n.warn(\"Condition always true [{file}:{line},{col}]\",e.condition.start);r=[];return e.alternative&&w(n,e.alternative,r),r.push(X(le,e.condition,{body:e.condition})),r.push(e.body),X(de,e,{body:r}).optimize(n)}}var o=e.condition.negate(n),a=e.condition.print_to_string().length,s=o.print_to_string().length,u=s<a;if(e.alternative&&u){u=!1,e.condition=o;var c=e.body;e.body=e.alternative||X(he,e),e.alternative=c}if(j(e.body)&&j(e.alternative))return X(le,e.condition,{body:e.condition.clone()}).optimize(n);if(e.body instanceof le&&e.alternative instanceof le)return X(le,e,{body:X(tn,e,{condition:e.condition,consequent:e.body.body,alternative:e.alternative.body})}).optimize(n);if(j(e.alternative)&&e.body instanceof le)return a===s&&!u&&e.condition instanceof nn&&\"||\"==e.condition.operator&&(u=!0),u?X(le,e,{body:X(nn,e,{operator:\"||\",left:o,right:e.body.body})}).optimize(n):X(le,e,{body:X(nn,e,{operator:\"&&\",left:e.condition,right:e.body.body})}).optimize(n);if(e.body instanceof he&&e.alternative instanceof le)return X(le,e,{body:X(nn,e,{operator:\"||\",left:e.condition,right:e.alternative.body})}).optimize(n);if(e.body instanceof Se&&e.alternative instanceof Se&&e.body.TYPE==e.alternative.TYPE)return X(e.body.CTOR,e,{value:X(tn,e,{condition:e.condition,consequent:e.body.value||X(En,e.body),alternative:e.alternative.value||X(En,e.alternative)}).transform(n)}).optimize(n);if(e.body instanceof Me&&!e.body.alternative&&!e.alternative&&(e=X(Me,e,{condition:X(nn,e.condition,{operator:\"&&\",left:e.condition,right:e.body.condition}),body:e.body.body,alternative:null})),A(e.body)&&e.alternative){var f=e.alternative;return e.alternative=null,X(de,e,{body:[e,f]}).optimize(n)}if(A(e.alternative)){r=e.body;return e.body=e.alternative,e.condition=u?o:e.condition.negate(n),e.alternative=null,X(de,e,{body:[e,r]}).optimize(n)}return e}),e(qe,function(n,t){if(!t.option(\"switches\"))return n;var e,i=n.expression.evaluate(t);if(!(i instanceof se)){var r=n.expression;n.expression=q(i,r),n.expression=x(n.expression.transform(t),r)}if(!t.option(\"dead_code\"))return n;i instanceof se&&(i=n.expression.tail_node().evaluate(t));for(var o,a,s=[],u=[],c=0,f=n.body.length;c<f&&!a;c++){if((e=n.body[c])instanceof Ne)o?g(e,u[u.length-1]):o=e;else if(!(i instanceof se)){if(!((_=e.expression.evaluate(t))instanceof se)&&_!==i){g(e,u[u.length-1]);continue}if(_ instanceof se&&(_=e.expression.tail_node().evaluate(t)),_===i&&(a=e,o)){var l=u.indexOf(o);u.splice(l,1),g(o,u[l-1]),o=null}}if(A(e)){var p=u[u.length-1];A(p)&&p.body.length==e.body.length&&X(de,p,p).equivalent_to(X(de,e,e))&&(p.body=[])}u.push(e)}for(;c<f;)g(n.body[c++],u[u.length-1]);for(0<u.length&&(u[0].body=s.concat(u[0].body)),n.body=u;e=u[u.length-1];){var d=e.body[e.body.length-1];if(d instanceof $e&&t.loopcontrol_target(d)===n&&e.body.pop(),e.body.length||e instanceof He&&(o||e.expression.has_side_effects(t)))break;u.pop()===o&&(o=null)}if(0==u.length)return X(de,n,{body:s.concat(X(le,n.expression,{body:n.expression}))}).optimize(t);if(1==u.length&&(u[0]===a||u[0]===o)){var h=!1,v=new Sn(function(e){if(h||e instanceof ke||e instanceof le)return!0;e instanceof $e&&v.loopcontrol_target(e)===n&&(h=!0)});if(n.walk(v),!h){var _,m=u[0].body.slice();return(_=u[0].expression)&&m.unshift(X(le,_,{body:_})),m.unshift(X(le,n.expression,{body:n.expression})),X(de,n,{body:m}).optimize(t)}}return n;function g(e,n){n&&!A(n)?n.body=n.body.concat(e.body):w(t,e,s)}}),e(Re,function(e,n){if(u(e.body,n),e.bcatch&&e.bfinally&&oe(e.bfinally.body,j)&&(e.bfinally=null),n.option(\"dead_code\")&&oe(e.body,j)){var t=[];return e.bcatch&&(w(n,e.bcatch,t),t.forEach(function(e){e instanceof Ue&&e.definitions.forEach(function(e){var n=e.name.definition().redefined();n&&(e.name=e.name.clone(),e.name.thedef=n)})})),e.bfinally&&(t=t.concat(e.bfinally.body)),X(de,e,{body:t}).optimize(n)}return e}),Ue.DEFMETHOD(\"remove_initializers\",function(){this.definitions.forEach(function(e){e.value=null})}),Ue.DEFMETHOD(\"to_assignments\",function(e){var i=e.option(\"reduce_vars\"),n=this.definitions.reduce(function(e,n){if(n.value){var t=X(_n,n.name,n.name);e.push(X(rn,n,{operator:\"=\",left:t,right:n.value})),i&&(t.definition().fixed=!1)}return(n=n.name.definition()).eliminated++,n.replaced--,e},[]);return 0==n.length?null:M(this,n)}),e(Ue,function(e,n){return 0==e.definitions.length?X(he,e):e}),e(Ye,function(s,r){var e=s.expression,p=e;r.option(\"reduce_vars\")&&p instanceof _n&&(p=p.fixed_value());var n=p instanceof ke;if(r.option(\"unused\")&&n&&!p.uses_arguments&&!p.uses_eval){for(var t=0,i=0,o=0,a=s.args.length;o<a;o++){var u=o>=p.argnames.length;if(u||p.argnames[o].__unused){if(d=s.args[o].drop_side_effect_free(r))s.args[t++]=d;else if(!u){s.args[t++]=X(yn,s.args[o],{value:0});continue}}else s.args[t++]=s.args[o];i=t}s.args.length=i}if(r.option(\"unsafe\"))if(H(e))switch(e.name){case\"Array\":if(1!=s.args.length)return X(on,s,{elements:s.args}).optimize(r);break;case\"Object\":if(0==s.args.length)return X(an,s,{properties:[]});break;case\"String\":if(0==s.args.length)return X(bn,s,{value:\"\"});if(s.args.length<=1)return X(nn,s,{left:s.args[0],operator:\"+\",right:X(bn,s,{value:\"\"})}).optimize(r);break;case\"Number\":if(0==s.args.length)return X(yn,s,{value:0});if(1==s.args.length)return X(Qe,s,{expression:s.args[0],operator:\"+\"}).optimize(r);case\"Boolean\":if(0==s.args.length)return X(Cn,s);if(1==s.args.length)return X(Qe,s,{expression:X(Qe,s,{expression:s.args[0],operator:\"!\"}),operator:\"!\"}).optimize(r);break;case\"RegExp\":var c=[];if(oe(s.args,function(e){var n=e.evaluate(r);return c.unshift(n),e!==n}))try{return I(r,s,X(wn,s,{value:RegExp.apply(RegExp,c)}))}catch(e){r.warn(\"Error converting {expr} [{file}:{line},{col}]\",{expr:s.print_to_string(),file:s.start.file,line:s.start.line,col:s.start.col})}}else if(e instanceof Xe)switch(e.property){case\"toString\":if(0==s.args.length&&!e.expression.may_throw_on_access(r))return X(nn,s,{left:X(bn,s,{value:\"\"}),operator:\"+\",right:e.expression}).optimize(r);break;case\"join\":var f;if(e.expression instanceof on)if(!(0<s.args.length&&(f=s.args[0].evaluate(r))===s.args[0])){var l,d,h=[],v=[];return e.expression.elements.forEach(function(e){var n=e.evaluate(r);n!==e?v.push(n):(0<v.length&&(h.push(X(bn,s,{value:v.join(f)})),v.length=0),h.push(e))}),0<v.length&&h.push(X(bn,s,{value:v.join(f)})),0==h.length?X(bn,s,{value:\"\"}):1==h.length?h[0].is_string(r)?h[0]:X(nn,h[0],{operator:\"+\",left:X(bn,s,{value:\"\"}),right:h[0]}):\"\"==f?(l=h[0].is_string(r)||h[1].is_string(r)?h.shift():X(bn,s,{value:\"\"}),h.reduce(function(e,n){return X(nn,n,{operator:\"+\",left:e,right:n})},l).optimize(r)):((d=s.clone()).expression=d.expression.clone(),d.expression.expression=d.expression.expression.clone(),d.expression.expression.elements=h,I(r,s,d))}break;case\"charAt\":if(e.expression.is_string(r)){var _=s.args[0],m=_?_.evaluate(r):0;if(m!==_)return X(Ze,e,{expression:e.expression,property:q(0|m,_||e)}).optimize(r)}break;case\"apply\":if(2==s.args.length&&s.args[1]instanceof on)return(k=s.args[1].elements.slice()).unshift(s.args[0]),X(Ye,s,{expression:X(Xe,e,{expression:e.expression,property:\"call\"}),args:k}).optimize(r);break;case\"call\":var g=e.expression;if(g instanceof _n&&(g=g.fixed_value()),g instanceof ke&&!g.contains_this())return M(this,[s.args[0],X(Ye,s,{expression:e.expression,args:s.args.slice(1)})]).optimize(r)}if(r.option(\"unsafe_Function\")&&H(e)&&\"Function\"==e.name){if(0==s.args.length)return X(Fe,s,{argnames:[],body:[]});if(oe(s.args,function(e){return e instanceof bn}))try{var b=Gn(A=\"n(function(\"+s.args.slice(0,-1).map(function(e){return e.value}).join(\",\")+\"){\"+s.args[s.args.length-1].value+\"})\"),y={ie8:r.option(\"ie8\")};b.figure_out_scope(y);var w,x=new et(r.options);(b=b.transform(x)).figure_out_scope(y),b.compute_char_frequency(y),b.mangle_names(y),b.walk(new Sn(function(e){return!!w||(e instanceof ke?(w=e,!0):void 0)}));var A=Qn();return de.prototype._codegen.call(w,w,A),s.args=[X(bn,s,{value:w.argnames.map(function(e){return e.print_to_string()}).join(\",\")}),X(bn,s.args[s.args.length-1],{value:A.get().replace(/^\\{|\\}$/g,\"\")})],s}catch(e){if(!(e instanceof Hn))throw e;r.warn(\"Error parsing code passed to new Function [{file}:{line},{col}]\",s.args[s.args.length-1].start),r.warn(e.toString())}}var E=n&&p.body[0];if(r.option(\"inline\")&&E instanceof Te&&(!(F=E.value)||F.is_constant_expression())){var k=s.args.concat(F||X(En,s));return M(s,k).optimize(r)}if(n){var D,F,C,B,S=-1;if(r.option(\"inline\")&&!p.uses_arguments&&!p.uses_eval&&!(p.name&&p instanceof Fe)&&(F=function(e){var n=p.body.length;if(r.option(\"inline\")<3)return 1==n&&$(e);e=null;for(var t=0;t<n;t++){var i=p.body[t];if(i instanceof Le){if(e&&!oe(i.definitions,function(e){return!e.value}))return!1}else{if(i instanceof he)continue;if(e)return!1;e=i}}return $(e)}(E))&&(e===p||r.option(\"unused\")&&1==(D=e.definition()).references.length&&!P(r,D)&&p.is_constant_expression(e.scope))&&!s.pure&&!p.contains_this()&&function(){var e=Object.create(null);do{if((C=r.parent(++S))instanceof Ie)e[C.argname.name]=!0;else if(C instanceof _e)B=[];else if(C instanceof _n&&C.fixed_value()instanceof Ae)return!1}while(!(C instanceof Ae));var n=!(C instanceof Ee)||r.toplevel.vars,t=r.option(\"inline\");return!(!function(e,n){for(var t=p.body.length,i=0;i<t;i++){var r=p.body[i];if(r instanceof Le){if(!n)return!1;for(var o=r.definitions.length;0<=--o;){var a=r.definitions[o].name;if(e[a.name]||R(a.name)||C.var_names()[a.name])return!1;B&&B.push(a.definition())}}}return!0}(e,3<=t&&n)||!function(e,n){for(var t=0,i=p.argnames.length;t<i;t++){var r=p.argnames[t];if(!r.__unused){if(!n||e[r.name]||R(r.name)||C.var_names()[r.name])return!1;B&&B.push(r.definition())}}return!0}(e,2<=t&&n)||B&&0!=B.length&&U(p,B))}())return p._squeezed=!0,M(s,function(){var e=[],n=[];(function(e,n){for(var t=p.argnames.length,i=s.args.length;--i>=t;)n.push(s.args[i]);for(i=t;0<=--i;){var r=p.argnames[i],o=s.args[i];if(r.__unused||C.var_names()[r.name])o&&n.push(o);else{var a=X(ln,r,r);r.definition().orig.push(a),!o&&B&&(o=X(En,s)),z(e,n,a,o)}}e.reverse(),n.reverse()})(e,n),function(e,n){for(var t=n.length,i=0,r=p.body.length;i<r;i++){var o=p.body[i];if(o instanceof Le)for(var a=0,s=o.definitions.length;a<s;a++){var u=o.definitions[a],c=u.name;if(z(e,n,c,u.value),B){var f=c.definition(),l=X(_n,c,c);f.references.push(l),n.splice(t++,0,X(rn,u,{operator:\"=\",left:l,right:X(En,c)}))}}}}(e,n),n.push(F),e.length&&(o=C.body.indexOf(r.parent(S-1))+1,C.body.splice(o,0,X(Le,p,{definitions:e})));return n}()).optimize(r);if(r.option(\"side_effects\")&&oe(p.body,j)){k=s.args.concat(X(En,s));return M(s,k).optimize(r)}}if(r.option(\"drop_console\")&&e instanceof Ge){for(var T=e.expression;T.expression;)T=T.expression;if(H(T)&&\"console\"==T.name)return X(En,s).optimize(r)}if(r.option(\"negate_iife\")&&r.parent()instanceof le&&N(s))return s.negate(r,!0);var O=s.evaluate(r);return O!==s?(O=q(O,s).optimize(r),I(r,O,s)):s;function $(e){return e?e instanceof Te?e.value?e.value.clone(!0):X(En,s):e instanceof le?X(Qe,e,{operator:\"void\",expression:e.body.clone(!0)}):void 0:X(En,s)}function z(e,n,t,i){var r=t.definition();C.variables.set(t.name,r),C.enclosed.push(r),C.var_names()[t.name]||(C.var_names()[t.name]=!0,e.push(X(Ve,t,{name:t,value:null})));var o=X(_n,t,t);r.references.push(o),i&&n.push(X(rn,s,{operator:\"=\",left:o,right:i}))}}),e(Je,function(e,n){if(n.option(\"unsafe\")){var t=e.expression;if(H(t))switch(t.name){case\"Object\":case\"RegExp\":case\"Function\":case\"Error\":case\"Array\":return X(Ye,e,e).transform(n)}}return e}),e(We,function(e,t){if(!t.option(\"side_effects\"))return e;var i,r,o=[];i=$(t),r=e.expressions.length-1,e.expressions.forEach(function(e,n){n<r&&(e=e.drop_side_effect_free(t,i)),e&&(l(o,e),i=!1)});var n=o.length-1;return function(){for(;0<n&&g(o[n],t);)n--;n<o.length-1&&(o[n]=X(Qe,e,{operator:\"void\",expression:o[n]}),o.length=n+1)}(),0==n?(e=Z(t.parent(),t.self(),o[0]))instanceof We||(e=e.optimize(t)):e.expressions=o,e}),Ke.DEFMETHOD(\"lift_sequences\",function(e){if(e.option(\"sequences\")&&this.expression instanceof We){var n=this.expression.expressions.slice(),t=this.clone();return t.expression=n.pop(),n.push(t),M(this,n).optimize(e)}return this}),e(en,function(e,n){return e.lift_sequences(n)}),e(Qe,function(e,n){var t=e.expression;if(\"delete\"==e.operator&&!(t instanceof _n||t instanceof Ge||Q(t)))return t instanceof We?((t=t.expressions.slice()).push(X(Bn,e)),M(e,t).optimize(n)):M(e,[t,X(Bn,e)]).optimize(n);var i=e.lift_sequences(n);if(i!==e)return i;if(n.option(\"side_effects\")&&\"void\"==e.operator)return(t=t.drop_side_effect_free(n))?(e.expression=t,e):X(En,e).optimize(n);if(n.option(\"booleans\")){if(\"!\"==e.operator&&t.is_truthy())return M(e,[t,X(Cn,e)]).optimize(n);if(n.in_boolean_context())switch(e.operator){case\"!\":if(t instanceof Qe&&\"!\"==t.operator)return t.expression;t instanceof nn&&(e=I(n,e,t.negate(n,$(n))));break;case\"typeof\":return n.warn(\"Boolean expression always true [{file}:{line},{col}]\",e.start),(t instanceof _n?X(Bn,e):M(e,[t,X(Bn,e)])).optimize(n)}}if(\"-\"==e.operator&&t instanceof Dn&&(t=t.transform(n)),t instanceof nn&&(\"+\"==e.operator||\"-\"==e.operator)&&(\"*\"==t.operator||\"/\"==t.operator||\"%\"==t.operator))return X(nn,e,{operator:t.operator,left:X(Qe,t.left,{operator:e.operator,expression:t.left}),right:t.right});if(\"-\"!=e.operator||!(t instanceof yn||t instanceof Dn)){var r=e.evaluate(n);if(r!==e)return I(n,r=q(r,e).optimize(n),e)}return e}),nn.DEFMETHOD(\"lift_sequences\",function(e){if(e.option(\"sequences\")){if(this.left instanceof We){var n=this.left.expressions.slice();return(t=this.clone()).left=n.pop(),n.push(t),M(this,n).optimize(e)}if(this.right instanceof We&&!this.left.has_side_effects(e)){for(var t,i=\"=\"==this.operator&&this.left instanceof _n,r=(n=this.right.expressions).length-1,o=0;o<r&&(i||!n[o].has_side_effects(e));o++);if(o==r)return n=n.slice(),(t=this.clone()).right=n.pop(),n.push(t),M(this,n).optimize(e);if(0<o)return(t=this.clone()).right=M(this.right,n.slice(o)),(n=n.slice(0,o)).push(t),M(this,n).optimize(e)}}return this});var E=W(\"== === != !== * & | ^\");function P(e,n){for(var t,i=0;t=e.parent(i);i++)if(t instanceof ke){var r=t.name;if(r&&r.definition()===n)break}return t}function k(e,n){return e instanceof _n||e.TYPE===n.TYPE}function U(t,n){var i=!1,r=new Sn(function(e){return!!i||(e instanceof _n&&te(e.definition(),n)?i=!0:void 0)}),o=new Sn(function(e){if(i)return!0;if(e instanceof Ae&&e!==t){var n=o.parent();if(n instanceof Ye&&n.expression===e)return;return e.walk(r),!0}});return t.walk(o),i}e(nn,function(t,n){function i(){return t.left.is_constant()||t.right.is_constant()||!t.left.has_side_effects(n)&&!t.right.has_side_effects(n)}function e(e){if(i()){e&&(t.operator=e);var n=t.left;t.left=t.right,t.right=n}}if(E(t.operator)&&t.right.is_constant()&&!t.left.is_constant()&&(t.left instanceof nn&&Jn[t.left.operator]>=Jn[t.operator]||e()),t=t.lift_sequences(n),n.option(\"comparisons\"))switch(t.operator){case\"===\":case\"!==\":var r=!0;(t.left.is_string(n)&&t.right.is_string(n)||t.left.is_number(n)&&t.right.is_number(n)||t.left.is_boolean()&&t.right.is_boolean()||t.left.equivalent_to(t.right))&&(t.operator=t.operator.substr(0,2));case\"==\":case\"!=\":if(!r&&g(t.left,n))t.left=X(xn,t.left);else if(n.option(\"typeofs\")&&t.left instanceof bn&&\"undefined\"==t.left.value&&t.right instanceof Qe&&\"typeof\"==t.right.operator){var o=t.right.expression;(o instanceof _n?!o.is_declared(n):o instanceof Ge&&n.option(\"ie8\"))||(t.right=o,t.left=X(En,t.left).optimize(n),2==t.operator.length&&(t.operator+=\"=\"))}else if(t.left instanceof _n&&t.right instanceof _n&&t.left.definition()===t.right.definition()&&((u=t.left.fixed_value())instanceof on||u instanceof ke||u instanceof an))return X(\"=\"==t.operator[0]?Bn:Cn,t);break;case\"&&\":case\"||\":var a=t.left;if(a.operator==t.operator&&(a=a.right),a instanceof nn&&a.operator==(\"&&\"==t.operator?\"!==\":\"===\")&&t.right instanceof nn&&a.operator==t.right.operator&&(g(a.left,n)&&t.right.left instanceof xn||a.left instanceof xn&&g(t.right.left,n))&&!a.right.has_side_effects(n)&&a.right.equivalent_to(t.right.right)){var s=X(nn,t,{operator:a.operator.slice(0,-1),left:X(xn,t),right:a.right});return a!==t.left&&(s=X(nn,t,{operator:t.operator,left:t.left.left,right:s})),s}}var u;if(n.option(\"booleans\")&&\"+\"==t.operator&&n.in_boolean_context()){var c=t.left.evaluate(n),f=t.right.evaluate(n);if(c&&\"string\"==typeof c)return n.warn(\"+ in boolean context always true [{file}:{line},{col}]\",t.start),M(t,[t.right,X(Bn,t)]).optimize(n);if(f&&\"string\"==typeof f)return n.warn(\"+ in boolean context always true [{file}:{line},{col}]\",t.start),M(t,[t.left,X(Bn,t)]).optimize(n)}if(n.option(\"comparisons\")&&t.is_boolean()){if(!(n.parent()instanceof nn)||n.parent()instanceof rn){var l=X(Qe,t,{operator:\"!\",expression:t.negate(n,$(n))});t=I(n,t,l)}switch(t.operator){case\">\":e(\"<\");break;case\">=\":e(\"<=\")}}if(\"+\"==t.operator){if(t.right instanceof bn&&\"\"==t.right.getValue()&&t.left.is_string(n))return t.left;if(t.left instanceof bn&&\"\"==t.left.getValue()&&t.right.is_string(n))return t.right;if(t.left instanceof nn&&\"+\"==t.left.operator&&t.left.left instanceof bn&&\"\"==t.left.left.getValue()&&t.right.is_string(n))return t.left=t.left.right,t.transform(n)}if(n.option(\"evaluate\")){switch(t.operator){case\"&&\":if(!(c=m(t.left)))return n.warn(\"Condition left of && always false [{file}:{line},{col}]\",t.start),Z(n.parent(),n.self(),t.left).optimize(n);if(!(c instanceof se))return n.warn(\"Condition left of && always true [{file}:{line},{col}]\",t.start),M(t,[t.left,t.right]).optimize(n);if(f=t.right.evaluate(n)){if(!(f instanceof se)){if(\"&&\"==(p=n.parent()).operator&&p.left===n.self()||n.option(\"booleans\")&&n.in_boolean_context())return n.warn(\"Dropping side-effect-free && [{file}:{line},{col}]\",t.start),t.left.optimize(n)}}else{if(n.option(\"booleans\")&&n.in_boolean_context())return n.warn(\"Boolean && always false [{file}:{line},{col}]\",t.start),M(t,[t.left,X(Cn,t)]).optimize(n);t.falsy=!0}if(\"||\"==t.left.operator)if(!(d=t.left.right.evaluate(n)))return X(tn,t,{condition:t.left.left,consequent:t.right,alternative:t.left.right}).optimize(n);break;case\"||\":var p,d;if(!(c=m(t.left)))return n.warn(\"Condition left of || always false [{file}:{line},{col}]\",t.start),M(t,[t.left,t.right]).optimize(n);if(!(c instanceof se))return n.warn(\"Condition left of || always true [{file}:{line},{col}]\",t.start),Z(n.parent(),n.self(),t.left).optimize(n);if(f=t.right.evaluate(n)){if(!(f instanceof se)){if(n.option(\"booleans\")&&n.in_boolean_context())return n.warn(\"Boolean || always true [{file}:{line},{col}]\",t.start),M(t,[t.left,X(Bn,t)]).optimize(n);t.truthy=!0}}else if(\"||\"==(p=n.parent()).operator&&p.left===n.self()||n.option(\"booleans\")&&n.in_boolean_context())return n.warn(\"Dropping side-effect-free || [{file}:{line},{col}]\",t.start),t.left.optimize(n);if(\"&&\"==t.left.operator)if((d=t.left.right.evaluate(n))&&!(d instanceof se))return X(tn,t,{condition:t.left.left,consequent:t.left.right,alternative:t.right}).optimize(n)}var h=!0;switch(t.operator){case\"+\":if(t.left instanceof gn&&t.right instanceof nn&&\"+\"==t.right.operator&&t.right.left instanceof gn&&t.right.is_string(n)&&(t=X(nn,t,{operator:\"+\",left:X(bn,t.left,{value:\"\"+t.left.getValue()+t.right.left.getValue(),start:t.left.start,end:t.right.left.end}),right:t.right.right})),t.right instanceof gn&&t.left instanceof nn&&\"+\"==t.left.operator&&t.left.right instanceof gn&&t.left.is_string(n)&&(t=X(nn,t,{operator:\"+\",left:t.left.left,right:X(bn,t.right,{value:\"\"+t.left.right.getValue()+t.right.getValue(),start:t.left.right.start,end:t.right.end})})),t.left instanceof nn&&\"+\"==t.left.operator&&t.left.is_string(n)&&t.left.right instanceof gn&&t.right instanceof nn&&\"+\"==t.right.operator&&t.right.left instanceof gn&&t.right.is_string(n)&&(t=X(nn,t,{operator:\"+\",left:X(nn,t.left,{operator:\"+\",left:t.left.left,right:X(bn,t.left.right,{value:\"\"+t.left.right.getValue()+t.right.left.getValue(),start:t.left.right.start,end:t.right.left.end})}),right:t.right.right})),t.right instanceof Qe&&\"-\"==t.right.operator&&t.left.is_number(n)){t=X(nn,t,{operator:\"-\",left:t.left,right:t.right.expression});break}if(t.left instanceof Qe&&\"-\"==t.left.operator&&i()&&t.right.is_number(n)){t=X(nn,t,{operator:\"-\",left:t.right,right:t.left.expression});break}case\"*\":h=n.option(\"unsafe_math\");case\"&\":case\"|\":case\"^\":if(t.left.is_number(n)&&t.right.is_number(n)&&i()&&!(t.left instanceof nn&&t.left.operator!=t.operator&&Jn[t.left.operator]>=Jn[t.operator])){var v=X(nn,t,{operator:t.operator,left:t.right,right:t.left});t=t.right instanceof gn&&!(t.left instanceof gn)?I(n,v,t):I(n,t,v)}h&&t.is_number(n)&&(t.right instanceof nn&&t.right.operator==t.operator&&(t=X(nn,t,{operator:t.operator,left:X(nn,t.left,{operator:t.operator,left:t.left,right:t.right.left,start:t.left.start,end:t.right.left.end}),right:t.right.right})),t.right instanceof gn&&t.left instanceof nn&&t.left.operator==t.operator&&(t.left.left instanceof gn?t=X(nn,t,{operator:t.operator,left:X(nn,t.left,{operator:t.operator,left:t.left.left,right:t.right,start:t.left.left.start,end:t.right.end}),right:t.left.right}):t.left.right instanceof gn&&(t=X(nn,t,{operator:t.operator,left:X(nn,t.left,{operator:t.operator,left:t.left.right,right:t.right,start:t.left.right.start,end:t.right.end}),right:t.left.left}))),t.left instanceof nn&&t.left.operator==t.operator&&t.left.right instanceof gn&&t.right instanceof nn&&t.right.operator==t.operator&&t.right.left instanceof gn&&(t=X(nn,t,{operator:t.operator,left:X(nn,t.left,{operator:t.operator,left:X(nn,t.left.left,{operator:t.operator,left:t.left.right,right:t.right.left,start:t.left.right.start,end:t.right.left.end}),right:t.left.left}),right:t.right.right})))}}if(t.right instanceof nn&&t.right.operator==t.operator&&(ee(t.operator)||\"+\"==t.operator&&(t.right.left.is_string(n)||t.left.is_string(n)&&t.right.right.is_string(n))))return t.left=X(nn,t.left,{operator:t.operator,left:t.left,right:t.right.left}),t.right=t.right.right,t.transform(n);var _=t.evaluate(n);return _!==t?(_=q(_,t).optimize(n),I(n,_,t)):t;function m(e){return!!e.truthy||!e.falsy&&(!!e.is_truthy()||e.evaluate(n))}}),e(_n,function(e,n){var t,i=e.resolve_defines(n);if(i)return i.optimize(n);if(!n.option(\"ie8\")&&H(e)&&(!e.scope.uses_with||!n.find_parent(xe)))switch(e.name){case\"undefined\":return X(En,e).optimize(n);case\"NaN\":return X(An,e).optimize(n);case\"Infinity\":return X(Dn,e).optimize(n)}if(n.option(\"reduce_vars\")&&ne(e,n.parent())!==e){var r=e.definition(),o=e.fixed_value(),a=r.single_use;if(a&&o instanceof ke)if(r.scope===e.scope||n.option(\"reduce_funcs\")&&1!=r.escaped&&!o.inlined){if(P(n,r))a=!1;else if((r.scope!==e.scope||r.orig[0]instanceof pn)&&\"f\"==(a=o.is_constant_expression(e.scope)))for(var s=e.scope;(s instanceof Ce||s instanceof Fe)&&(s.inlined=!0),s=s.parent_scope;);}else a=!1;if(a&&o){var u;if(o instanceof Ce&&(o._squeezed=!0,o=X(Fe,o,o)),0<r.recursive_refs&&o.name instanceof dn){var c=(u=o.clone(!0)).name.definition(),f=u.variables.get(u.name.name),l=f&&f.orig[0];l instanceof hn||(((l=X(hn,u.name,u.name)).scope=u).name=l,f=u.def_function(l)),u.walk(new Sn(function(e){e instanceof _n&&e.definition()===c&&(e.thedef=f).references.push(e)}))}else(u=o.optimize(n))===o&&(u=o.clone(!0));return u}if(o&&void 0===r.should_replace){var p;if(o instanceof mn)r.orig[0]instanceof pn||!oe(r.references,function(e){return r.scope===e.scope})||(p=o);else{var d=o.evaluate(n);d===o||!n.option(\"unsafe_regexp\")&&d instanceof RegExp||(p=q(d,o))}if(p){var h,v=p.optimize(n).print_to_string().length;o.walk(new Sn(function(e){if(e instanceof _n&&(t=!0),t)return!0})),t?h=function(){var e=p.optimize(n);return e===p?e.clone(!0):e}:(v=Math.min(v,o.print_to_string().length),h=function(){var e=x(p.optimize(n),o);return e===p||e===o?e.clone(!0):e});var _=r.name.length,m=0;n.option(\"unused\")&&!n.exposed(r)&&(m=(_+2+v)/(r.references.length-r.assignments)),r.should_replace=v<=_+m&&h}else r.should_replace=!1}if(r.should_replace)return r.should_replace()}return e}),e(En,function(e,n){if(n.option(\"unsafe_undefined\")){var t=o(n,\"undefined\");if(t){var i=X(_n,e,{name:\"undefined\",scope:t.scope,thedef:t});return i.is_undefined=!0,i}}var r=ne(n.self(),n.parent());return r&&k(r,e)?e:X(Qe,e,{operator:\"void\",expression:X(yn,e,{value:0})})}),e(Dn,function(e,n){var t=ne(n.self(),n.parent());return t&&k(t,e)?e:!n.option(\"keep_infinity\")||t&&!k(t,e)||o(n,\"Infinity\")?X(nn,e,{operator:\"/\",left:X(yn,e,{value:1}),right:X(yn,e,{value:0})}):e}),e(An,function(e,n){var t=ne(n.self(),n.parent());return t&&!k(t,e)||o(n,\"NaN\")?X(nn,e,{operator:\"/\",left:X(yn,e,{value:0}),right:X(yn,e,{value:0})}):e});var D=[\"+\",\"-\",\"/\",\"*\",\"%\",\">>\",\"<<\",\">>>\",\"|\",\"^\",\"&\"],F=[\"*\",\"|\",\"^\",\"&\"];e(rn,function(a,s){var e;if(s.option(\"dead_code\")&&a.left instanceof _n&&(e=a.left.definition()).scope===s.find_parent(ke)){var n,t=0,i=a;do{if(n=i,(i=s.parent(t++))instanceof Se){if(r(t,i))break;if(U(e.scope,[e]))break;return\"=\"==a.operator?a.right:(e.fixed=!1,X(nn,a,{operator:a.operator.slice(0,-1),left:a.left,right:a.right}).optimize(s))}}while(i instanceof nn&&i.right===n||i instanceof We&&i.tail_node()===n)}return\"=\"==(a=a.lift_sequences(s)).operator&&a.left instanceof _n&&a.right instanceof nn&&(a.right.left instanceof _n&&a.right.left.name==a.left.name&&te(a.right.operator,D)?(a.operator=a.right.operator+\"=\",a.right=a.right.right):a.right.right instanceof _n&&a.right.right.name==a.left.name&&te(a.right.operator,F)&&!a.right.left.has_side_effects(s)&&(a.operator=a.right.operator+\"=\",a.right=a.right.left)),a;function r(e,n){var t=a.right;a.right=X(xn,t);var i=n.may_throw(s);a.right=t;for(var r,o=a.left.definition().scope;(r=s.parent(e++))!==o;)if(r instanceof Re){if(r.bfinally)return!0;if(i&&r.bcatch)return!0}}}),e(tn,function(e,n){if(!n.option(\"conditionals\"))return e;if(e.condition instanceof We){var t=e.condition.expressions.slice();return e.condition=t.pop(),t.push(e),M(e,t)}var i=e.condition.is_truthy()||e.condition.tail_node().evaluate(n);if(!i)return n.warn(\"Condition always false [{file}:{line},{col}]\",e.start),M(e,[e.condition,e.alternative]).optimize(n);if(!(i instanceof se))return n.warn(\"Condition always true [{file}:{line},{col}]\",e.start),M(e,[e.condition,e.consequent]).optimize(n);var r=i.negate(n,$(n));I(n,i,r)===r&&(e=X(tn,e,{condition:r,consequent:e.alternative,alternative:e.consequent}));var o,a=e.condition,s=e.consequent,u=e.alternative;if(a instanceof _n&&s instanceof _n&&a.definition()===s.definition())return X(nn,e,{operator:\"||\",left:a,right:u});if(s instanceof rn&&u instanceof rn&&s.operator==u.operator&&s.left.equivalent_to(u.left)&&(!e.condition.has_side_effects(n)||\"=\"==s.operator&&!s.left.has_side_effects(n)))return X(rn,e,{operator:s.operator,left:s.left,right:X(tn,e,{condition:e.condition,consequent:s.right,alternative:u.right})});if(s instanceof Ye&&u.TYPE===s.TYPE&&0<s.args.length&&s.args.length==u.args.length&&s.expression.equivalent_to(u.expression)&&!e.condition.has_side_effects(n)&&!s.expression.has_side_effects(n)&&\"number\"==typeof(o=function(){for(var e=s.args,n=u.args,t=0,i=e.length;t<i;t++)if(!e[t].equivalent_to(n[t])){for(var r=t+1;r<i;r++)if(!e[r].equivalent_to(n[r]))return;return t}}())){var c=s.clone();return c.args[o]=X(tn,e,{condition:e.condition,consequent:s.args[o],alternative:u.args[o]}),c}if(s instanceof tn&&s.alternative.equivalent_to(u))return X(tn,e,{condition:X(nn,e,{left:e.condition,operator:\"&&\",right:s.condition}),consequent:s.consequent,alternative:u});if(s.equivalent_to(u))return M(e,[e.condition,s]).optimize(n);if((s instanceof We||u instanceof We)&&s.tail_node().equivalent_to(u.tail_node()))return M(e,[X(tn,e,{condition:e.condition,consequent:h(s),alternative:h(u)}),s.tail_node()]).optimize(n);if(s instanceof nn&&\"||\"==s.operator&&s.right.equivalent_to(u))return X(nn,e,{operator:\"||\",left:X(nn,e,{operator:\"&&\",left:e.condition,right:s.left}),right:u}).optimize(n);var f=n.option(\"booleans\")&&n.in_boolean_context();return p(e.consequent)?d(e.alternative)?l(e.condition):X(nn,e,{operator:\"||\",left:l(e.condition),right:e.alternative}):d(e.consequent)?p(e.alternative)?l(e.condition.negate(n)):X(nn,e,{operator:\"&&\",left:l(e.condition.negate(n)),right:e.alternative}):p(e.alternative)?X(nn,e,{operator:\"||\",left:l(e.condition.negate(n)),right:e.consequent}):d(e.alternative)?X(nn,e,{operator:\"&&\",left:l(e.condition),right:e.consequent}):e;function l(e){return e.is_boolean()?e:X(Qe,e,{operator:\"!\",expression:e.negate(n)})}function p(e){return e instanceof Bn||f&&e instanceof gn&&e.getValue()||e instanceof Qe&&\"!\"==e.operator&&e.expression instanceof gn&&!e.expression.getValue()}function d(e){return e instanceof Cn||f&&e instanceof gn&&!e.getValue()||e instanceof Qe&&\"!\"==e.operator&&e.expression instanceof gn&&e.expression.getValue()}function h(e){return e instanceof We?M(e,e.expressions.slice(0,-1)):X(yn,e,{value:0})}}),e(Fn,function(e,n){if(!n.option(\"booleans\"))return e;if(n.in_boolean_context())return X(yn,e,{value:+e.value});var t=n.parent();return t instanceof nn&&(\"==\"==t.operator||\"!=\"==t.operator)?(n.warn(\"Non-strict equality against boolean: {operator} {value} [{file}:{line},{col}]\",{operator:t.operator,value:e.value,file:t.start.file,line:t.start.line,col:t.start.col}),X(yn,e,{value:+e.value})):X(Qe,e,{operator:\"!\",expression:X(yn,e,{value:1-e.value})})}),e(Ze,function(e,n){var t,i=e.expression,r=e.property;if(n.option(\"properties\")){var o=r.evaluate(n);if(o!==r){if(\"string\"==typeof o)if(\"undefined\"==o)o=void 0;else(h=parseFloat(o)).toString()==o&&(o=h);r=e.property=x(r,q(o,r).transform(n));var a=\"\"+o;if(Nn(a)&&a.length<=r.print_to_string().length+1)return X(Xe,e,{expression:i,property:a}).optimize(n)}}if(ne(e,n.parent()))return e;if(o!==r){var s=e.flatten_object(a,n);s&&(i=e.expression=s.expression,r=e.property=s.property)}if(n.option(\"properties\")&&n.option(\"side_effects\")&&r instanceof yn&&i instanceof on){var u=r.getValue(),c=i.elements;if(u in c){for(var f=!0,l=[],p=c.length;--p>u;){(h=c[p].drop_side_effect_free(n))&&(l.unshift(h),f&&h.has_side_effects(n)&&(f=!1))}var d=c[u];for(d=d instanceof kn?X(En,d):d,f||l.unshift(d);0<=--p;){var h;(h=c[p].drop_side_effect_free(n))?l.unshift(h):u--}return f?(l.push(d),M(e,l).optimize(n)):X(Ze,e,{expression:X(on,i,{elements:l}),property:X(yn,r,{value:u})})}}if(n.option(\"arguments\")&&i instanceof _n&&\"arguments\"==i.name&&1==i.definition().orig.length&&(t=i.scope)instanceof ke&&r instanceof yn){u=r.getValue();var v=t.argnames[u];if(!v&&!n.option(\"keep_fargs\"))for(;u>=t.argnames.length;)v=X(pn,t,{name:t.make_var_name(\"argument_\"+t.argnames.length),scope:t}),t.argnames.push(v),t.enclosed.push(t.def_variable(v));if(v){var _=X(_n,e,v);return _.reference({}),_}}var m=e.evaluate(n);return m!==e?I(n,m=q(m,e).optimize(n),e):e}),ke.DEFMETHOD(\"contains_this\",function(){var n,t=this;return t.walk(new Sn(function(e){return!!n||(e instanceof mn?n=!0:e!==t&&e instanceof Ae||void 0)})),n}),Ge.DEFMETHOD(\"flatten_object\",function(e,n){if(n.option(\"properties\")){var t=this.expression;if(t instanceof an)for(var i=t.properties,r=i.length;0<=--r;){var o=i[r];if(\"\"+o.key==e){if(!oe(i,function(e){return e instanceof un}))break;var a=o.value;if(a instanceof Fe&&!(n.parent()instanceof Je)&&a.contains_this())break;return X(Ze,this,{expression:X(on,t,{elements:i.map(function(e){return e.value})}),property:X(yn,this,{value:r})})}}}}),e(Xe,function(e,n){\"arguments\"!=e.property&&\"caller\"!=e.property||n.warn(\"Function.protoype.{prop} not supported [{file}:{line},{col}]\",{prop:e.property,file:e.start.file,line:e.start.line,col:e.start.col});var t=e.resolve_defines(n);if(t)return t.optimize(n);if(ne(e,n.parent()))return e;if(n.option(\"unsafe_proto\")&&e.expression instanceof Xe&&\"prototype\"==e.expression.property){var i=e.expression.expression;if(H(i))switch(i.name){case\"Array\":e.expression=X(on,e.expression,{elements:[]});break;case\"Function\":e.expression=X(Fe,e.expression,{argnames:[],body:[]});break;case\"Number\":e.expression=X(yn,e.expression,{value:0});break;case\"Object\":e.expression=X(an,e.expression,{properties:[]});break;case\"RegExp\":e.expression=X(wn,e.expression,{value:/t/});break;case\"String\":e.expression=X(bn,e.expression,{value:\"\"})}}var r=e.flatten_object(e.property,n);if(r)return r.optimize(n);var o=e.evaluate(n);return o!==e?I(n,o=q(o,e).optimize(n),e):e}),e(Te,function(e,n){return e.value&&g(e.value,n)&&(e.value=null),e}),e(Ve,function(e,n){var t=n.option(\"global_defs\");return t&&ae(t,e.name.name)&&n.warn(\"global_defs \"+e.name.name+\" redefined [{file}:{line},{col}]\",e.start),e})}(),function(){var n=function(e){for(var n=!0,t=0;t<e.length;t++)n&&e[t]instanceof ue&&e[t].body instanceof bn?e[t]=new fe({start:e[t].start,end:e[t].end,value:e[t].body.value}):!n||e[t]instanceof ue&&e[t].body instanceof bn||(n=!1);return e},i={Program:function(e){return new Ee({start:s(e),end:u(e),body:n(e.body.map(c))})},FunctionDeclaration:function(e){return new Ce({start:s(e),end:u(e),name:c(e.id),argnames:e.params.map(c),body:n(c(e.body).body)})},FunctionExpression:function(e){return new Fe({start:s(e),end:u(e),name:c(e.id),argnames:e.params.map(c),body:n(c(e.body).body)})},ExpressionStatement:function(e){return new le({start:s(e),end:u(e),body:c(e.expression)})},TryStatement:function(e){var n=e.handlers||[e.handler];if(1<n.length||e.guardedHandlers&&e.guardedHandlers.length)throw new Error(\"Multiple catch clauses are not supported.\");return new Re({start:s(e),end:u(e),body:c(e.block).body,bcatch:c(n[0]),bfinally:e.finalizer?new Pe(c(e.finalizer)):null})},Property:function(e){var n=e.key,t={start:s(n),end:u(e.value),key:\"Identifier\"==n.type?n.name:n.value,value:c(e.value)};return\"init\"==e.kind?new un(t):(t.key=new K({name:t.key}),t.value=new De(t.value),\"get\"==e.kind?new Z(t):\"set\"==e.kind?new X(t):void 0)},ArrayExpression:function(e){return new on({start:s(e),end:u(e),elements:e.elements.map(function(e){return null===e?new kn:c(e)})})},ObjectExpression:function(e){return new an({start:s(e),end:u(e),properties:e.properties.map(function(e){return e.type=\"Property\",c(e)})})},SequenceExpression:function(e){return new We({start:s(e),end:u(e),expressions:e.expressions.map(c)})},MemberExpression:function(e){return new(e.computed?Ze:Xe)({start:s(e),end:u(e),property:e.computed?c(e.property):e.property.name,expression:c(e.object)})},SwitchCase:function(e){return new(e.test?He:Ne)({start:s(e),end:u(e),expression:c(e.test),body:e.consequent.map(c)})},VariableDeclaration:function(e){return new Le({start:s(e),end:u(e),definitions:e.declarations.map(c)})},Literal:function(e){var n=e.value,t={start:s(e),end:u(e)};if(null===n)return new xn(t);switch(typeof n){case\"string\":return t.value=n,new bn(t);case\"number\":return t.value=n,new yn(t);case\"boolean\":return new(n?Bn:Cn)(t);default:var i=e.regex;return i&&i.pattern?t.value=new RegExp(i.pattern,i.flags).toString():t.value=e.regex&&e.raw?e.raw:n,new wn(t)}},Identifier:function(e){var n=o[o.length-2];return new(\"LabeledStatement\"==n.type?Q:\"VariableDeclarator\"==n.type&&n.id===e?ln:\"FunctionExpression\"==n.type?n.id===e?hn:pn:\"FunctionDeclaration\"==n.type?n.id===e?dn:pn:\"CatchClause\"==n.type?vn:\"BreakStatement\"==n.type||\"ContinueStatement\"==n.type?ee:_n)({start:s(e),end:u(e),name:e.name})}};function r(e){if(\"Literal\"==e.type)return null!=e.raw?e.raw:e.value+\"\"}function s(e){var n=e.loc,t=n&&n.start,i=e.range;return new F({file:n&&n.source,line:t&&t.line,col:t&&t.column,pos:i?i[0]:e.start,endline:t&&t.line,endcol:t&&t.column,endpos:i?i[0]:e.start,raw:r(e)})}function u(e){var n=e.loc,t=n&&n.end,i=e.range;return new F({file:n&&n.source,line:t&&t.line,col:t&&t.column,pos:i?i[1]:e.end,endline:t&&t.line,endcol:t&&t.column,endpos:i?i[1]:e.end,raw:r(e)})}function e(e,n,t){var o=\"function From_Moz_\"+e+\"(M){\\n\";o+=\"return new U2.\"+n.name+\"({\\nstart: my_start_token(M),\\nend: my_end_token(M)\";var a=\"function To_Moz_\"+e+\"(M){\\n\";a+=\"return {\\ntype: \"+JSON.stringify(e),t&&t.split(/\\s*,\\s*/).forEach(function(e){var n=/([a-z0-9$_]+)(=|@|>|%)([a-z0-9$_]+)/i.exec(e);if(!n)throw new Error(\"Can't understand property map: \"+e);var t=n[1],i=n[2],r=n[3];switch(o+=\",\\n\"+r+\": \",a+=\",\\n\"+t+\": \",i){case\"@\":o+=\"M.\"+t+\".map(from_moz)\",a+=\"M.\"+r+\".map(to_moz)\";break;case\">\":o+=\"from_moz(M.\"+t+\")\",a+=\"to_moz(M.\"+r+\")\";break;case\"=\":o+=\"M.\"+t,a+=\"M.\"+r;break;case\"%\":o+=\"from_moz(M.\"+t+\").body\",a+=\"to_moz_block(M)\";break;default:throw new Error(\"Can't understand operator in propmap: \"+e)}}),o+=\"\\n})\\n}\",a+=\"\\n}\\n}\",o=new Function(\"U2\",\"my_start_token\",\"my_end_token\",\"from_moz\",\"return(\"+o+\")\")(h,s,u,c),a=new Function(\"to_moz\",\"to_moz_block\",\"to_moz_scope\",\"return(\"+a+\")\")(l,p,d),i[e]=o,f(n,a)}i.UpdateExpression=i.UnaryExpression=function(e){return new((\"prefix\"in e?e.prefix:\"UnaryExpression\"==e.type)?Qe:en)({start:s(e),end:u(e),operator:e.operator,expression:c(e.argument)})},e(\"EmptyStatement\",he),e(\"BlockStatement\",de,\"body@body\"),e(\"IfStatement\",Me,\"test>condition, consequent>body, alternate>alternative\"),e(\"LabeledStatement\",ve,\"label>label, body>body\"),e(\"BreakStatement\",$e,\"label>label\"),e(\"ContinueStatement\",ze,\"label>label\"),e(\"WithStatement\",xe,\"object>expression, body>body\"),e(\"SwitchStatement\",qe,\"discriminant>expression, cases@body\"),e(\"ReturnStatement\",Te,\"argument>value\"),e(\"ThrowStatement\",G,\"argument>value\"),e(\"WhileStatement\",be,\"test>condition, body>body\"),e(\"DoWhileStatement\",ge,\"test>condition, body>body\"),e(\"ForStatement\",ye,\"init>init, test>condition, update>step, body>body\"),e(\"ForInStatement\",we,\"left>init, right>object, body>body\"),e(\"DebuggerStatement\",ce),e(\"VariableDeclarator\",Ve,\"id>name, init>value\"),e(\"CatchClause\",Ie,\"param>argname, body%body\"),e(\"ThisExpression\",mn),e(\"BinaryExpression\",nn,\"operator=operator, left>left, right>right\"),e(\"LogicalExpression\",nn,\"operator=operator, left>left, right>right\"),e(\"AssignmentExpression\",rn,\"operator=operator, left>left, right>right\"),e(\"ConditionalExpression\",tn,\"test>condition, consequent>consequent, alternate>alternative\"),e(\"NewExpression\",Je,\"callee>expression, arguments@args\"),e(\"CallExpression\",Ye,\"callee>expression, arguments@args\"),f(Ee,function(e){return d(\"Program\",e)}),f(Ce,function(e){return{type:\"FunctionDeclaration\",id:l(e.name),params:e.argnames.map(l),body:d(\"BlockStatement\",e)}}),f(Fe,function(e){return{type:\"FunctionExpression\",id:l(e.name),params:e.argnames.map(l),body:d(\"BlockStatement\",e)}}),f(fe,function(e){return{type:\"ExpressionStatement\",expression:{type:\"Literal\",value:e.value}}}),f(le,function(e){return{type:\"ExpressionStatement\",expression:l(e.body)}}),f(je,function(e){return{type:\"SwitchCase\",test:l(e.expression),consequent:e.body.map(l)}}),f(Re,function(e){return{type:\"TryStatement\",block:p(e),handler:l(e.bcatch),guardedHandlers:[],finalizer:l(e.bfinally)}}),f(Ie,function(e){return{type:\"CatchClause\",param:l(e.argname),guard:null,body:p(e)}}),f(Ue,function(e){return{type:\"VariableDeclaration\",kind:\"var\",declarations:e.definitions.map(l)}}),f(We,function(e){return{type:\"SequenceExpression\",expressions:e.expressions.map(l)}}),f(Ge,function(e){var n=e instanceof Ze;return{type:\"MemberExpression\",object:l(e.expression),computed:n,property:n?l(e.property):{type:\"Identifier\",name:e.property}}}),f(Ke,function(e){return{type:\"++\"==e.operator||\"--\"==e.operator?\"UpdateExpression\":\"UnaryExpression\",operator:e.operator,prefix:e instanceof Qe,argument:l(e.expression)}}),f(nn,function(e){return{type:\"&&\"==e.operator||\"||\"==e.operator?\"LogicalExpression\":\"BinaryExpression\",left:l(e.left),operator:e.operator,right:l(e.right)}}),f(on,function(e){return{type:\"ArrayExpression\",elements:e.elements.map(l)}}),f(an,function(e){return{type:\"ObjectExpression\",properties:e.properties.map(l)}}),f(sn,function(e){var n,t={type:\"Literal\",value:e.key instanceof K?e.key.name:e.key};return e instanceof un?n=\"init\":e instanceof Z?n=\"get\":e instanceof X&&(n=\"set\"),{type:\"Property\",kind:n,key:t,value:l(e.value)}}),f(cn,function(e){var n=e.definition();return{type:\"Identifier\",name:n?n.mangled_name||n.name:e.name}}),f(wn,function(e){var n=e.value;return{type:\"Literal\",value:n,raw:n.toString(),regex:{pattern:n.source,flags:n.toString().match(/[gimuy]*$/)[0]}}}),f(gn,function(e){var n=e.value;return\"number\"==typeof n&&(n<0||0===n&&1/n<0)?{type:\"UnaryExpression\",operator:\"-\",prefix:!0,argument:{type:\"Literal\",value:-n,raw:e.start.raw}}:{type:\"Literal\",value:n,raw:e.start.raw}}),f(a,function(e){return{type:\"Identifier\",name:String(e.value)}}),Fn.DEFMETHOD(\"to_mozilla_ast\",gn.prototype.to_mozilla_ast),xn.DEFMETHOD(\"to_mozilla_ast\",gn.prototype.to_mozilla_ast),kn.DEFMETHOD(\"to_mozilla_ast\",function(){return null}),pe.DEFMETHOD(\"to_mozilla_ast\",de.prototype.to_mozilla_ast),ke.DEFMETHOD(\"to_mozilla_ast\",Fe.prototype.to_mozilla_ast);var o=null;function c(e){o.push(e);var n=null!=e?i[e.type](e):null;return o.pop(),n}function f(e,r){e.DEFMETHOD(\"to_mozilla_ast\",function(){return n=r(e=this),t=e.start,i=e.end,null!=t.pos&&null!=i.endpos&&(n.range=[t.pos,i.endpos]),t.line&&(n.loc={start:{line:t.line,column:t.col},end:i.endline?{line:i.endline,column:i.endcol}:null},t.file&&(n.loc.source=t.file)),n;var e,n,t,i})}function l(e){return null!=e?e.to_mozilla_ast():null}function p(e){return{type:\"BlockStatement\",body:e.body.map(l)}}function d(e,n){var t=n.body.map(l);return n.body[0]instanceof le&&n.body[0].body instanceof bn&&t.unshift(l(new he(n.body[0]))),{type:e,body:t}}se.from_mozilla_ast=function(e){var n=o;o=[];var t=c(e);return o=n,t}}();var y=\"undefined\"==typeof atob?function(e){return new Buffer(e,\"base64\").toString()}:atob,w=\"undefined\"==typeof btoa?function(e){return new Buffer(e).toString(\"base64\")}:btoa;function x(n,t,e){t[n]&&e.forEach(function(e){t[e]&&(\"object\"!=typeof t[e]&&(t[e]={}),n in t[e]||(t[e][n]=t[n]))})}function A(e){e&&(\"props\"in e?e.props instanceof O||(e.props=O.fromObject(e.props)):e.props=new O)}function E(e){return{props:e.props.toObject()}}h.Dictionary=O,h.TreeWalker=Sn,h.TreeTransformer=Xn,h.minify=function(e,n){var t,i,r=se.warn_function;try{var o,a=(n=Y(n,{compress:{},ie8:!1,keep_fnames:!1,mangle:{},nameCache:null,output:{},parse:{},rename:void 0,sourceMap:!1,timings:!1,toplevel:!1,warnings:!1,wrap:!1},!0)).timings&&{start:Date.now()};void 0===n.rename&&(n.rename=n.compress&&n.mangle),x(\"ie8\",n,[\"compress\",\"mangle\",\"output\"]),x(\"keep_fnames\",n,[\"compress\",\"mangle\"]),x(\"toplevel\",n,[\"compress\",\"mangle\"]),x(\"warnings\",n,[\"compress\"]),n.mangle&&(n.mangle=Y(n.mangle,{cache:n.nameCache&&(n.nameCache.vars||{}),eval:!1,ie8:!1,keep_fnames:!1,properties:!1,reserved:[],toplevel:!1},!0),n.mangle.properties&&(\"object\"!=typeof n.mangle.properties&&(n.mangle.properties={}),n.mangle.properties.keep_quoted&&(o=n.mangle.properties.reserved,Array.isArray(o)||(o=[]),n.mangle.properties.reserved=o),!n.nameCache||\"cache\"in n.mangle.properties||(n.mangle.properties.cache=n.nameCache.props||{})),A(n.mangle.cache),A(n.mangle.properties.cache)),n.sourceMap&&(n.sourceMap=Y(n.sourceMap,{content:null,filename:null,includeSources:!1,root:null,url:null},!0));var s,u=[];if(n.warnings&&!se.warn_function&&(se.warn_function=function(e){u.push(e)}),a&&(a.parse=Date.now()),e instanceof Ee)s=e;else{for(var c in\"string\"==typeof e&&(e=[e]),n.parse=n.parse||{},n.parse.toplevel=null,e)if(ae(e,c)&&(n.parse.filename=c,n.parse.toplevel=Gn(e[c],n.parse),n.sourceMap&&\"inline\"==n.sourceMap.content)){if(1<Object.keys(e).length)throw new Error(\"inline source map only works with singular input\");n.sourceMap.content=(t=e[c],(i=/\\n\\/\\/# sourceMappingURL=data:application\\/json(;.*?)?;base64,(.*)/.exec(t))?y(i[2]):(se.warn(\"inline source map not found\"),null))}s=n.parse.toplevel}o&&function(e,n){function t(e){v(n,e)}e.walk(new Sn(function(e){e instanceof un&&e.quote?t(e.key):e instanceof Ze&&b(e.property,t)}))}(s,o),n.wrap&&(s=s.wrap_commonjs(n.wrap)),a&&(a.rename=Date.now()),n.rename&&(s.figure_out_scope(n.mangle),s.expand_names(n.mangle)),a&&(a.compress=Date.now()),n.compress&&(s=new et(n.compress).compress(s)),a&&(a.scope=Date.now()),n.mangle&&s.figure_out_scope(n.mangle),a&&(a.mangle=Date.now()),n.mangle&&(s.compute_char_frequency(n.mangle),s.mangle_names(n.mangle)),a&&(a.properties=Date.now()),n.mangle&&n.mangle.properties&&(s=d(s,n.mangle.properties)),a&&(a.output=Date.now());var f={};if(n.output.ast&&(f.ast=s),!ae(n.output,\"code\")||n.output.code){if(n.sourceMap&&(\"string\"==typeof n.sourceMap.content&&(n.sourceMap.content=JSON.parse(n.sourceMap.content)),n.output.source_map=function(s){s=Y(s,{file:null,root:null,orig:null,orig_line_diff:0,dest_line_diff:0});var u=new MOZ_SourceMap.SourceMapGenerator({file:s.file,sourceRoot:s.root}),c=s.orig&&new MOZ_SourceMap.SourceMapConsumer(s.orig);return c&&Array.isArray(s.orig.sources)&&c._sources.toArray().forEach(function(e){var n=c.sourceContentFor(e,!0);n&&u.setSourceContent(e,n)}),{add:function(e,n,t,i,r,o){if(c){var a=c.originalPositionFor({line:i,column:r});if(null===a.source)return;e=a.source,i=a.line,r=a.column,o=a.name||o}u.addMapping({generated:{line:n+s.dest_line_diff,column:t},original:{line:i+s.orig_line_diff,column:r},source:e,name:o})},get:function(){return u},toString:function(){return JSON.stringify(u.toJSON())}}}({file:n.sourceMap.filename,orig:n.sourceMap.content,root:n.sourceMap.root}),n.sourceMap.includeSources)){if(e instanceof Ee)throw new Error(\"original source content unavailable\");for(var c in e)ae(e,c)&&n.output.source_map.get().setSourceContent(c,e[c])}delete n.output.ast,delete n.output.code;var l=Qn(n.output);s.print(l),f.code=l.get(),n.sourceMap&&(f.map=n.output.source_map.toString(),\"inline\"==n.sourceMap.url?f.code+=\"\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+w(f.map):n.sourceMap.url&&(f.code+=\"\\n//# sourceMappingURL=\"+n.sourceMap.url))}return n.nameCache&&n.mangle&&(n.mangle.cache&&(n.nameCache.vars=E(n.mangle.cache)),n.mangle.properties&&n.mangle.properties.cache&&(n.nameCache.props=E(n.mangle.properties.cache))),a&&(a.end=Date.now(),f.timings={parse:.001*(a.rename-a.parse),rename:.001*(a.compress-a.rename),compress:.001*(a.scope-a.compress),scope:.001*(a.mangle-a.scope),mangle:.001*(a.properties-a.mangle),properties:.001*(a.output-a.properties),output:.001*(a.end-a.output),total:.001*(a.end-a.start)}),u.length&&(f.warnings=u),f}catch(e){return{error:e}}finally{se.warn_function=r}},h.parse=Gn,h._push_uniq=v}(\"undefined\"==typeof UglifyJS?UglifyJS={}:UglifyJS);module.exports = global.UglifyJS\ndelete global.UglifyJS\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../buffer/index.js */ 6).Buffer, __webpack_require__(/*! ./../webpack/buildin/global.js */ 1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/*!*************************************************!*\
  !*** ./src/components/raw-textarea/raw-text.js ***!
  \*************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_base64__ = __webpack_require__(/*! js-base64 */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_base64___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_js_base64__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Import Base64\n\n\nvar _wp$element = wp.element,\n    Component = _wp$element.Component,\n    Fragment = _wp$element.Fragment;\nvar TextControl = wp.components.TextControl;\n\nvar RawTextControl = function (_Component) {\n  _inherits(RawTextControl, _Component);\n\n  function RawTextControl() {\n    _classCallCheck(this, RawTextControl);\n\n    return _possibleConstructorReturn(this, (RawTextControl.__proto__ || Object.getPrototypeOf(RawTextControl)).apply(this, arguments));\n  }\n\n  _createClass(RawTextControl, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return wp.element.createElement(\n        Fragment,\n        null,\n        wp.element.createElement(\n          'div',\n          { className: 'components-base-control mcw-textarea-comp' },\n          wp.element.createElement(\n            'label',\n            null,\n            this.props.label\n          ),\n          wp.element.createElement(\n            'div',\n            { className: 'mcw-textarea-comp-inner' },\n            wp.element.createElement(\n              'p',\n              { className: 'mcw-textarea-def' },\n              this.props.beginning\n            ),\n            wp.element.createElement(TextControl, {\n              type: 'string',\n              placeholder: 'name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"',\n              value: __WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].decode(this.props.value),\n              onChange: function onChange(value) {\n                return _this2.props.onChange(__WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].encode(value));\n              }\n            }),\n            wp.element.createElement(\n              'p',\n              { className: 'mcw-textarea-def' },\n              this.props.ending\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return RawTextControl;\n}(Component);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RawTextControl);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yYXctdGV4dGFyZWEvcmF3LXRleHQuanM/ODA1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8vIEltcG9ydCBCYXNlNjRcbmltcG9ydCB7IEJhc2U2NCB9IGZyb20gJ2pzLWJhc2U2NCc7XG5cbnZhciBfd3AkZWxlbWVudCA9IHdwLmVsZW1lbnQsXG4gICAgQ29tcG9uZW50ID0gX3dwJGVsZW1lbnQuQ29tcG9uZW50LFxuICAgIEZyYWdtZW50ID0gX3dwJGVsZW1lbnQuRnJhZ21lbnQ7XG52YXIgVGV4dENvbnRyb2wgPSB3cC5jb21wb25lbnRzLlRleHRDb250cm9sO1xuXG52YXIgUmF3VGV4dENvbnRyb2wgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmF3VGV4dENvbnRyb2wsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJhd1RleHRDb250cm9sKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSYXdUZXh0Q29udHJvbCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJhd1RleHRDb250cm9sLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmF3VGV4dENvbnRyb2wpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSYXdUZXh0Q29udHJvbCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgRnJhZ21lbnQsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbXBvbmVudHMtYmFzZS1jb250cm9sIG1jdy10ZXh0YXJlYS1jb21wJyB9LFxuICAgICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5sYWJlbFxuICAgICAgICAgICksXG4gICAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ21jdy10ZXh0YXJlYS1jb21wLWlubmVyJyB9LFxuICAgICAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAncCcsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnbWN3LXRleHRhcmVhLWRlZicgfSxcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5iZWdpbm5pbmdcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoVGV4dENvbnRyb2wsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTEuMFwiJyxcbiAgICAgICAgICAgICAgdmFsdWU6IEJhc2U2NC5kZWNvZGUodGhpcy5wcm9wcy52YWx1ZSksXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIucHJvcHMub25DaGFuZ2UoQmFzZTY0LmVuY29kZSh2YWx1ZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ3AnLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ21jdy10ZXh0YXJlYS1kZWYnIH0sXG4gICAgICAgICAgICAgIHRoaXMucHJvcHMuZW5kaW5nXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSYXdUZXh0Q29udHJvbDtcbn0oQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgUmF3VGV4dENvbnRyb2w7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9yYXctdGV4dGFyZWEvcmF3LXRleHQuanNcbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/*!*************************************************************************!*\
  !*** ./src/components/block-with-description/block-with-description.js ***!
  \*************************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _wp$element = wp.element,\n    Component = _wp$element.Component,\n    Fragment = _wp$element.Fragment;\n\nvar BlockWithDescription = function (_Component) {\n  _inherits(BlockWithDescription, _Component);\n\n  function BlockWithDescription() {\n    _classCallCheck(this, BlockWithDescription);\n\n    return _possibleConstructorReturn(this, (BlockWithDescription.__proto__ || Object.getPrototypeOf(BlockWithDescription)).apply(this, arguments));\n  }\n\n  _createClass(BlockWithDescription, [{\n    key: 'render',\n    value: function render() {\n      return wp.element.createElement(\n        Fragment,\n        null,\n        this.props.children,\n        wp.element.createElement(\n          'div',\n          { className: 'components-base-control mcw-js-css-desc' },\n          this.props.description\n        )\n      );\n    }\n  }]);\n\n  return BlockWithDescription;\n}(Component);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (BlockWithDescription);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ibG9jay13aXRoLWRlc2NyaXB0aW9uL2Jsb2NrLXdpdGgtZGVzY3JpcHRpb24uanM/MDY3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfd3AkZWxlbWVudCA9IHdwLmVsZW1lbnQsXG4gICAgQ29tcG9uZW50ID0gX3dwJGVsZW1lbnQuQ29tcG9uZW50LFxuICAgIEZyYWdtZW50ID0gX3dwJGVsZW1lbnQuRnJhZ21lbnQ7XG5cbnZhciBCbG9ja1dpdGhEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCbG9ja1dpdGhEZXNjcmlwdGlvbiwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQmxvY2tXaXRoRGVzY3JpcHRpb24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJsb2NrV2l0aERlc2NyaXB0aW9uKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQmxvY2tXaXRoRGVzY3JpcHRpb24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9ja1dpdGhEZXNjcmlwdGlvbikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJsb2NrV2l0aERlc2NyaXB0aW9uLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIEZyYWdtZW50LFxuICAgICAgICBudWxsLFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuLFxuICAgICAgICB3cC5lbGVtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdjb21wb25lbnRzLWJhc2UtY29udHJvbCBtY3ctanMtY3NzLWRlc2MnIH0sXG4gICAgICAgICAgdGhpcy5wcm9wcy5kZXNjcmlwdGlvblxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCbG9ja1dpdGhEZXNjcmlwdGlvbjtcbn0oQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgQmxvY2tXaXRoRGVzY3JpcHRpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9ibG9jay13aXRoLWRlc2NyaXB0aW9uL2Jsb2NrLXdpdGgtZGVzY3JpcHRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/*!***************************************!*\
  !*** ./src/components/modal/modal.js ***!
  \***************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * BLOCK: FullPage Wrapper\r\n */\n\nvar _wp$element = wp.element,\n    Component = _wp$element.Component,\n    Fragment = _wp$element.Fragment;\nvar _wp$components = wp.components,\n    Button = _wp$components.Button,\n    Modal = _wp$components.Modal;\n\nvar ModalSettings = function (_Component) {\n  _inherits(ModalSettings, _Component);\n\n  function ModalSettings() {\n    _classCallCheck(this, ModalSettings);\n\n    var _this = _possibleConstructorReturn(this, (ModalSettings.__proto__ || Object.getPrototypeOf(ModalSettings)).apply(this, arguments));\n\n    _this.state = {\n      isOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(ModalSettings, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var isOpen = this.state.isOpen;\n\n\n      return wp.element.createElement(\n        Fragment,\n        null,\n        wp.element.createElement(\n          Button,\n          {\n            className: 'mcw-modal-button',\n            isDefault: true,\n            onClick: function onClick() {\n              return _this2.setState({ isOpen: true });\n            }\n          },\n          this.props.buttonText\n        ),\n        isOpen && wp.element.createElement(\n          Modal,\n          {\n            title: this.props.modalTitle,\n            shouldCloseOnClickOutside: false,\n            className: 'mcw-modal-component',\n            onRequestClose: function onRequestClose() {\n              _this2.setState({ isOpen: false });\n            }\n          },\n          this.props.children,\n          wp.element.createElement(\n            Button,\n            {\n              isDefault: true,\n              isPrimary: true,\n              onClick: function onClick() {\n                return _this2.setState({ isOpen: false });\n              }\n            },\n            this.props.modalButtonText\n          )\n        )\n      );\n    }\n  }]);\n\n  return ModalSettings;\n}(Component);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ModalSettings);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb2RhbC9tb2RhbC5qcz85NmMwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXHJcbiAqIEJMT0NLOiBGdWxsUGFnZSBXcmFwcGVyXHJcbiAqL1xuXG52YXIgX3dwJGVsZW1lbnQgPSB3cC5lbGVtZW50LFxuICAgIENvbXBvbmVudCA9IF93cCRlbGVtZW50LkNvbXBvbmVudCxcbiAgICBGcmFnbWVudCA9IF93cCRlbGVtZW50LkZyYWdtZW50O1xudmFyIF93cCRjb21wb25lbnRzID0gd3AuY29tcG9uZW50cyxcbiAgICBCdXR0b24gPSBfd3AkY29tcG9uZW50cy5CdXR0b24sXG4gICAgTW9kYWwgPSBfd3AkY29tcG9uZW50cy5Nb2RhbDtcblxudmFyIE1vZGFsU2V0dGluZ3MgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTW9kYWxTZXR0aW5ncywgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxTZXR0aW5ncygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxTZXR0aW5ncyk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTW9kYWxTZXR0aW5ncy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1vZGFsU2V0dGluZ3MpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaXNPcGVuOiBmYWxzZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1vZGFsU2V0dGluZ3MsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBpc09wZW4gPSB0aGlzLnN0YXRlLmlzT3BlbjtcblxuXG4gICAgICByZXR1cm4gd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBGcmFnbWVudCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEJ1dHRvbixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdtY3ctbW9kYWwtYnV0dG9uJyxcbiAgICAgICAgICAgIGlzRGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc2V0U3RhdGUoeyBpc09wZW46IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aGlzLnByb3BzLmJ1dHRvblRleHRcbiAgICAgICAgKSxcbiAgICAgICAgaXNPcGVuICYmIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBNb2RhbCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aXRsZTogdGhpcy5wcm9wcy5tb2RhbFRpdGxlLFxuICAgICAgICAgICAgc2hvdWxkQ2xvc2VPbkNsaWNrT3V0c2lkZTogZmFsc2UsXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdtY3ctbW9kYWwtY29tcG9uZW50JyxcbiAgICAgICAgICAgIG9uUmVxdWVzdENsb3NlOiBmdW5jdGlvbiBvblJlcXVlc3RDbG9zZSgpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgaXNPcGVuOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpc0RlZmF1bHQ6IHRydWUsXG4gICAgICAgICAgICAgIGlzUHJpbWFyeTogdHJ1ZSxcbiAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnNldFN0YXRlKHsgaXNPcGVuOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRoaXMucHJvcHMubW9kYWxCdXR0b25UZXh0XG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNb2RhbFNldHRpbmdzO1xufShDb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBNb2RhbFNldHRpbmdzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvbW9kYWwvbW9kYWwuanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/*!***************************!*\
  !*** ./src/block/save.js ***!
  \***************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_base64__ = __webpack_require__(/*! js-base64 */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_js_base64___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_js_base64__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * BLOCK: FullPage Wrapper\r\n */\n\n/* Import Base64 */\n\n\nvar _wp$element = wp.element,\n    Fragment = _wp$element.Fragment,\n    Component = _wp$element.Component;\n\nvar CustomJsAndCssSave = function (_Component) {\n  _inherits(CustomJsAndCssSave, _Component);\n\n  function CustomJsAndCssSave() {\n    _classCallCheck(this, CustomJsAndCssSave);\n\n    return _possibleConstructorReturn(this, (CustomJsAndCssSave.__proto__ || Object.getPrototypeOf(CustomJsAndCssSave)).apply(this, arguments));\n  }\n\n  _createClass(CustomJsAndCssSave, [{\n    key: \"render\",\n    value: function render() {\n      var _props$attributes = this.props.attributes,\n          jsInlineParams = _props$attributes.jsInlineParams,\n          cssInlineParams = _props$attributes.cssInlineParams;\n\n\n      return wp.element.createElement(\n        Fragment,\n        null,\n        cssInlineParams[0].min && cssInlineParams[0].min.length !== 0 && wp.element.createElement(\n          \"style\",\n          { type: \"text/css\" },\n          __WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].decode(cssInlineParams[0].min)\n        ),\n        jsInlineParams[0].min && jsInlineParams[0].min.length !== 0 && wp.element.createElement(\n          \"script\",\n          { type: \"text/javascript\" },\n          __WEBPACK_IMPORTED_MODULE_0_js_base64__[\"Base64\"].decode(jsInlineParams[0].min)\n        )\n      );\n    }\n  }]);\n\n  return CustomJsAndCssSave;\n}(Component);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (CustomJsAndCssSave);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svc2F2ZS5qcz9jNGQ0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXHJcbiAqIEJMT0NLOiBGdWxsUGFnZSBXcmFwcGVyXHJcbiAqL1xuXG4vKiBJbXBvcnQgQmFzZTY0ICovXG5pbXBvcnQgeyBCYXNlNjQgfSBmcm9tICdqcy1iYXNlNjQnO1xuXG52YXIgX3dwJGVsZW1lbnQgPSB3cC5lbGVtZW50LFxuICAgIEZyYWdtZW50ID0gX3dwJGVsZW1lbnQuRnJhZ21lbnQsXG4gICAgQ29tcG9uZW50ID0gX3dwJGVsZW1lbnQuQ29tcG9uZW50O1xuXG52YXIgQ3VzdG9tSnNBbmRDc3NTYXZlID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEN1c3RvbUpzQW5kQ3NzU2F2ZSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ3VzdG9tSnNBbmRDc3NTYXZlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDdXN0b21Kc0FuZENzc1NhdmUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDdXN0b21Kc0FuZENzc1NhdmUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDdXN0b21Kc0FuZENzc1NhdmUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDdXN0b21Kc0FuZENzc1NhdmUsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzJGF0dHJpYnV0ZXMgPSB0aGlzLnByb3BzLmF0dHJpYnV0ZXMsXG4gICAgICAgICAganNJbmxpbmVQYXJhbXMgPSBfcHJvcHMkYXR0cmlidXRlcy5qc0lubGluZVBhcmFtcyxcbiAgICAgICAgICBjc3NJbmxpbmVQYXJhbXMgPSBfcHJvcHMkYXR0cmlidXRlcy5jc3NJbmxpbmVQYXJhbXM7XG5cblxuICAgICAgcmV0dXJuIHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgRnJhZ21lbnQsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGNzc0lubGluZVBhcmFtc1swXS5taW4gJiYgY3NzSW5saW5lUGFyYW1zWzBdLm1pbi5sZW5ndGggIT09IDAgJiYgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3R5bGVcIixcbiAgICAgICAgICB7IHR5cGU6IFwidGV4dC9jc3NcIiB9LFxuICAgICAgICAgIEJhc2U2NC5kZWNvZGUoY3NzSW5saW5lUGFyYW1zWzBdLm1pbilcbiAgICAgICAgKSxcbiAgICAgICAganNJbmxpbmVQYXJhbXNbMF0ubWluICYmIGpzSW5saW5lUGFyYW1zWzBdLm1pbi5sZW5ndGggIT09IDAgJiYgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic2NyaXB0XCIsXG4gICAgICAgICAgeyB0eXBlOiBcInRleHQvamF2YXNjcmlwdFwiIH0sXG4gICAgICAgICAgQmFzZTY0LmRlY29kZShqc0lubGluZVBhcmFtc1swXS5taW4pXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEN1c3RvbUpzQW5kQ3NzU2F2ZTtcbn0oQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tSnNBbmRDc3NTYXZlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2Jsb2NrL3NhdmUuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n");

/***/ })
/******/ ]);